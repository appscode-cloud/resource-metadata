/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
	v1alpha1 "kmodules.xyz/resource-metadata/apis/meta/v1alpha1"
	scheme "kmodules.xyz/resource-metadata/client/clientset/versioned/scheme"
)

// ClusterStatusesGetter has a method to return a ClusterStatusInterface.
// A group's client should implement this interface.
type ClusterStatusesGetter interface {
	ClusterStatuses() ClusterStatusInterface
}

// ClusterStatusInterface has methods to work with ClusterStatus resources.
type ClusterStatusInterface interface {
	Create(ctx context.Context, clusterStatus *v1alpha1.ClusterStatus, opts v1.CreateOptions) (*v1alpha1.ClusterStatus, error)
	ClusterStatusExpansion
}

// clusterStatuses implements ClusterStatusInterface
type clusterStatuses struct {
	client rest.Interface
}

// newClusterStatuses returns a ClusterStatuses
func newClusterStatuses(c *MetaV1alpha1Client) *clusterStatuses {
	return &clusterStatuses{
		client: c.RESTClient(),
	}
}

// Create takes the representation of a clusterStatus and creates it.  Returns the server's representation of the clusterStatus, and an error, if there is any.
func (c *clusterStatuses) Create(ctx context.Context, clusterStatus *v1alpha1.ClusterStatus, opts v1.CreateOptions) (result *v1alpha1.ClusterStatus, err error) {
	result = &v1alpha1.ClusterStatus{}
	err = c.client.Post().
		Resource("clusterstatuses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(clusterStatus).
		Do(ctx).
		Into(result)
	return
}
