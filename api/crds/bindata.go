// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// meta.appscode.com_resourcedescriptors.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaAppscodeCom_resourcedescriptorsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3b\xcd\x72\xe3\x36\xd2\x77\x3f\x45\x97\xbf\x83\x2f\x12\xf5\x79\x72\xd9\xd2\xcd\xe5\x99\xda\xd2\x6e\xe2\x4c\xc5\xae\xb9\x6c\x72\x80\xc8\x96\x88\x18\x04\x18\x00\x94\x47\x9b\xca\xbb\x6f\x35\x7e\x28\x4a\x22\x48\x4a\x33\x93\x54\x70\xb2\x40\xa0\xbb\xd1\xff\x68\xb4\x6f\xe6\xf3\xf9\x0d\xab\xf9\x27\xd4\x86\x2b\xb9\x04\x56\x73\xfc\x6c\x51\xd2\x2f\x93\xbd\xfe\xc3\x64\x5c\x2d\x76\xf7\x6b\xb4\xec\xfe\xe6\x95\xcb\x62\x09\x8f\x8d\xb1\xaa\xfa\x09\x8d\x6a\x74\x8e\xef\x71\xc3\x25\xb7\x5c\xc9\x9b\x0a\x2d\x2b\x98\x65\xcb\x1b\x80\x5c\x23\xa3\xc9\x17\x5e\xa1\xb1\xac\xaa\x97\x20\x1b\x21\x6e\x00\x24\xab\x70\x09\x3a\x6c\x2f\xd0\xe4\x9a\xd7\x56\x69\x93\xd1\xfe\x8c\xd5\xb5\xc9\x55\x81\x59\xae\xaa\x1b\x53\x63\x4e\xd0\x58\x51\x38\x14\x4c\x7c\xd4\x5c\x5a\xd4\x8f\x4a\x34\x95\x34\xf4\x6d\x0e\xff\x7a\xfe\xf1\xe9\x23\xb3\xe5\x12\x32\x63\x99\x6d\x4c\x56\x97\xcc\xe0\x0d\x40\xc4\xf6\xec\xa6\xdd\x84\xdd\xd7\xb8\x04\x63\x35\x97\xdb\xd3\xdd\xf1\x00\xd9\x19\xf5\x1d\x58\x0f\x5b\xec\x00\x2a\x98\xa5\x9f\x5b\xad\x9a\x7a\x09\xe7\x27\xf0\xbb\x1c\xa1\x00\x39\xb3\xb8\x55\x9a\xc7\xdf\x73\xd8\xb1\x46\xd8\xf0\x77\xad\x04\xcf\xf7\xe1\x47\x04\x12\x7f\x3a\xd6\x01\x78\x09\x1c\x78\x1f\x99\xe7\x3e\x0a\x6e\xec\xbf\x13\x0b\xbe\xe7\xc6\xe3\xa9\x45\xa3\x99\xe8\x15\x80\xfb\x6e\x4a\xa5\xed\xd3\x81\xe6\x39\xe8\xc2\x7f\xe0\x72\xdb\x08\xa6\xfb\xb6\xde\x00\x98\x5c\x11\x3f\xdc\xce\x9a\xe5\x48\x9b\x4c\xb3\x8e\x6b\x03\x34\x2f\x9f\x25\xfc\xfe\xc7\x0d\xc0\x8e\x09\x5e\x38\x3e\xfb\x8f\xaa\x46\xf9\xf0\x71\xf5\xe9\xbb\xe7\xbc\xc4\x8a\xf9\x49\x80\x5a\xab\x1a\xb5\x6d\xb9\x46\xa3\xa3\xb2\xed\x1c\x40\x24\xc8\x69\xf2\x1d\x81\xf2\x6b\xa0\x20\x25\x45\x03\xb6\x44\xd8\xf9\x39\x2c\xc0\x38\x34\xa0\x36\x60\x4b\x6e\x40\x63\xad\xd1\xa0\xb4\x8e\xa4\x0e\x58\xa0\x25\x4c\x82\x5a\xff\x8a\xb9\xcd\xe0\x19\x35\x01\x21\x56\x35\xa2\x80\x5c\xc9\x1d\x6a\x0b\x1a\x73\xb5\x95\xfc\xbf\x2d\x64\x03\x56\x39\x94\x82\x59\x0c\xec\x8f\xc3\x69\xb1\x64\x82\x98\xd0\xe0\x0c\x98\x2c\xa0\x62\x7b\xd0\x48\x38\xa0\x91\x1d\x68\x6e\x89\xc9\xe0\x07\xa5\x11\xb8\xdc\xa8\x25\x94\xd6\xd6\x66\xb9\x58\x6c\xb9\x8d\x46\x9a\xab\xaa\x6a\x24\xb7\xfb\x45\xae\xa4\xd5\x7c\xdd\x90\x4c\x17\x05\xee\x50\x2c\x58\xcd\xe7\x8e\x4e\x69\x9d\x61\x57\xc5\xff\xb5\x92\xb9\xeb\x10\x76\x62\x1d\x7e\x38\xa5\x4b\xb2\x99\x34\x0e\xb8\x01\x16\xb6\x79\x72\x0f\xdc\xa4\x29\x62\xc2\x4f\x1f\x9e\x5f\x5a\xd5\x71\x1c\x3f\x66\xb1\x63\xee\x61\x9b\x39\xf0\x99\xf8\xc2\xe5\x06\xb5\x97\xd3\x46\xab\xca\x41\x44\x59\xd4\x8a\x4b\xeb\x7e\xe4\x82\xa3\x3c\xe6\xb1\x69\xd6\x15\xb7\x24\xd8\xdf\x1a\x34\x96\xc4\x91\xc1\x23\x93\x52\x59\x58\x23\x34\x35\x19\x6f\x91\xc1\x4a\xc2\x23\xab\x50\x3c\x32\x83\x5f\x9b\xcb\xc4\x50\x33\x27\x0e\x8e\xf3\xb9\xeb\x3f\x8f\x17\x7a\xe6\xb4\xd3\xd1\x2d\xc6\xd1\x67\x21\xce\xdf\x1c\xbc\xe4\x91\xee\x59\xac\xce\x26\x4f\xc4\x1a\x3d\x88\x77\xb4\x07\x27\xef\x70\xf3\x0d\x47\x12\xb8\x87\x0f\x1b\xa5\xc1\x38\x59\x9d\xc1\x24\xb7\x51\x20\xd4\xe4\xb5\xb9\xdc\x66\x67\x0b\x52\xa4\x9f\x93\xd4\xf3\xf9\x84\xe6\xce\x0f\xaf\x90\x65\x53\x31\x09\x1a\x59\xc1\xd6\x02\x8f\xbe\x07\xa3\xef\x05\x1a\x19\x77\x4e\x2d\xa4\x44\x77\x18\x1b\xa5\x2b\x66\x27\x50\xeb\x17\x3a\x42\x25\xa8\xda\x87\x37\xf8\xd1\xfb\x40\x87\xc5\xbb\x2d\xcf\xf6\x8d\xea\x63\xae\xa3\x87\x6c\x22\x10\x0c\x2f\x25\xc2\x1d\x45\x9c\xbb\x2e\xfc\xba\x16\x1c\x8b\xe8\x8d\x6a\xcd\x2b\xa6\xf7\xc0\x0b\xd2\xd3\x0d\xef\x15\xdb\x81\x0b\xb4\x8d\x19\xc3\x8d\x05\x2e\x83\x99\x99\xb8\x79\x4f\xd6\x1d\xd6\x71\xef\x5f\xa3\x89\x27\x80\x12\x71\x64\xda\xd8\xb5\xae\xb2\x59\x53\xb4\x5c\xfc\xf8\xb0\x5a\x04\x0e\xcc\x9f\xbd\xa2\xe5\xce\x1b\x2f\xd6\x42\xad\x17\x15\x33\x16\xf5\x22\x78\x70\xb3\x78\x97\xfd\x3f\xd9\x18\xd9\xcc\xdc\x19\x5a\x02\x27\x29\x68\xa5\x34\x5e\x25\xd0\x5f\x8d\x92\x2e\x3f\x18\x17\x69\x4c\x25\x82\x3b\xe4\x55\x2d\xd0\x4d\x42\xcd\x6c\x39\x03\x9e\x61\x06\x6f\xdc\x96\xc0\xb4\x66\x7b\x90\xca\xc7\x9a\xab\xe8\x72\xd9\xc8\x38\x4d\xb4\xac\xd7\x1a\xdc\x07\xe2\x8c\xf3\x9e\xd7\x2b\x7c\xad\xb9\xd2\xdc\xee\x27\xd0\x12\x97\x06\xa5\xa7\x18\xb8\x45\x1d\xd4\x3c\x84\x09\x8d\x82\x59\xbe\x43\xe0\x55\xad\xb4\x65\x32\xa9\x49\x31\x6e\x07\xf5\xcb\x55\x55\x33\xed\xd5\x5c\xd9\x12\xb5\xc9\xe0\x7b\xf5\x86\x1a\x64\x53\xad\x29\x8e\x30\x4d\x07\x95\xe4\x91\x34\x16\x09\xa8\x25\xdf\x96\xa8\x5b\x52\x33\x08\xa9\x26\xd8\x92\x59\x17\x8a\xd6\x08\xaa\xe2\xd6\x62\x41\x06\x21\x78\xc5\xe9\x4f\x97\xf4\x24\x60\x9a\x1c\x25\xd3\x5c\xb5\x29\xc3\x1a\x61\xcb\x77\x28\x49\x2a\x27\xf8\x7a\x41\x04\xa7\x42\x1c\xfb\xee\xdd\x80\x90\x02\x47\x7b\x56\xb8\xef\xe3\x12\x72\x6e\xc7\x4b\x67\xc0\x13\x1d\xf9\x9c\xc4\x99\xff\x36\x16\x4e\xd9\x01\xd7\x58\x9c\x73\x67\xde\xda\x7e\xcf\x27\x32\x9f\x9e\xe9\x28\xc7\x9e\x4f\x44\xc5\xd9\x74\x6f\x7c\xef\x7e\x72\x9e\xe2\x24\xaa\x4b\x89\xb9\xcb\x30\x26\x46\xf6\xe1\x20\x2b\x28\x77\xe9\xd7\x8d\x09\x2e\xe8\x05\xab\x9a\xf2\xdb\xab\x01\x38\xc3\x49\x3b\xd8\x11\x08\x1a\x37\xa8\x51\xe6\xfd\x47\x3b\xd1\xee\xdb\x9f\xda\xd5\xce\x19\x30\x27\x60\xf2\xcd\xde\xba\x35\xda\x46\x4b\xf2\x95\x8f\xcf\x9f\x82\xd1\xd9\xa4\xa7\x38\xa0\x76\x91\x95\xe9\x2d\xda\x36\xfa\x19\xf8\x59\xc2\x6a\x03\xc8\xf2\x12\xb4\x7a\x83\x92\xf9\x98\x20\xb7\x22\xba\xdb\x59\x02\x30\x77\x51\x3b\x00\xf4\xf1\xf2\xe5\x18\x3a\x7d\x97\x4a\xce\x5b\xfe\x15\xa0\x34\x34\x26\x69\x1f\xe4\x59\x0d\x39\xfc\x76\x07\x30\x1f\xae\x03\xc0\x08\x39\x83\x0f\x9f\x19\xc5\xad\x25\xc8\x7b\x90\xef\xe0\x67\x99\x00\x79\x7a\x38\xfb\xa6\x62\xc2\x39\x3b\x3e\xc2\x7f\x08\xe9\xac\xc5\xfc\x4b\xca\x65\x74\x30\xcf\xa4\x21\xec\x33\x69\xde\xf5\x31\xd2\x96\x1a\xb1\x8b\x2d\xc5\xc9\x14\x0d\x33\xca\xc8\x7f\xc9\x4e\x51\xce\x5e\x23\xd6\xd9\x6b\xbf\x9f\x85\x3e\x72\x36\xaa\xd1\xd3\xce\xee\xf0\xce\x58\xcd\xff\xa9\x55\x53\x4f\xe5\xc4\xec\xf5\xbe\xdd\xd3\x21\xb0\x9d\x7b\x77\xdb\x0b\x27\xe1\x0d\xfc\x18\xb1\xab\xb4\xfb\xf1\xc3\xa0\xc0\xdc\x2a\x3d\xc1\xea\x1e\x40\xb0\x35\x8a\x76\x8b\xcf\x46\xfc\xdc\x6f\x0d\xea\x3d\xa8\x1d\x6a\x32\x0e\xb4\x14\xd4\x5b\x13\x4a\x71\xe7\xc5\x67\x99\x8d\x70\xcb\x2b\x66\xf3\xf2\x7b\x82\x66\xc2\x2d\xda\xe6\xe5\x87\xcf\x74\x8d\x74\x31\xc4\x59\xfa\xc3\xd3\x7b\xba\xe9\x3d\xa4\x94\x19\xab\xda\xee\x4f\xe9\x74\x90\xc8\x55\x08\x11\x3c\xb4\xc9\xe0\xc1\xd5\xb1\x4e\x96\x26\xa0\x46\x00\x52\xb5\xfb\x7b\x57\x0e\xfb\xe7\x16\x52\xe7\x50\xa9\x75\x27\xac\x3f\xe3\x85\x67\x3d\xe5\xf2\x6a\x33\xed\x0c\x70\x08\x91\x95\xbf\x96\x7b\xf6\x1f\x66\x3a\x0c\x4e\xc2\x18\x54\xc5\x33\xb2\xcf\x34\xa6\x83\x2e\xe4\xd6\xe3\x44\x83\xf7\xe9\x74\x4d\x67\x5c\x9a\x50\x45\x99\x01\x83\x57\xdc\xfb\x82\x8b\xbb\x78\xa1\x66\xd6\xa5\x34\x2e\x00\xb8\x52\xcd\x08\x54\x24\x08\x0e\x40\xa8\xcc\x0c\xac\x1f\x17\xad\x1f\xaf\x98\x48\xa0\x13\x2c\x22\x0a\xc2\x85\xcb\xf3\x8a\x26\xdc\x19\x9c\x53\x9f\xc2\x1e\x70\x75\x34\xba\x1a\xba\xca\xc8\xc8\xda\x51\x7f\x11\x47\xe4\xe8\x45\xc7\x69\xc5\x70\xa8\xff\x78\x41\xdd\x99\x70\x23\x50\xd2\x94\xbc\x1e\x3d\x10\x5d\x56\xa3\x23\x89\x75\xb3\x4f\x4c\xf0\xa2\x45\xe1\xf5\x75\x25\x67\xf0\xa4\xec\x2a\x19\x84\x0f\xe3\xc3\x67\x6e\xac\xf7\x2d\xef\x15\x9a\x27\x65\xdd\xcc\x57\x63\x98\x27\xf3\x22\x76\xf9\x2d\x21\x51\xf7\x77\x49\xb5\x39\xaa\xbf\x99\x0c\x56\x9b\x71\x6e\x95\x78\x60\x3d\x37\xb0\x92\x94\x47\x78\xbe\xf8\x62\xa9\x47\xe4\x51\x54\x8d\x49\x05\xda\xc3\x58\xa3\xcb\x4c\x9c\x43\x25\x1a\xce\x70\x04\x76\x2a\x7d\xc4\xcd\x71\x31\xf4\x92\x43\xe8\x02\xaa\x17\xba\x93\xf8\x2f\xbe\x98\x2b\x42\x15\x7a\x84\xaf\x8d\x63\x9a\xab\x5e\x32\x8b\x5b\x9e\x43\x85\x7a\x8b\x74\x65\xcf\xcb\x31\x21\x8f\xfa\xb5\x40\xfb\x54\x5d\x18\x0b\xbb\x71\xa4\x2f\x2d\x87\x31\x27\xfb\x19\xfc\x1e\xc5\x32\xb0\x68\xe0\x7e\x72\x09\xcd\x9d\x20\x9d\x26\xb9\xfb\xca\x33\xc5\x6b\x4e\xe2\xea\x79\x3c\x0c\xb9\x82\x8b\x23\x15\xab\xc9\x72\x7e\xa7\x90\xe0\x94\xeb\x0f\xa8\x19\xd7\x14\xe7\x07\x10\x87\x2c\xbe\xbb\x8b\x4b\xa7\xa0\x5d\x04\x04\x9b\x1b\x20\x49\xed\x98\x38\x2d\x4e\x9f\x1c\x45\x91\x25\xa3\xf0\x21\x2e\x66\x35\x9d\xc8\x3d\x83\xb7\x52\x19\x1f\x79\x36\x1c\x85\x2b\xb9\xdf\xbe\xe2\xfe\x76\xc8\x72\x4e\x6d\xef\x76\x25\x6f\x7d\xe8\x3b\xb3\xa6\x36\x4e\x2a\x29\x86\xb4\xe6\xd6\xed\xba\xbd\x2e\x0d\x18\xd5\xa6\x91\x05\x31\xae\x5d\x7d\x5d\xf4\x59\xf9\x84\xa4\xf5\x65\x5f\xe3\x0f\x68\x59\x98\x5d\x63\xa8\x58\x15\x7c\xc7\x8b\x86\xc5\x84\x90\xe4\xce\x24\x3c\x7c\x5c\x25\x2f\x89\xa6\x56\xd2\x20\x84\x2c\x06\x8d\xf5\x15\x40\x4f\xa2\x39\x7f\x27\x71\xf5\x16\x57\xdb\x4a\x16\xbe\x3c\x6a\x12\x23\xb7\x86\x90\xc7\xa7\xac\x50\x37\xc9\xe0\xd9\xea\x26\xb7\x8d\xc6\x50\xb7\x22\xd9\xb4\x0f\x5f\x29\xb0\x1a\x6a\x5a\x62\x5c\x39\xcb\x17\xaa\xb8\x14\x5c\x62\xcb\x8d\x6b\xd3\xd7\xfe\xe7\xba\x01\xf6\x5f\xfa\x78\x37\xe8\x2a\xbb\xcf\x7a\x97\x3e\xe5\x0d\x79\x81\xbe\x47\xbe\x4b\x1e\xf6\x06\x60\xff\x89\x4f\x7e\xc7\x63\x82\x4f\x3d\x7d\x0e\x3c\x1e\xd7\x3f\x0e\x0e\xca\xb0\xf3\x6c\x38\xfd\xa9\x70\x00\xe2\xd0\x23\xe2\xd0\xc3\xe1\x00\xc8\xbf\xf8\x49\xf1\x78\x4c\xbc\xde\x27\x3d\xad\x77\x94\x2e\x92\x4d\x7c\xfc\xb8\x2b\x70\xc3\x1a\x61\x97\xed\x3b\x66\xe6\x6e\x26\x09\x22\xc7\x1c\x75\xb2\x5e\x7d\x75\x31\xd7\x1f\xe9\x1b\x16\x66\x5f\x71\xef\xeb\x74\x57\xbd\xb8\x5e\x1c\x71\xda\xd8\xd2\xc3\xa6\x6b\xa2\x4d\x27\xae\xf4\x40\xbc\x2a\xd2\x1c\xc5\x94\xbe\x78\x3e\x31\xca\x0c\x47\x98\xb1\xe8\xf2\x2d\x22\xcb\x37\x89\x2a\xdf\x2a\xa2\xfc\x25\xd1\x64\xc4\xc0\xd3\x51\xe4\x2b\xb4\x97\x24\xab\xe0\x97\x44\x8f\xf3\x18\x31\x50\x5c\x1f\x8f\x1c\xe9\xf8\x90\x00\xfb\x27\x47\x8d\x41\x79\x5d\xe1\x0d\xa3\x2c\x4e\x85\xdc\xdb\x66\xb2\x7a\x7f\x68\x47\x20\x59\x27\x04\x39\xe4\x07\x7c\x0b\x5e\x2a\x94\xa4\x0e\x96\x52\xc3\x23\x2a\xa3\x0e\xfa\xd2\x9a\xe6\x4c\xb8\xbe\x2c\xda\x1b\x7d\xe7\xe1\xfd\x04\x56\x16\x12\x6e\x43\x2a\x5d\x31\x21\xf6\x07\xd9\x3b\x63\x8e\x9d\x75\x7d\x8a\x30\x48\x7c\xaa\x05\xe0\xd8\x82\x9e\x42\x07\x80\xeb\xfd\x70\xdd\x7f\xfe\xed\xff\x84\x72\xf2\x3a\xae\x8b\xc7\x1d\xa1\x97\x7e\x57\x71\x71\x37\x53\xb7\xb3\x0b\x25\xd5\x14\x3a\xd7\xb8\xe5\xae\xb4\x72\xda\x53\xd7\x9e\x50\xa9\x65\xa0\x2b\x73\x32\x0c\x17\x9b\xb6\xbe\xc3\x84\x00\xa1\xde\x50\xe7\x64\x2c\x7d\xca\x3b\xc8\x24\xdf\x98\x38\xc6\xa5\x48\xf9\x33\xad\x0e\x85\x35\x94\x4d\x75\xdc\x9c\x50\xf0\x8d\x7b\xf3\xb3\x1e\x6a\xbf\x94\xd9\x8e\x71\xe1\x5a\x2c\x5c\x31\x32\x77\x9c\x19\x72\x4d\x83\xe4\xef\xd2\x91\x6d\x60\x5f\x2a\x0f\x9a\x7b\x33\x39\x9b\x25\x55\x3e\x9b\xec\x79\xe2\x9e\xfb\x83\x9f\xcd\x06\x2a\x7b\x5d\x43\x8f\xd7\x30\xcd\xfa\x85\x38\xf4\x75\x1e\xb0\x13\x6d\x6e\x83\x10\xfd\xf8\x92\x96\xb7\x64\xea\xed\x5b\xe1\xc6\x1a\xdf\xa6\x1c\xec\x9c\xc8\xa9\x2f\x28\x17\xb4\xc2\x0d\x17\xf3\x37\x53\x7a\x3d\x60\x6a\x31\x6e\xa8\x39\xae\xe7\x14\x17\xb5\xc8\x0d\x9e\xe3\xb4\x69\xe5\x92\x46\xb9\x41\xc0\x87\x26\xba\x0b\xdb\xe5\x86\xa1\x1e\xb7\xd2\xfd\x25\x4d\x73\x07\xc6\xa5\x1b\x6b\xfc\x98\x24\xfa\xe1\x36\x3a\x3f\xbe\xa4\x99\x6e\xf0\x14\xc3\x8d\x76\x17\x9c\x22\xdd\x74\xd7\x73\x82\x2f\x6f\xbd\xbb\x80\xb2\xe1\x36\xbc\x1e\xea\x2e\x69\xc6\x1b\x56\xd6\xb6\x51\xef\xe2\x96\xbc\x41\xb8\xc7\xed\x7a\x17\x35\xe6\x0d\xd3\x7b\xd2\xb4\xf7\xe5\xed\x79\x7e\x8c\x37\xe9\xf9\x31\xd6\xaa\xd7\x59\x35\x55\x96\x17\xb4\xed\x0d\xb2\x26\x7a\xc7\xbf\xb1\xa7\x19\x7b\x19\x1b\x68\xea\x8b\x0b\x7a\x5b\xfb\xe2\xc7\x64\x83\x5f\x5c\xd0\x5b\x4d\xea\x92\x3f\xfa\xfc\x91\xf2\x67\xee\xdd\xe7\xea\xa7\x8f\xb4\xeb\xba\xba\xa2\xd6\xcb\xa8\x8b\xaf\x8a\x7d\x18\xe6\x7d\xf9\x72\x0f\xe4\x93\xa9\x98\x2c\xc3\xee\x9e\x89\xba\x64\xf7\x87\xb9\xf0\xbf\x62\xfe\x7f\xb8\x3a\x9f\x43\xbe\x56\x2c\xc1\xea\xc6\x63\x33\x56\x69\xb6\xc5\x30\xf3\xbf\x00\x00\x00\xff\xff\x94\x23\x0b\x09\x23\x37\x00\x00")

func metaAppscodeCom_resourcedescriptorsYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaAppscodeCom_resourcedescriptorsYaml,
		"meta.appscode.com_resourcedescriptors.yaml",
	)
}

func metaAppscodeCom_resourcedescriptorsYaml() (*asset, error) {
	bytes, err := metaAppscodeCom_resourcedescriptorsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.appscode.com_resourcedescriptors.yaml", size: 14115, mode: os.FileMode(420), modTime: time.Unix(1574074937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.appscode.com_resourcedescriptors.yaml": metaAppscodeCom_resourcedescriptorsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.appscode.com_resourcedescriptors.yaml": {metaAppscodeCom_resourcedescriptorsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
