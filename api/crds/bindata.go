// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// meta.appscode.com_resourcedescriptors.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaAppscodeCom_resourcedescriptorsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3b\xcd\x72\xe3\x36\xd2\x77\x3f\x45\x97\xbf\x83\x2f\x12\xf5\x79\x72\xd9\xd2\xcd\xe5\x99\xda\xd2\x6e\xe2\x4c\xc5\xae\xb9\x6c\x72\x80\xc8\x96\x88\x98\x04\x18\x00\x94\x47\x9b\xca\xbb\x6f\x75\x03\xa4\x28\x89\x20\x29\x4d\xa6\x26\xc1\xc9\x02\x81\x46\xa3\xff\xd1\xdd\xbe\x99\xcf\xe7\x37\xa2\x92\x9f\xd0\x58\xa9\xd5\x12\x44\x25\xf1\xb3\x43\x45\xbf\x6c\xf2\xfa\x0f\x9b\x48\xbd\xd8\xdd\xaf\xd1\x89\xfb\x9b\x57\xa9\xb2\x25\x3c\xd6\xd6\xe9\xf2\x27\xb4\xba\x36\x29\xbe\xc7\x8d\x54\xd2\x49\xad\x6e\x4a\x74\x22\x13\x4e\x2c\x6f\x00\x52\x83\x82\x26\x5f\x64\x89\xd6\x89\xb2\x5a\x82\xaa\x8b\xe2\x06\x40\x89\x12\x97\x60\xc2\xf6\x0c\x6d\x6a\x64\xe5\xb4\xb1\x09\xed\x4f\x44\x55\xd9\x54\x67\x98\xa4\xba\xbc\xb1\x15\xa6\x04\x4d\x64\x19\x1f\x21\x8a\x8f\x46\x2a\x87\xe6\x51\x17\x75\xa9\x2c\x7d\x9b\xc3\xbf\x9e\x7f\x7c\xfa\x28\x5c\xbe\x84\xc4\x3a\xe1\x6a\x9b\x54\xb9\xb0\x78\x03\xd0\x9c\xf6\xcc\xd3\x3c\xe1\xf6\x15\x2e\xc1\x3a\x23\xd5\xf6\x74\x77\x73\x81\xe4\x0c\xfb\x0e\xac\x87\x2d\x76\x00\x65\xc2\xd1\xcf\xad\xd1\x75\xb5\x84\xf3\x1b\xf8\x5d\x8c\x28\x40\x2a\x1c\x6e\xb5\x91\xcd\xef\x39\xec\x44\x5d\xb8\xf0\x77\xa5\x0b\x99\xee\xc3\x8f\x06\x48\xf3\x93\x49\x07\xe0\x39\x70\xa0\x7d\x43\x3c\xfe\x58\x48\xeb\xfe\x1d\x59\xf0\xbd\xb4\xfe\x9c\xaa\xa8\x8d\x28\x7a\x19\xc0\xdf\x6d\xae\x8d\x7b\x3a\xe0\x3c\x07\x93\xf9\x0f\x52\x6d\xeb\x42\x98\xbe\xad\x37\x00\x36\xd5\x44\x0f\xde\x59\x89\x14\x69\x93\xad\xd7\xcd\xda\x00\xcd\xf3\x67\x09\xbf\xff\x71\x03\xb0\x13\x85\xcc\x98\xce\xfe\xa3\xae\x50\x3d\x7c\x5c\x7d\xfa\xee\x39\xcd\xb1\x14\x7e\x12\xa0\x32\xba\x42\xe3\x5a\xaa\xd1\xe8\x88\x6c\x3b\x07\xd0\x20\xc4\x92\x7c\x47\xa0\xfc\x1a\xc8\x48\x48\xd1\x82\xcb\x11\x76\x7e\x0e\x33\xb0\x7c\x0c\xe8\x0d\xb8\x5c\x5a\x30\x58\x19\xb4\xa8\x1c\xa3\xd4\x01\x0b\xb4\x44\x28\xd0\xeb\x5f\x31\x75\x09\x3c\xa3\x21\x20\x44\xaa\xba\xc8\x20\xd5\x6a\x87\xc6\x81\xc1\x54\x6f\x95\xfc\x6f\x0b\xd9\x82\xd3\x7c\x64\x21\x1c\x06\xf2\x37\x83\xa5\x58\x89\x82\x88\x50\xe3\x0c\x84\xca\xa0\x14\x7b\x30\x48\x67\x40\xad\x3a\xd0\x78\x89\x4d\xe0\x07\x6d\x10\xa4\xda\xe8\x25\xe4\xce\x55\x76\xb9\x58\x6c\xa5\x6b\x94\x34\xd5\x65\x59\x2b\xe9\xf6\x8b\x54\x2b\x67\xe4\xba\x26\x9e\x2e\x32\xdc\x61\xb1\xb0\x72\x3b\x17\x26\xcd\xa5\xc3\xd4\xd5\x06\x17\xa2\x92\x73\x46\x5c\x39\xd6\xf4\x32\xfb\xbf\x96\x55\x77\x1d\x4c\x4f\xd4\xc5\x0f\x96\xc2\x28\xdd\x49\x04\x41\x5a\x10\x61\x9b\xc7\xff\x40\x5e\x9a\x22\xaa\xfc\xf4\xe1\xf9\xa5\x95\x25\x66\xc1\x31\xcd\x99\xda\x87\x6d\xf6\x40\x78\x22\x94\x54\x1b\x34\x9e\x71\x1b\xa3\x4b\x86\x88\x2a\xab\xb4\x54\x8e\x7f\xa4\x85\x44\x75\x4c\x74\x5b\xaf\x4b\xe9\x88\xd3\xbf\xd5\x68\x1d\xf1\x27\x81\x47\xa1\x94\x76\xb0\x46\xa8\x2b\xd2\xe6\x2c\x81\x95\x82\x47\x51\x62\xf1\x28\x2c\x7e\x75\xb2\x13\x85\xed\x9c\x48\x3a\x4e\xf8\xae\x85\x3d\x5e\xe8\xa9\xd5\x4e\x37\x86\xb3\x19\x7d\x3a\xc4\x16\xe9\x60\x47\x8f\xa4\xd3\x61\x79\x36\x79\xc2\xe7\xc6\xc6\x78\x53\x7c\x70\x03\x7c\xb6\xdc\x48\x24\x09\xf0\xf0\x61\xa3\x0d\x58\x66\xde\x19\x4c\x32\x2c\x19\x42\x45\x76\x5d\xaa\x6d\x72\xb6\x20\x86\xfa\x39\x4a\x3d\x9f\x4f\x70\xee\xfc\xf0\x12\x9a\xd7\xa5\x50\x60\x50\x64\x62\x5d\xe0\xd1\xf7\x60\x16\x7a\x81\x36\x84\x3b\xc7\x16\x62\xac\x3b\x8c\x8d\x36\xa5\x70\x13\xb0\xf5\x0b\x19\x51\x05\xba\xf2\x0e\x10\x7e\xf4\x56\x92\x4f\xf1\x86\xcd\x93\x7d\xa3\xfb\x88\xcb\xf8\x90\x92\x04\x84\xe1\x25\x47\xb8\x23\x9f\x74\xd7\x85\x5f\x55\x85\xc4\xac\xb1\x57\x95\x91\xa5\x30\x7b\x90\x19\xc9\xe9\x46\xf6\xb2\xed\x40\x05\xda\x26\xac\x95\xd6\x81\x54\x41\xef\x6c\xb3\x79\x4f\xea\x1e\xd6\x49\x6f\x81\x1b\x9d\x8f\x00\x25\xe4\x48\xd7\xb1\xab\x6e\x79\xbd\x26\x7f\xba\xf8\xf1\x61\xb5\x08\x14\x98\x3f\x7b\x41\x4b\xd9\x5e\x2f\xd6\x85\x5e\x2f\x4a\x61\x1d\x9a\x45\xb0\xf1\x76\xf1\x2e\xf9\x7f\xd2\x31\xd2\x99\x39\x2b\x5a\xe4\x4c\x12\xd0\x52\x1b\xbc\x8a\xa1\xbf\x5a\xad\x38\x82\x18\x67\x69\x13\x6c\x04\xfb\x28\xcb\xaa\x40\x9e\x84\x4a\xb8\x7c\x06\x32\xc1\x04\xde\xa4\xcb\x41\x18\x23\xf6\xa0\xb4\xf7\x46\x57\xe1\xc5\xf1\xca\x38\x4e\xb4\xac\x57\x1b\xf8\x03\x51\x86\xcd\xe9\xf5\x02\x5f\x19\xa9\x8d\x74\xfb\x09\xb8\x34\x4b\x83\xd0\x93\x97\xdc\xa2\x09\x62\x1e\xfc\x86\xc1\x42\x38\xb9\x43\x90\x65\xa5\x8d\x13\x2a\x2a\x49\x8d\x67\x0f\xe2\x97\xea\xb2\x12\xc6\x8b\xb9\x76\x39\x1a\x9b\xc0\xf7\xfa\x0d\x0d\xa8\xba\x5c\x93\x63\x11\x86\x2e\xaa\xc8\x22\x19\xcc\x22\x50\x73\xb9\xcd\xd1\xb4\xa8\x26\x10\x82\x51\x70\xb9\x70\xec\x9b\xd6\x08\xba\x94\xce\x61\x46\x0a\x51\xc8\x52\xd2\x9f\x1c\x16\x45\x60\xda\x14\x95\x30\x52\xb7\x41\xc5\x1a\x61\x2b\x77\xa8\x88\x2b\x27\xe7\xf5\x82\x08\x46\x85\x28\xf6\xdd\xbb\x01\x26\x05\x8a\xf6\xac\xe0\xef\xe3\x1c\x62\xb3\xe3\xb9\x33\x60\x89\x8e\x6c\x4e\xe4\xce\x7f\x1b\x0d\xa7\x70\x41\x1a\xcc\xce\xa9\x33\x6f\x75\xbf\xe7\x13\xa9\x4f\xcf\x74\xc3\xc7\x9e\x4f\x84\xc5\xd9\x74\xaf\x7f\xef\x7e\x62\x4b\x71\xe2\xd5\x95\xc2\x94\x23\x8c\x89\x9e\x7d\xd8\xc9\x16\x14\xcc\xf4\xcb\xc6\x04\x13\xf4\x82\x65\x45\x11\xf0\xd5\x00\x58\x71\xe2\x06\x76\x04\x82\xc1\x0d\x1a\x54\x69\xff\xd5\x4e\xa4\xfb\xf6\xa7\x76\x35\x1b\x03\xc1\x0c\x26\xdb\xec\xb5\xdb\xa0\xab\x8d\x22\x5b\xf9\xf8\xfc\x29\x28\x9d\x8b\x5a\x8a\xc3\xd1\xec\x59\x85\xd9\xa2\x6b\xbd\x9f\x85\x9f\x15\xac\x36\x80\x22\xcd\xc1\xe8\x37\xc8\x85\xf7\x09\x6a\x5b\x34\xe6\x76\x16\x01\x2c\xd9\x6b\x07\x80\xde\x5f\xbe\x1c\x43\xa7\xef\x4a\xab\x79\x4b\xbf\x0c\xb4\x81\xda\x46\xf5\x83\x2c\xab\x25\x83\xdf\xee\x00\xe1\xdd\x75\x00\xd8\x40\x4e\xe0\xc3\x67\x41\x7e\x6b\x09\xea\x1e\xd4\x3b\xf8\x59\x45\x40\x9e\x5e\xce\xbd\xe9\x26\xe0\x9c\x1d\x5f\xe1\x3f\x74\xe8\xac\x3d\xf9\x97\x98\xc9\xe8\x9c\x3c\x53\x96\x4e\x9f\x29\xfb\xae\x8f\x90\x2e\x37\x88\xdd\xd3\x62\x94\x8c\xe1\x30\xa3\x88\xfc\x97\xe4\xf4\xc8\xd9\x6b\x73\xea\xec\xb5\xdf\xce\x42\x1f\x3a\x1b\x5d\x9b\x69\x77\xe7\x73\x67\xa2\x92\xff\x34\xba\xae\xa6\x52\x62\xf6\x7a\xdf\xee\xe9\x20\xd8\xce\xbd\xbb\xed\x85\x13\xb1\x06\x7e\x8c\xe8\x55\xdc\xfc\xf8\x61\xb1\xc0\xd4\x69\x33\x41\xeb\x1e\xa0\x10\x6b\x2c\xda\x2d\x3e\x1a\xf1\x73\xbf\xd5\x68\xf6\xa0\x77\x68\x48\x39\xd0\x91\x53\x6f\x55\x28\x46\x9d\x17\x1f\x65\xd6\x05\x2f\x2f\x85\x4b\xf3\xef\x09\x9a\x0d\xef\x6c\x97\xe6\x1f\x3e\xd3\xbb\x92\x7d\x08\x6b\xfa\xc3\xd3\x7b\x7a\xfa\x3d\xc4\x84\x19\xcb\xca\xed\x4f\xf1\x64\x48\x64\x2a\x8a\x22\x58\x68\x9b\xc0\x03\x67\xba\x4e\x96\x46\xa0\x36\x00\x94\x6e\xf7\xf7\xae\x1c\xb6\xcf\x2d\xa4\xce\xa5\x62\xeb\x4e\x48\x7f\x46\x0b\x4f\x7a\x8a\xe5\xf5\x66\xda\x1d\xe0\xe0\x22\x4b\xff\x4e\xf7\xe4\x3f\xcc\x74\x08\x1c\x85\x31\x28\x8a\x67\x68\x9f\x49\x4c\xe7\xb8\x10\x5b\x8f\x23\x0d\xde\xa6\xd3\xbb\x5d\x48\x65\x43\x9e\x65\x06\x02\x5e\x71\xef\x53\x32\xfc\xf0\x42\x23\x1c\x87\x34\xec\x00\x38\x99\x33\x02\x15\x09\x02\x03\x08\xb9\x9b\x81\xf5\xe3\xac\xf5\xe3\x15\x23\x01\x74\x84\x44\x84\x41\x78\x70\x79\x5a\xd1\x04\xdf\x81\x8d\xfa\x14\xf2\x00\x67\xda\xe8\x69\xc8\xa9\x92\x91\xb5\xa3\xf6\xa2\x19\x0d\x45\x2f\xba\x4e\xcb\x86\x43\x42\xc8\x33\xea\xce\x86\x17\x81\x56\x36\x97\xd5\xe8\x85\xe8\xb1\xda\x18\x92\x26\xb3\xf6\x49\x14\x32\x6b\x8f\xf0\xf2\xba\x52\x33\x78\xd2\x6e\x15\x75\xc2\x87\xf1\xe1\xb3\xb4\xce\xdb\x96\xf7\x1a\xed\x93\x76\x3c\xf3\xa7\x11\xcc\xa3\x79\x11\xb9\xfc\x96\x10\xa8\xfb\xb7\xa4\xde\x1c\x25\xe4\x6c\x02\xab\xcd\x38\xb5\x72\x3c\x90\x5e\x5a\x58\x29\x8a\x23\x3c\x5d\x7c\x3a\xd5\x1f\xe4\x8f\x28\x6b\x1b\x73\xb4\x87\xb1\x46\x8e\x4c\xd8\xa0\x12\x0e\x67\x67\x04\x72\x6a\x73\x44\xcd\x71\x36\xf4\xa2\x43\xc7\x85\xa3\x5e\xe8\x4d\xe2\xbf\xf8\x74\x6f\x11\xf2\xd4\x23\x74\xad\x99\x68\x9c\xce\x14\x0e\xb7\x32\x85\x12\xcd\x16\xe9\xc9\x9e\xe6\x63\x4c\x1e\xb5\x6b\x01\xf7\xa9\xb2\x30\xe6\x76\x9b\x11\x7f\xb4\x1c\xc6\x9c\xf4\x67\xf0\x7b\xc3\x96\x81\x45\x03\xef\x93\x4b\x70\xee\x38\xe9\x38\xca\xdd\x3a\xd0\x14\xab\x39\x89\xaa\xe7\xfe\x30\xc4\x0a\xec\x47\x4a\x51\x91\xe6\xfc\x4e\x2e\x81\x85\xeb\x0f\xa8\x84\x34\xe4\xe7\x07\x0e\x0e\x51\x7c\x77\x97\x54\x2c\xa0\xdd\x03\x08\xb6\xb4\x40\x9c\xda\x89\xe2\x34\x5b\x7d\x72\x15\x4d\x9a\x8c\x85\x77\x71\x4d\x54\xd3\xf1\xdc\x33\x78\xcb\xb5\xf5\x9e\x67\x23\xb1\xe0\x1c\xfc\xed\x2b\xee\x6f\x87\x34\xe7\x54\xf7\x6e\x57\xea\xd6\xbb\xbe\x33\x6d\x6a\xfd\xa4\x56\xc5\x90\xd4\xdc\xf2\xae\xdb\xeb\xc2\x80\x51\x69\x1a\x59\xd0\xf8\xb5\xab\x9f\x8b\x3e\x2a\x9f\x10\xb4\xbe\xec\x2b\xfc\x01\x9d\x08\xb3\x6b\x0c\x19\xab\x4c\xee\x64\x56\x8b\x26\x20\x24\xbe\x0b\x05\x0f\x1f\x57\xd1\x47\xa2\xad\xb4\xb2\x08\x21\x8a\x41\xeb\x7c\x06\xd0\xa3\x68\xcf\x0b\x27\x9c\x6f\xe1\xdc\x56\x34\xf1\xe5\x8f\x26\x36\x4a\x67\xe9\xf0\xa6\xd8\x15\xf2\x26\x09\x3c\x3b\x53\x73\x4d\x22\xe4\xad\x88\x37\x6d\x69\x2c\x06\xd6\x40\x45\x4b\x2c\xa7\xb3\x7c\xa2\x4a\xaa\x42\x2a\x6c\xa9\x71\x6d\xf8\xda\x5f\xd0\x1b\x20\xff\xa5\xe5\xbd\x41\x53\xd9\x2d\xfc\x5d\x5a\xec\x1b\xb2\x02\x7d\x65\xc0\x4b\x4a\x7f\x03\xb0\xbf\x65\x51\xf0\x78\x4c\x30\xb2\xa7\x05\xc3\xe3\x71\x7d\xf9\x70\x90\xa9\x9d\xc2\xe2\xf4\x62\xe2\x00\xc4\xa1\x32\xe3\x50\x69\x71\x00\xe4\x5f\xad\xe8\x78\x3c\x26\x26\x00\xa2\xb6\xd8\x9b\x52\xf6\x75\x13\xcb\x23\x77\x19\x6e\x44\x5d\xb8\x65\x5b\xe9\x4c\xf8\xed\x12\x41\x72\xcc\x94\x47\x33\xda\x57\xa7\x7b\xfd\x95\xbe\x62\xea\xf6\x15\xf7\x3e\x93\x77\x55\x4d\xf6\x62\x9f\xd4\x7a\x9f\x1e\x32\x5d\xe3\x8f\x3a\x9e\xa7\x07\xe2\x55\xbe\xe8\xc8\xeb\xf4\x79\xfc\x89\x7e\x68\xd8\x07\x8d\xf9\x9f\xaf\xe1\x7b\xbe\x8a\xdf\xf9\x5a\x3e\xe7\xaf\xe1\x6f\x46\x34\x3e\xee\x67\xfe\x84\x16\x95\x68\xe2\xfc\x12\xff\x72\xee\x45\x06\xf2\xf1\xe3\xbe\x25\xee\x41\x22\x60\xbf\xb5\x5f\x19\x64\xe0\x15\xf6\xb2\x61\xce\x29\xd7\x7b\x5b\x55\x56\xef\x0f\x2d\x0d\xc4\xfc\x08\x67\x87\x2c\x85\x6f\xf4\x8b\x39\x9b\xd8\xc5\x62\x72\x79\x84\x65\x23\x94\x3e\x3d\x67\xa4\x28\xb8\xfb\x8b\xf6\x36\xd6\xf5\x50\x83\x81\x95\x83\x88\x61\x51\xda\x94\xa2\x28\xf6\x07\x61\x60\x75\x6f\xfa\xf7\xfa\x24\x63\x10\xf9\x58\x1b\xc1\xb1\x4a\x3d\x85\x2e\x02\xee\x1f\xe1\x1e\x43\xdf\x3f\x70\x82\x39\xd9\x25\xee\x04\xe2\x2b\xf4\xe2\xcf\x59\x1b\x7e\xdd\xf2\xce\x2e\x94\x58\xeb\xe9\xdc\xe0\x56\x72\x7a\xe6\xb4\x73\xaf\xbd\xa1\xd6\xcb\x80\x57\xc2\x3c\x0c\x8f\xa3\x36\x47\x24\x8a\x02\x0a\xfd\x86\x26\x25\xed\xe9\x13\xde\x41\x22\xf9\xf6\xc7\x31\x2a\x35\x98\x3f\xd3\xea\x90\x9c\x43\x55\x97\xc7\x0d\x0e\x99\xdc\x70\xdd\xd0\x79\xa8\xfd\x5c\x16\x3b\x21\x0b\x6e\xd3\xe0\x84\x66\xca\x94\x19\xb2\x55\x83\xe8\xef\xe2\xbe\x6f\x60\x5f\x2c\x52\x9a\x7b\x35\x39\x9b\x25\x51\x3e\x9b\xec\x29\x93\xcf\xfd\xc5\xcf\x66\x03\x96\xbd\xa6\xa1\xc7\x6a\xd8\x7a\xfd\x42\x14\xfa\x73\x8a\xe0\x91\x56\xb9\x41\x88\x7e\x7c\x49\xdb\x5c\x34\x38\xf7\xed\x74\x63\xcd\x73\x53\x2e\x76\x8e\xe4\xd4\x2a\xcc\x05\xed\x74\xc3\x05\x81\xcd\x94\x7e\x11\x98\x9a\xd0\x1b\x6a\xb0\xeb\xb9\xc5\x45\x6d\x76\x83\xf7\x38\x6d\x7c\xb9\xa4\xd9\x6e\x10\xf0\xa1\x11\xef\xc2\x96\xbb\x61\xa8\xc7\xed\x78\xdf\xa4\xf1\xee\x40\xb8\x78\x73\x8e\x1f\x93\x58\x3f\xdc\x8a\xe7\xc7\x97\x34\xe4\x0d\xde\x62\xb8\x59\xef\x82\x5b\xc4\x1b\xf7\x7a\x6e\xf0\xe5\xed\x7b\x17\x60\x36\xdc\xca\xd7\x83\xdd\x25\x0d\x7d\xc3\xc2\xda\x36\xfb\x5d\xdc\xd6\x37\x08\xf7\xb8\xe5\xef\xa2\xe6\xbe\x61\x7c\x4f\x1a\xff\xbe\xbc\xc5\xcf\x8f\xf1\x46\x3f\x3f\xc6\xda\xfd\x3a\xab\xa6\xf2\xf2\x82\xd6\xbf\x41\xd2\x34\xd6\xf1\x6f\x6c\x69\xc6\xaa\x6b\x03\x8d\x81\xcd\x82\xde\xf6\xc0\xe6\x63\xb4\x49\xb0\x59\xd0\x9b\x6f\xea\xa2\x3f\x5a\x42\x89\xd9\x33\xae\x1d\x5d\x5d\x3e\x89\x9b\xae\xab\x73\x6e\xbd\x84\xba\xf8\xa9\xd8\x77\xc2\xbc\x2f\x5e\xee\x81\x7c\x32\xd5\x04\xcb\xb0\xbb\x17\x45\x95\x8b\xfb\xc3\x5c\xf8\x8f\x34\xff\x9f\x62\x9d\xcf\x21\x5e\xcb\x96\xe0\x4c\xed\x4f\xb3\x4e\x1b\xb1\xc5\x30\xf3\xbf\x00\x00\x00\xff\xff\x34\xa8\xec\x9b\x89\x37\x00\x00")

func metaAppscodeCom_resourcedescriptorsYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaAppscodeCom_resourcedescriptorsYaml,
		"meta.appscode.com_resourcedescriptors.yaml",
	)
}

func metaAppscodeCom_resourcedescriptorsYaml() (*asset, error) {
	bytes, err := metaAppscodeCom_resourcedescriptorsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.appscode.com_resourcedescriptors.yaml", size: 14217, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.appscode.com_resourcedescriptors.yaml": metaAppscodeCom_resourcedescriptorsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.appscode.com_resourcedescriptors.yaml": {metaAppscodeCom_resourcedescriptorsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
