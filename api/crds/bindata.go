// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// meta.appscode.com_resourcedescriptors.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaAppscodeCom_resourcedescriptorsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5c\x5f\x73\xdb\x36\x12\x7f\xf7\xa7\xd8\xf1\x3d\xa4\x9d\x91\xe8\x8b\x3b\x9d\xbb\xd3\x9b\xc7\x49\x6f\x7c\x97\xa6\x99\xd8\xcd\xcb\xb5\x0f\x10\xb9\x12\x51\x93\x00\x0b\x80\xb2\xd5\x4e\xbf\xfb\xcd\x2e\x08\x8a\x92\x08\x92\x52\x92\x49\xcb\x27\x0b\x04\x17\x8b\xfd\xfb\x03\x16\xf0\xc5\x7c\x3e\xbf\x10\x95\xfc\x80\xc6\x4a\xad\x16\x20\x2a\x89\xcf\x0e\x15\xfd\xb2\xc9\xe3\x3f\x6d\x22\xf5\xd5\xe6\xe5\x12\x9d\x78\x79\xf1\x28\x55\xb6\x80\xdb\xda\x3a\x5d\xbe\x47\xab\x6b\x93\xe2\x2b\x5c\x49\x25\x9d\xd4\xea\xa2\x44\x27\x32\xe1\xc4\xe2\x02\x20\x35\x28\xa8\xf1\x41\x96\x68\x9d\x28\xab\x05\xa8\xba\x28\x2e\x00\x94\x28\x71\x01\xa6\xf9\x3c\x43\x9b\x1a\x59\x39\x6d\x6c\x42\xdf\x27\xa2\xaa\x6c\xaa\x33\x4c\x52\x5d\x5e\xd8\x0a\x53\xa2\x26\xb2\x8c\x87\x10\xc5\x3b\x23\x95\x43\x73\xab\x8b\xba\x54\x96\xde\xcd\xe1\x3f\xf7\x3f\xbc\x7d\x27\x5c\xbe\x80\xc4\x3a\xe1\x6a\x9b\x54\xb9\xb0\x78\x01\x10\x46\xbb\xe7\x66\x6e\x70\xdb\x0a\x17\x60\x9d\x91\x6a\x7d\xf8\x75\x98\x40\x72\xc4\x7d\x87\xd6\xcd\x1a\x3b\x84\x32\xe1\xe8\xe7\xda\xe8\xba\x5a\xc0\xf1\x0c\xfc\x57\xcc\x28\x40\x2a\x1c\xae\xb5\x91\xe1\xf7\x1c\x36\xa2\x2e\x5c\xf3\x77\xa5\x0b\x99\x6e\x9b\x1f\x81\x48\xf8\xc9\xa2\x03\xf0\x1a\xd8\xc9\x3e\x08\x8f\x5f\x16\xd2\xba\xff\x46\x3a\xbc\x91\xd6\x8f\x53\x15\xb5\x11\x45\xaf\x02\xf8\xbd\xcd\xb5\x71\x6f\x77\x3c\xcf\xc1\x64\xfe\x85\x54\xeb\xba\x10\xa6\xef\xd3\x0b\x80\xca\xa0\x45\xb3\xc1\x1f\xd5\xa3\xd2\x4f\xea\x3b\x89\x45\x66\x17\xb0\x12\x05\x6b\xc2\xa6\x9a\xc4\xc5\x84\x2b\x91\x22\xd1\xb4\xf5\x32\x90\x6a\x06\xf3\xea\x5b\xc0\xef\x7f\x5c\x00\x6c\x44\x21\x33\x56\x83\x7f\xa9\x2b\x54\x37\xef\xee\x3e\x7c\x73\x9f\xe6\x58\x0a\xdf\x48\x03\xeb\x0a\x8d\x6b\x85\x4a\x4f\xc7\xa2\xdb\x36\x80\xc0\x2f\x1b\xfa\x0b\x22\xe5\xfb\x40\x46\x36\x8c\x16\x5c\x8e\xb0\xf1\x6d\x98\x81\xe5\x61\x40\xaf\xc0\xe5\xd2\x82\x41\x9e\xa2\x72\xcc\x52\x87\x2c\x50\x17\xa1\x40\x2f\x7f\xc1\xd4\x25\x70\x4f\x62\x30\x96\x24\x59\x17\x19\xa4\x5a\x6d\xd0\x38\x30\x98\xea\xb5\x92\xbf\xb5\x94\x2d\x38\xcd\x43\x16\xc2\x61\xa3\x9d\xf0\xb0\x91\x2b\x51\x90\x10\x6a\x9c\x81\x50\x19\x94\x62\x0b\x06\x69\x0c\xa8\x55\x87\x1a\x77\xb1\x09\x7c\xaf\x0d\x82\x54\x2b\xbd\x80\xdc\xb9\xca\x2e\xae\xae\xd6\xd2\x05\x1f\x4e\x75\x59\xd6\x4a\xba\xed\x55\xaa\x95\x33\x72\x59\x93\xca\xaf\x32\xdc\x60\x71\x65\xe5\x7a\x2e\x4c\x9a\x4b\x87\xa9\xab\x0d\x5e\x89\x4a\xce\x99\x71\xe5\x38\x10\x94\xd9\xdf\x5a\x55\xbd\xe8\x70\x7a\xe0\x4d\xfe\x61\x23\x8d\xca\x9d\x2c\x14\xa4\x05\xd1\x7c\xe6\xf9\xdf\x89\x97\x9a\x48\x2a\xef\x5f\xdf\x3f\xb4\xa6\xc6\x2a\xd8\x97\x39\x4b\x7b\xf7\x99\xdd\x09\x9e\x04\x25\xd5\x0a\x8d\x57\xdc\xca\xe8\x92\x29\xa2\xca\x2a\x2d\x95\xe3\x1f\x69\x21\x51\xed\x0b\xdd\xd6\xcb\x52\x3a\xd2\xf4\xaf\x35\x5a\x47\xfa\x49\xe0\x56\x28\xa5\x1d\x2c\x11\xea\x8a\x9c\x3d\x4b\xe0\x4e\xc1\xad\x28\xb1\xb8\x15\x16\x3f\xbb\xd8\x49\xc2\x76\x4e\x22\x1d\x17\x7c\x37\x00\xef\x77\xf4\xd2\x6a\x9b\x43\x5c\x0d\x4f\x9f\x0f\x71\xc0\xda\x85\xd9\x3d\xeb\x74\x58\x1e\x35\x1e\xe8\x39\x84\x20\x1f\xa9\x77\x59\x82\xc7\x96\x2b\x89\x64\x01\x9e\x3e\xac\xb4\x01\x0e\x1e\xe6\x88\x26\xc5\x9d\x0c\xa1\xa2\xb0\x2f\xd5\x3a\x39\xea\x10\x63\xfd\x98\xa5\x9e\xd7\x07\x3c\x77\x7e\x78\x0b\xcd\xeb\x52\x28\x30\x28\x32\xb1\x2c\x70\xef\x7d\x13\x16\x7a\x89\x06\xc1\x1d\x73\x0b\x31\xd5\xed\x9e\x95\x36\xa5\x70\x13\xb8\xf5\x1d\x99\x51\x05\xba\xf2\xf9\x11\x7e\xf0\x51\x92\x47\xf1\x81\xcd\x8b\x7d\xa5\xfb\x84\xcb\xfc\x90\x93\x34\x0c\xc3\x43\x8e\xf0\x82\x52\xd6\x8b\x2e\xfd\xaa\x2a\x24\x66\x21\x5e\x55\x46\x96\xc2\x6c\x41\x66\x64\xa7\x2b\xd9\xab\xb6\x9d\x14\xe8\x33\x61\xad\xb4\x0e\xa4\x6a\xfc\xce\x86\x8f\xb7\xe4\xee\x4d\x3f\xe9\x23\x70\xf0\xf9\x08\x51\x62\x8e\x7c\x1d\xbb\xee\x96\xd7\x4b\x4a\xb7\x57\x3f\xdc\xdc\x5d\x35\x12\x98\xdf\x7b\x43\x4b\x39\x5e\x5f\x2d\x0b\xbd\xbc\x2a\x85\x75\x68\xae\x9a\x18\x6f\xaf\xae\x93\xbf\x93\x8f\x91\xcf\xcc\xd9\xd1\x22\x63\x92\x81\x96\xda\xe0\x59\x0a\xfd\xc5\x6a\xc5\x00\x63\x5c\xa5\x01\x8b\x34\xf1\x51\x96\x55\x81\xdc\x08\x95\x70\xf9\x0c\x64\x82\x09\x3c\x49\x97\x83\x30\x46\x6c\x41\x69\x9f\x8d\xce\xe2\x8b\xe1\xcc\x38\x4f\xd4\xad\xd7\x1b\xf8\x05\x49\x86\xc3\xe9\xf9\x06\x5f\x19\xa9\x8d\x74\xdb\x09\xbc\x84\xae\x8d\xd1\x53\x96\x5c\xa3\x69\xcc\xbc\xc9\x1b\x06\x0b\xe1\xe4\x06\x41\x96\x95\x36\x4e\xa8\xa8\x25\x85\xcc\xde\x98\x5f\xaa\xcb\x4a\x18\x6f\xe6\xda\xe5\x68\x6c\x02\x6f\xf4\x13\x1a\x50\x75\xb9\xa4\xc4\x22\x0c\x4d\x54\x51\x44\x32\x98\x45\xa8\xe6\x72\x9d\xa3\x69\x59\x4d\xa0\xc1\xaa\xe0\x72\xe1\x38\x37\x2d\x11\x74\x29\x9d\xc3\x8c\x1c\xa2\x90\xa5\xa4\x3f\x19\x16\x45\x68\xda\x14\x95\x30\x52\xb7\xa0\x62\x89\xb0\x96\x1b\x54\xa4\x95\x83\xf1\x7a\x49\x34\x41\x85\x24\xf6\xcd\xf5\x80\x92\x1a\x89\xf6\xf4\xe0\xf7\xe3\x1a\xe2\xb0\xe3\xb5\x33\x10\x89\xf6\x62\x4e\x64\xce\x7f\x19\x0f\x27\xb8\x20\x0d\x66\xc7\xd2\x99\xb7\xbe\xdf\xf3\x8a\xdc\xa7\xa7\x39\xe8\xb1\xe7\x15\x71\x71\xd4\xdc\x9b\xdf\xbb\xaf\x38\x52\x1c\x64\x75\xa5\x30\x65\x84\x31\x31\xb3\x0f\x27\xd9\x82\xc0\x4c\xbf\x6d\x4c\x08\x41\x0f\x58\x56\x84\x80\xcf\x26\xc0\x8e\x13\x0f\xb0\x23\x14\x0c\xae\xd0\xa0\x4a\xfb\xa7\x76\x60\xdd\x97\xef\xdb\xde\x1c\x0c\x04\x2b\x98\x62\xb3\xf7\x6e\x83\xae\x36\x8a\x62\xe5\xed\xfd\x87\xc6\xe9\x5c\x34\x52\xec\x86\xe6\xcc\x2a\xcc\x1a\x5d\x9b\xfd\x2c\xfc\xa4\xe0\x6e\x05\x28\xd2\x1c\x8c\x7e\x82\x5c\xf8\x9c\xa0\xd6\x45\x08\xb7\xb3\x08\x61\xc9\x59\xbb\x21\xe8\xf3\xe5\xc3\x3e\x75\x7a\xaf\xb4\x9a\xb7\xf2\xcb\x40\x1b\xa8\x6d\xd4\x3f\x28\xb2\x5a\x0a\xf8\xed\x17\x20\x7c\xba\x6e\x08\x06\xca\x09\xbc\x7e\x16\x94\xb7\x16\xa0\x5e\x82\xba\x86\x9f\x54\x84\xe4\xe1\xe4\xdc\x93\x0e\x80\x73\xb6\x3f\x85\xff\xd1\xa0\xb3\x76\xe4\x9f\x63\x21\xa3\x33\xf2\x4c\x59\x1a\x7d\xa6\xec\x75\x9f\x20\x5d\x6e\x10\xbb\xa3\xc5\x24\x19\xe3\x61\x46\x88\xfc\xe7\xe4\x70\xc8\xd9\x63\x18\x75\xf6\xd8\x1f\x67\xa1\x8f\x9d\x95\xae\xcd\xb4\xb9\xf3\xb8\x33\x51\xc9\x7f\x1b\x5d\x57\x53\x25\x31\x7b\x7c\xd9\x7e\xd3\x61\xb0\x6d\xbb\xbe\xec\xa5\x13\x89\x06\xfe\x19\xf1\xab\x78\xf8\xf1\x8f\xc5\x02\x53\xa7\xcd\x04\xaf\xbb\x81\x42\x2c\xb1\x68\x3f\xf1\x68\xc4\xb7\xfd\x5a\xa3\xd9\x82\xde\xa0\x21\xe7\x40\x47\x49\xbd\x75\xa1\x98\x74\x1e\x3c\xca\xac\x0b\xee\x5e\x0a\x97\xe6\x6f\x88\x9a\x6d\xd6\xd9\x2e\xcd\x5f\x3f\xd3\xba\x92\x73\x08\x7b\xfa\xcd\xdb\x57\xb4\xf4\xbb\x89\x19\x33\x96\x95\xdb\x1e\xf2\xc9\x94\x28\x54\x14\x45\x13\xa1\x6d\x02\x37\xbc\x11\x76\xd0\x35\x42\x35\x10\x50\xba\xfd\xbe\xb7\xe7\x70\x7c\x6e\x29\x75\x26\x15\xeb\x77\x20\xfa\x23\x59\x78\xd1\x13\x96\xd7\xab\x69\x73\x80\x5d\x8a\x2c\xfd\x3a\xdd\x8b\x7f\xd7\xd2\x11\x70\x94\xc6\xa0\x29\x1e\xb1\x7d\x64\x31\x9d\xe1\x1a\x6c\x3d\xce\x34\xf8\x98\x4e\xeb\x76\x21\x95\x6d\xf6\x59\x66\x20\xe0\x11\xb7\x7e\x4b\x86\x17\x5e\x68\x84\x63\x48\xc3\x09\x80\x37\x73\x46\xa8\x22\x51\x60\x02\xcd\xde\xcd\x40\xff\x71\xd5\xfa\xe7\x11\x23\x00\x3a\x22\x22\xe2\xa0\x59\x70\x79\x59\x51\x03\xcf\x81\x83\xfa\x14\xf1\x00\xef\xb4\xd1\xd2\x90\xb7\x4a\x46\xfa\x8e\xc6\x8b\xf0\x04\x89\x9e\x34\x9d\x56\x0d\xbb\x0d\x21\xaf\xa8\x17\xb6\x59\x11\x68\x65\x73\x59\x8d\x4e\x88\x16\xab\x21\x90\x84\x9d\xb5\x0f\xa2\x90\x59\x3b\x84\xb7\xd7\x3b\x35\x83\xb7\xda\xdd\x45\x93\xf0\xee\x79\xfd\x2c\xad\xf3\xb1\xe5\x95\x46\xfb\x56\x3b\x6e\xf9\x64\x02\xf3\x6c\x9e\x24\x2e\xff\x49\x03\xd4\xfd\x5a\x52\xaf\xf6\x36\xe4\x6c\x02\x77\xab\x71\x69\xe5\xb8\x13\xbd\xb4\x70\xa7\x08\x47\x78\xb9\xf8\xed\x54\x3f\x90\x1f\xa2\xac\x6d\x2c\xd1\xee\x9e\x25\x32\x32\xe1\x80\x4a\x3c\x1c\x8d\xd1\x88\x53\x9b\x3d\x69\x8e\xab\xa1\x97\x1d\x1a\xae\x19\xea\x81\xd6\x24\xfe\x8d\xdf\xee\x2d\x9a\x7d\xea\x11\xb9\xd6\x2c\x34\xde\xce\x14\x0e\xd7\x32\x85\x12\xcd\x1a\x69\xc9\x9e\xe6\x63\x4a\x1e\x8d\x6b\x0d\xef\x53\x6d\x61\x2c\xed\x86\x27\xbe\x68\xd9\x3d\x73\xf2\x9f\xc1\xf7\x41\x2d\x03\x9d\x06\xd6\x27\xa7\xf0\xdc\x49\xd2\x71\x96\xbb\x65\xa2\x29\x51\x73\x92\x54\x8f\xf3\x61\x83\x15\x38\x8f\x94\xa2\x22\xcf\xf9\x9d\x52\x02\x1b\xd7\x1f\x50\x09\x69\x28\xcf\x0f\x0c\xdc\xa0\xf8\xee\x57\x52\xb1\x81\x76\x07\x20\xda\xd2\x02\x69\x6a\x23\x8a\xc3\xdd\xea\x83\xa9\x68\xf2\x64\x2c\x7c\x8a\x0b\xa8\xa6\x93\xb9\x67\xf0\x94\x6b\xeb\x33\xcf\x4a\x62\xc1\x7b\xf0\x97\x8f\xb8\xbd\x1c\xf2\x9c\x43\xdf\xbb\xbc\x53\x97\x3e\xf5\x1d\x79\x53\x9b\x27\xb5\x2a\x86\xac\xe6\x92\xbf\xba\x3c\x0f\x06\x8c\x5a\xd3\x48\x87\x90\xd7\xce\x5e\x2e\x7a\x54\x3e\x01\xb4\x3e\x6c\x2b\xfc\x1e\x9d\x68\x5a\x97\xd8\xec\x58\x65\x72\x23\xb3\x5a\x04\x40\x48\x7a\x17\x0a\x6e\xde\xdd\x45\x17\x89\xb6\xd2\xca\x22\x34\x28\x06\xad\xf3\x3b\x80\x9e\x45\x7b\x5c\x38\xe1\xfd\x16\xde\xdb\x8a\x6e\x7c\xf9\xa1\x49\x8d\xd2\x59\x1a\x3c\x14\xbb\x9a\x7d\x93\x04\xee\x9d\xa9\xb9\x26\xd1\xec\x5b\x91\x6e\xda\xd2\x58\x8c\xac\x81\x8a\xba\x58\xde\xce\xf2\x1b\x55\x52\x15\x52\x61\x2b\x8d\x73\xe1\x6b\x7f\x41\x6f\x40\xfc\xa7\x96\xf7\x06\x43\x65\xb7\xf0\x77\x6a\xb1\x6f\x28\x0a\xf4\x95\x01\x4f\x29\xfd\x0d\xd0\xfe\x92\x45\xc1\xfd\x67\x42\x90\x3d\x2c\x18\xee\x3f\xe7\x97\x0f\x07\x95\xda\x29\x2c\x4e\x2f\x26\x0e\x50\x1c\x2a\x33\x0e\x95\x16\x07\x48\xfe\xd9\x8a\x8e\xfb\xcf\xc4\x0d\x80\x68\x2c\xf6\xa1\x94\x73\xdd\xc4\xf2\xc8\x8b\x0c\x57\xa2\x2e\xdc\xa2\xad\x74\x26\xbc\x76\x89\x30\x39\x16\xca\xa3\x3b\xda\x67\x6f\xf7\xfa\x29\x7d\xc6\xad\x5b\x99\xf6\xac\xdd\xf7\x64\x74\x97\x86\x65\x7a\xa7\x28\x18\x16\xec\xfc\x39\xef\x75\x13\xec\xa7\xa5\x5b\x1a\xa9\x1f\x11\x19\x36\x30\x53\xfa\xb0\x27\x55\x5a\xd4\x19\x76\xf7\xfc\x66\x60\xe5\x6f\x21\x42\xc9\xd2\x67\x9e\x43\x52\x53\x6a\xc5\x77\xa5\x58\xe3\x7d\x85\xe9\x0e\x44\x74\x87\x16\x4b\x5d\x3b\xce\x9e\xd4\x0f\x6a\x8b\x19\x88\x3e\x57\xa4\x2e\x69\xdf\x6c\x86\x13\x0c\xcd\x62\x82\xf5\x7d\x15\xc4\xf9\x35\x43\x17\xfa\xaa\x49\xb3\x0d\x63\x52\x41\x25\x9f\x09\xb9\x7d\x85\xc9\x3a\x89\xe1\xaa\xeb\x6f\x9f\xaf\xbf\xfd\xfa\xac\x52\x99\x35\xe9\x14\xe8\xb1\xdb\x95\x25\x55\x7b\xe6\xda\xd8\xc6\xc2\x03\x94\x2e\x47\x6f\x06\x4b\xab\x8b\xda\xc5\xb0\xc2\x8f\xef\xdf\x84\x04\xe5\x09\x91\xf1\xc0\x2b\xe1\x04\xbf\x6a\x14\x16\xa2\x2e\x77\x49\xda\xd7\xb1\x78\x49\x68\xc2\x67\x65\x2e\x81\xbd\xff\xee\x16\xae\xbf\xf9\xd7\x3f\xce\x92\xc9\xc4\xc2\xd4\x81\xf6\x4a\x42\x25\x1d\xa4\xd4\x4c\xce\x2b\x0e\x2e\xf9\xd7\x55\xa5\xd6\x97\xe7\x28\x6a\x28\x44\x58\x93\x7e\x8a\x40\xf0\x88\x5b\xbf\xa5\x7f\xd6\xe1\x8c\x93\xc1\x69\x0b\x43\x7b\x84\x71\x0e\x30\xed\x40\xd0\x1e\x8a\x67\x81\xd2\x3d\xf8\xd9\xe7\x3b\x13\x01\xe9\x70\xac\x18\x03\xa2\x9f\x03\x84\x7e\x16\x00\xfa\xb9\xc0\xe7\x9f\x03\x78\x8e\xc4\x8c\x38\xe0\xfc\x04\x67\xd5\xa2\x15\xb4\x53\x80\xe6\x31\x9c\x1c\x28\xcc\x8d\x83\xcc\x38\x94\x8c\x90\xfd\xd2\x00\x73\x50\x81\x67\xc4\xcb\x42\xaa\xc7\x61\xe0\xf4\x86\x7a\x34\x55\xdd\x80\x97\xda\x0e\x1b\xe4\x74\xc6\xfe\xa1\x32\x7f\x46\x64\xe9\xa1\xc8\x31\x77\x1a\x6c\x6d\x56\x5c\x22\x6d\x37\xa4\x20\xd3\x69\x5d\x06\x1f\x9e\x41\x26\x6c\xbe\xd4\xc2\x64\x76\x06\xe8\xd2\x73\x50\x13\x31\x3c\x02\x98\x9a\xe4\x1d\xd8\xd9\xe7\xa1\x47\xee\x23\x5c\x7d\xda\xd3\x76\xaf\xf6\x4f\xdb\x1d\x9c\x2e\xa2\x89\x91\x51\xe3\x73\x55\x78\x80\x31\xe0\x00\x55\x6d\x2a\x6d\xdb\xe4\x42\xca\x3e\x0b\x4b\xd4\x26\x72\x8e\x61\x8f\xf1\x1f\x4d\x41\x84\x64\x2a\x8a\x62\x0b\xec\x9c\x16\x28\x1d\xc1\x13\x2e\xad\x74\xac\x77\x83\x36\x52\xd7\xf9\xd4\xa6\x5d\x0a\xc9\x36\x80\x66\xd8\xc0\xbf\xdf\xf5\x8b\xad\x0f\x3a\xa4\x82\x2c\x07\x57\x09\x8c\xa4\xba\x64\x95\x0f\x5e\x4c\x2f\xbc\xf0\xb9\x7f\x87\x49\x53\x9d\xe1\xcc\xe3\x2d\x7b\x6c\x84\x94\x71\x2a\x91\x3e\x12\x1a\x0b\x87\xcb\x06\x78\x98\xe2\x28\xb7\xe4\x23\xa9\x63\x50\x3a\xb2\xc0\x68\x11\x50\x3f\xce\xd1\x66\x2d\x94\xfc\x2d\x22\x8d\x61\xe7\xc0\x52\xc8\x29\xd6\xf5\x9a\xfa\x85\xd2\x1c\x7f\xf4\x11\xe6\x34\xf9\x94\xdf\xdb\xe6\x94\x1f\x0d\xda\x8d\x7a\x7c\x7a\xe4\xf3\xba\x52\xca\xc0\x65\xe7\x50\x4b\xfc\x52\x9e\x14\x32\xf8\xa0\x1b\x85\x83\xcd\x77\xaf\x76\x07\x60\x09\x21\x44\xd2\xff\x90\x51\xf8\x5b\x23\xb1\x35\x4d\x6c\x62\x31\xf0\xb2\xc7\x65\x40\x2e\xbe\x98\x6b\xa4\x28\xf8\xae\x00\x7d\x1b\x3c\x7b\x77\x62\x07\xee\x1c\x44\xd0\xa7\x22\x27\x21\xad\xb4\x88\x81\x3d\x34\x5c\x06\xe9\xd3\xcb\x20\xf3\x31\x73\xdc\xc7\x5d\x5d\x6b\xf4\x17\x56\xfc\x69\xd3\x03\xce\x39\xb7\x11\x7c\xe2\x29\xf4\xf2\xcf\x35\x3e\xae\x85\xf0\x97\x5d\x2a\xb1\x7b\x4c\x73\x83\x6b\xc9\xc5\xbc\xc3\x7b\x1e\xed\x0c\xb5\x5e\x34\x7c\x25\xac\xc3\x66\x2b\xbd\xad\x28\x8a\xa2\x80\x42\x3f\xa1\x49\x09\x62\xf5\x21\x9c\x41\x21\xf9\xcb\x32\x63\x52\x0a\x9c\xdf\x53\xef\x26\xa2\xa3\xaa\xcb\xfd\xe3\xb0\x99\x5c\xf1\x29\x33\xe7\xa9\xf6\x6b\x59\x6c\x84\x2c\x38\xed\x72\xf9\x3b\x65\xc9\x0c\x01\xda\x41\xf6\x37\xf1\x05\xd2\xc0\x77\xb1\x45\xf3\xdc\xbb\xc9\x51\x2b\x99\xf2\x51\x63\xcf\xa1\xca\xb9\x9f\xf8\x51\x6b\xc3\x65\x6f\x68\xe8\x89\x1a\xb6\x5e\x3e\x90\x84\x3e\xcd\x91\xc9\xc8\xc5\x8a\x41\x8a\xfe\xf9\x98\x4b\x16\xd1\xad\x5c\x7f\xf9\x62\xec\xaa\xc5\x94\x89\x1d\x33\x39\xb0\xbf\x7d\xee\xe5\x8b\x01\x92\x87\xa7\xba\x87\xea\xef\x93\xca\xbf\x43\xd7\x31\x7a\x66\x71\xd2\xa5\x8c\xc1\x79\x1c\x1e\x93\x3e\xe5\x6a\xc6\x20\xe1\xdd\xb5\x8d\x13\x2f\x68\x0c\x53\xdd\xbf\xbc\xf1\x45\xae\x69\xec\x04\x17\x3f\xca\xed\x9f\x49\xaa\x1f\xbe\xb8\xe1\x9f\x8f\xb9\xbe\x31\x38\x8b\xe1\xab\x1d\x27\xcc\x22\x0e\x00\x7b\x66\xf0\xf1\x97\x3d\x4e\xe0\x6c\xf8\xe2\x47\x0f\x77\xa7\x5c\xff\x18\x36\xd6\xf6\x6a\xc8\xc9\x97\x40\x06\xe9\xee\x5f\x10\x39\xe9\x2a\xc8\x30\xbf\x07\xd7\x44\x3e\xfe\x42\x88\x7f\xc6\xaf\x85\xf8\x67\xec\x72\x48\xa7\xd7\x54\x5d\x9e\x70\x51\x64\x50\x34\x21\x3a\xfe\x85\x23\xcd\xd8\x59\xac\x81\x6b\x24\xa1\x43\xef\x65\x92\xf0\x32\x7a\xa5\x24\x74\xe8\xad\x4e\x76\xd9\x1f\x3d\x70\x13\x8b\x67\x7c\xd2\xe8\xec\xc3\x36\xf1\xd0\x75\x76\xf9\xa5\x57\x50\x27\x2f\x15\xfb\x46\x98\xf7\xe1\xe5\x1e\xca\x07\x4d\x01\x2c\xc3\xe6\xa5\x28\xaa\x5c\xbc\xdc\xb5\x35\xff\xde\xc0\xff\xdb\x81\xce\xeb\x06\xaf\x65\x0b\x70\xa6\xf6\xa3\x59\xa7\x8d\x58\x63\xd3\xf2\xff\x00\x00\x00\xff\xff\x49\x6f\x84\x78\xd6\x41\x00\x00")

func metaAppscodeCom_resourcedescriptorsYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaAppscodeCom_resourcedescriptorsYaml,
		"meta.appscode.com_resourcedescriptors.yaml",
	)
}

func metaAppscodeCom_resourcedescriptorsYaml() (*asset, error) {
	bytes, err := metaAppscodeCom_resourcedescriptorsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.appscode.com_resourcedescriptors.yaml", size: 16854, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.appscode.com_resourcedescriptors.yaml": metaAppscodeCom_resourcedescriptorsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.appscode.com_resourcedescriptors.yaml": {metaAppscodeCom_resourcedescriptorsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
