// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// meta.appscode.com_resourcedescriptors.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaAppscodeCom_resourcedescriptorsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x3b\xcd\x92\xdb\x36\xd2\xf7\x79\x8a\xae\xf9\x0e\xbe\x48\xd4\x67\xe7\xb2\xa5\xdb\x94\xed\xdd\xd2\x6e\xe2\xb8\x32\xb3\xbe\x6c\x72\x80\xc8\x96\x88\x0c\x08\x30\x00\xa8\xb1\x36\x95\x77\xdf\xea\x06\x48\x51\x12\x41\x4a\x72\x5c\x49\x70\x1a\x81\x40\x77\xa3\xff\xd1\xe8\xb9\x9b\xcf\xe7\x77\xa2\x96\x9f\xd0\x3a\x69\xf4\x12\x44\x2d\xf1\xb3\x47\x4d\xbf\x5c\xf6\xfc\x37\x97\x49\xb3\xd8\xbd\x5e\xa3\x17\xaf\xef\x9e\xa5\x2e\x96\xf0\xb6\x71\xde\x54\x3f\xa0\x33\x8d\xcd\xf1\x1d\x6e\xa4\x96\x5e\x1a\x7d\x57\xa1\x17\x85\xf0\x62\x79\x07\x90\x5b\x14\x34\xf9\x24\x2b\x74\x5e\x54\xf5\x12\x74\xa3\xd4\x1d\x80\x16\x15\x2e\xc1\xc6\xed\x05\xba\xdc\xca\xda\x1b\xeb\x32\xda\x9f\x89\xba\x76\xb9\x29\x30\xcb\x4d\x75\xe7\x6a\xcc\x09\x9a\x28\x0a\x46\x21\xd4\x47\x2b\xb5\x47\xfb\xd6\xa8\xa6\xd2\x8e\xbe\xcd\xe1\x9f\x8f\xdf\x7f\xf8\x28\x7c\xb9\x84\xcc\x79\xe1\x1b\x97\xd5\xa5\x70\x78\x07\xd0\x62\x7b\xe4\x69\x9e\xf0\xfb\x1a\x97\xe0\xbc\x95\x7a\x7b\xba\xbb\x3d\x40\x76\x46\x7d\x0f\xd6\xc3\x16\x7b\x80\x0a\xe1\xe9\xe7\xd6\x9a\xa6\x5e\xc2\xf9\x09\xc2\x2e\x26\x14\x20\x17\x1e\xb7\xc6\xca\xf6\xf7\x1c\x76\xa2\x51\x3e\xfe\x5d\x1b\x25\xf3\x7d\xfc\xd1\x02\x69\x7f\x32\xeb\x00\x82\x04\x0e\xbc\x6f\x99\xc7\x1f\x95\x74\xfe\x5f\x89\x05\xdf\x4a\x17\xf0\xd4\xaa\xb1\x42\x0d\x0a\x80\xbf\xbb\xd2\x58\xff\xe1\x40\xf3\x1c\x6c\x11\x3e\x48\xbd\x6d\x94\xb0\x43\x5b\xef\x00\x6a\x8b\x0e\xed\x0e\xff\xad\x9f\xb5\x79\xd1\x7f\x97\xa8\x0a\xb7\x84\x8d\x50\x2c\x09\x97\x1b\x62\x17\x03\xae\x45\x8e\x04\xd3\x35\xeb\x16\x54\x44\x16\xc4\xb7\x84\x5f\x7f\xbb\x03\xd8\x09\x25\x0b\x16\x43\xf8\x68\x6a\xd4\x0f\x1f\x57\x9f\xbe\x79\xcc\x4b\xac\x44\x98\x24\xc4\xa6\x46\xeb\x3b\xa6\xd2\xe8\x69\x74\x37\x07\xd0\xd2\xcb\x8a\xfe\x8a\x40\x85\x35\x50\x90\x0e\xa3\x03\x5f\x22\xec\xc2\x1c\x16\xe0\x18\x0d\x98\x0d\xf8\x52\x3a\xb0\xc8\x47\xd4\x9e\x49\xea\x81\x05\x5a\x22\x34\x98\xf5\xcf\x98\xfb\x0c\x1e\x89\x0d\xd6\x11\x27\x1b\x55\x40\x6e\xf4\x0e\xad\x07\x8b\xb9\xd9\x6a\xf9\xdf\x0e\xb2\x03\x6f\x18\xa5\x12\x1e\xa3\x74\xda\xc1\x4a\xae\x85\x22\x26\x34\x38\x03\xa1\x0b\xa8\xc4\x1e\x2c\x12\x0e\x68\x74\x0f\x1a\x2f\x71\x19\x7c\x67\x2c\x82\xd4\x1b\xb3\x84\xd2\xfb\xda\x2d\x17\x8b\xad\xf4\xad\x0d\xe7\xa6\xaa\x1a\x2d\xfd\x7e\x91\x1b\xed\xad\x5c\x37\x24\xf2\x45\x81\x3b\x54\x0b\x27\xb7\x73\x61\xf3\x52\x7a\xcc\x7d\x63\x71\x21\x6a\x39\x67\xc2\xb5\x67\x47\x50\x15\xff\xd7\x89\xea\x55\x8f\xd2\x13\x6b\x0a\x83\x95\x34\xc9\x77\xd2\x50\x90\x0e\x44\xdc\x16\xe8\x3f\xb0\x97\xa6\x88\x2b\x3f\xbc\x7f\x7c\xea\x54\x8d\x45\x70\xcc\x73\xe6\xf6\x61\x9b\x3b\x30\x9e\x18\x25\xf5\x06\x6d\x10\xdc\xc6\x9a\x8a\x21\xa2\x2e\x6a\x23\xb5\xe7\x1f\xb9\x92\xa8\x8f\x99\xee\x9a\x75\x25\x3d\x49\xfa\x97\x06\x9d\x27\xf9\x64\xf0\x56\x68\x6d\x3c\xac\x11\x9a\x9a\x8c\xbd\xc8\x60\xa5\xe1\xad\xa8\x50\xbd\x15\x0e\xbf\x3a\xdb\x89\xc3\x6e\x4e\x2c\x9d\x66\x7c\xdf\x01\x1f\x2f\x0c\xdc\xea\xa6\x5b\xbf\xda\x8e\x21\x1b\x62\x87\x75\x70\xb3\x47\xda\xe9\xb1\x3a\x9b\x3c\x91\x73\xeb\x82\x82\xa7\x3e\x44\x09\xc6\x2d\x37\x12\x49\x03\x02\x7c\xd8\x18\x0b\xec\x3c\xec\x19\x4c\xf2\x3b\x05\x42\x4d\x6e\x5f\xea\x6d\x76\xb6\x20\x45\xfa\x39\x49\x03\x9f\x4f\x68\xee\xfd\x08\x1a\x5a\x36\x95\xd0\x60\x51\x14\x62\xad\xf0\xe8\x7b\x74\x0b\x83\x40\x5b\xc6\x9d\x53\x0b\x29\xd1\x1d\xc6\xc6\xd8\x4a\xf8\x0b\xa8\x0d\x0b\x99\x50\x0d\xa6\x0e\xf1\x11\xbe\x0f\x5e\x92\xb1\x04\xc7\x16\xd8\xbe\x31\x43\xcc\x65\x7a\xc8\x48\x22\xc1\xf0\x54\x22\xbc\xa2\x90\xf5\xaa\x0f\xbf\xae\x95\xc4\xa2\xf5\x57\xb5\x95\x95\xb0\x7b\x90\x05\xe9\xe9\x46\x0e\x8a\xed\xc0\x05\xda\x26\x9c\x93\xce\x83\xd4\xd1\xee\x5c\xbb\x79\x4f\xe6\x1e\xd7\xc9\xe0\x81\x5b\x9b\x4f\x00\x25\xe2\xc8\xd6\xb1\x6f\x6e\x65\xb3\xa6\x70\xbb\xf8\xfe\x61\xb5\x88\x1c\x98\x3f\x06\x45\xcb\xd9\x5f\x2f\xd6\xca\xac\x17\x95\x70\x1e\xed\x22\xfa\x78\xb7\x78\x93\xfd\x3f\xd9\x18\xd9\xcc\x9c\x0d\x2d\x81\x93\x14\xb4\x32\x16\x6f\x12\xe8\xcf\xce\x68\x4e\x30\xa6\x45\xda\xe6\x22\xd1\x3f\xca\xaa\x56\xc8\x93\x50\x0b\x5f\xce\x40\x66\x98\xc1\x8b\xf4\x25\x08\x6b\xc5\x1e\xb4\x09\xd1\xe8\x26\xba\x38\x9d\x99\xa6\x89\x96\x0d\x5a\x03\x7f\x20\xce\xb0\x3b\xbd\x5d\xe1\x6b\x2b\x8d\x95\x7e\x7f\x01\x2d\xed\xd2\xa8\xf4\x14\x25\xb7\x68\xa3\x9a\xc7\xb8\x61\x51\x09\x2f\x77\x08\xb2\xaa\x8d\xf5\x42\x27\x35\xa9\x8d\xec\x51\xfd\x72\x53\xd5\xc2\x06\x35\x37\xbe\x44\xeb\x32\xf8\xd6\xbc\xa0\x05\xdd\x54\x6b\x0a\x2c\xc2\xd2\x41\x35\x79\x24\x8b\x45\x02\x6a\x29\xb7\x25\xda\x8e\xd4\x0c\x62\xae\x0a\xbe\x14\x9e\x63\xd3\x1a\xc1\x54\xd2\x7b\x2c\xc8\x20\x94\xac\x24\xfd\xc9\x69\x51\x02\xa6\xcb\x51\x0b\x2b\x4d\x97\x54\xac\x11\xb6\x72\x87\x9a\xa4\x72\x82\x6f\x10\x44\x74\x2a\xc4\xb1\x6f\xde\x8c\x08\x29\x72\x74\x60\x05\x7f\x9f\x96\x10\xbb\x9d\x20\x9d\x11\x4f\x74\xe4\x73\x12\x67\xfe\xcb\x58\x38\xa5\x0b\xd2\x62\x71\xce\x9d\x79\x67\xfb\x03\x9f\xc8\x7c\x06\xa6\x5b\x39\x0e\x7c\x22\x2a\xce\xa6\x07\xe3\x7b\xff\x13\x7b\x8a\x93\xa8\xae\x35\xe6\x9c\x61\x5c\x18\xd9\xc7\x83\xac\xa2\x64\x66\x58\x37\x2e\x70\x41\x4f\x58\xd5\x94\x01\xdf\x0c\x80\x0d\x27\xed\x60\x27\x20\x58\xdc\xa0\x45\x9d\x0f\x1f\xed\x44\xbb\xef\x7f\xe8\x56\xb3\x33\x10\x2c\x60\xf2\xcd\xc1\xba\x2d\xfa\xc6\x6a\xf2\x95\x6f\x1f\x3f\x45\xa3\xf3\x49\x4f\x71\x40\xcd\x91\x55\xd8\x2d\xfa\x2e\xfa\x39\xf8\x51\xc3\x6a\x03\x28\xf2\x12\xac\x79\x81\x52\x84\x98\xa0\xb7\xaa\x75\xb7\xb3\x04\x60\xc9\x51\x3b\x02\x0c\xf1\xf2\xe9\x18\x3a\x7d\xd7\x46\xcf\x3b\xfe\x15\x60\x2c\x34\x2e\x69\x1f\xe4\x59\x1d\x39\xfc\x6e\x07\x88\x10\xae\x23\xc0\x16\x72\x06\xef\x3f\x0b\x8a\x5b\x4b\xd0\xaf\x41\xbf\x81\x1f\x75\x02\xe4\xe9\xe1\xfc\x8b\x69\x13\xce\xd9\xf1\x11\xfe\x43\x48\x67\x1d\xe6\x9f\x52\x2e\xa3\x87\x79\xa6\x1d\x61\x9f\x69\xf7\x66\x88\x91\xbe\xb4\x88\x7d\x6c\x29\x4e\xa6\x68\x98\x51\x46\xfe\x53\x76\x8a\x72\xf6\xdc\x62\x9d\x3d\x0f\xfb\x59\x18\x22\x67\x63\x1a\x7b\xd9\xd9\x19\xef\x4c\xd4\xf2\x1f\xd6\x34\xf5\xa5\x9c\x98\x3d\xbf\xee\xf6\xf4\x08\xec\xe6\xde\xdc\x0f\xc2\x49\x78\x83\x30\x26\xec\x2a\xed\x7e\xc2\x70\xa8\x30\xf7\xc6\x5e\x60\x75\x0f\xa0\xc4\x1a\x55\xb7\x25\x64\x23\x61\xee\x97\x06\xed\x1e\xcc\x0e\x2d\x19\x07\x7a\x0a\xea\x9d\x09\xa5\xb8\xf3\x14\xb2\xcc\x46\xf1\xf2\x4a\xf8\xbc\xfc\x96\xa0\xb9\x78\xcf\xf6\x79\xf9\xfe\x33\xdd\x2b\x39\x86\xb0\xa5\x3f\x7c\x78\x47\x57\xbf\x87\x94\x32\x63\x55\xfb\xfd\x29\x9d\x0c\x89\x5c\x85\x52\xd1\x43\xbb\x0c\x1e\xb8\x10\x76\xb2\x34\x01\xb5\x05\xa0\x4d\xb7\x7f\x70\xe5\xb8\x7f\xee\x20\xf5\x0e\x95\x5a\x77\xc2\xfa\x33\x5e\x04\xd6\x53\x2e\x6f\x36\x97\x9d\x01\x0e\x21\xb2\x0a\xf7\xf4\xc0\xfe\xc3\x4c\x8f\xc1\x49\x18\xa3\xaa\x78\x46\xf6\x99\xc6\xf4\xd0\xc5\xdc\x7a\x9a\x68\x08\x3e\x9d\xee\xed\x42\x6a\x17\xeb\x2c\x33\x10\xf0\x8c\xfb\x50\x92\xe1\x8b\x17\x5a\xe1\x39\xa5\xe1\x00\xc0\xc5\x9c\x09\xa8\x48\x10\x18\x40\xac\xdd\x8c\xac\x9f\x16\x6d\x18\xcf\x98\x48\xa0\x13\x2c\x22\x0a\xe2\x85\x2b\xf0\x8a\x26\xf8\x0c\xec\xd4\x2f\x61\x0f\x70\xa5\x8d\xae\x86\x5c\x2a\x99\x58\x3b\xe9\x2f\xda\xd1\x72\xf4\xaa\xe3\x74\x62\x38\x14\x84\x82\xa0\x5e\xb9\x78\x23\x30\xda\x95\xb2\x9e\x3c\x10\x5d\x56\x5b\x47\xd2\x56\xd6\x3e\x09\x25\x8b\x0e\x45\xd0\xd7\x95\x9e\xc1\x07\xe3\x57\xc9\x20\x7c\x18\xef\x3f\x4b\xe7\x83\x6f\x79\x67\xd0\x7d\x30\x9e\x67\x7e\x37\x86\x05\x32\xaf\x62\x57\xd8\x12\x13\xf5\x70\x97\x34\x9b\xa3\x82\x9c\xcb\x60\xb5\x99\xe6\x56\x89\x07\xd6\x4b\x07\x2b\x4d\x79\x44\xe0\x4b\x28\xa7\x06\x44\x01\x45\xd5\xb8\x54\xa0\x3d\x8c\x35\x72\x66\xc2\x0e\x95\x68\x38\xc3\x11\xd9\x69\xec\x11\x37\xa7\xc5\x30\x48\x0e\xa1\x8b\xa8\x9e\xe8\x4e\x12\xbe\x84\x72\xaf\x8a\x75\xea\x09\xbe\x36\xcc\x34\x2e\x67\x0a\x8f\x5b\x99\x43\x85\x76\x8b\x74\x65\xcf\xcb\x29\x21\x4f\xfa\xb5\x48\xfb\xa5\xba\x30\x15\x76\xdb\x91\xbe\xb4\x1c\xc6\x9c\xec\x67\xf4\x7b\x2b\x96\x91\x45\x23\xf7\x93\x6b\x68\xee\x05\xe9\x34\xc9\xfd\x67\xa2\x4b\xbc\xe6\x45\x5c\x3d\x8f\x87\x31\x57\xe0\x38\x52\x89\x9a\x2c\xe7\x57\x0a\x09\xac\x5c\xbf\x41\x2d\xa4\xa5\x38\x3f\x82\x38\x66\xf1\xfd\x5d\x52\xb3\x82\xf6\x11\x10\x6c\xe9\x80\x24\xb5\x13\xea\xb4\x5a\x7d\x72\x14\x43\x96\x8c\x2a\x84\xb8\x36\xab\xe9\x45\xee\x19\xbc\x94\xc6\x85\xc8\xb3\x91\xa8\xb8\x06\x7f\xff\x8c\xfb\xfb\x31\xcb\x39\xb5\xbd\xfb\x95\xbe\x0f\xa1\xef\xcc\x9a\xba\x38\x69\xb4\x1a\xd3\x9a\x7b\xde\x75\x7f\x5b\x1a\x30\xa9\x4d\x13\x0b\xda\xb8\x76\xf3\x75\x31\x64\xe5\x17\x24\xad\x4f\xfb\x1a\xbf\x43\x2f\xe2\xec\x1a\x63\xc5\xaa\x90\x3b\x59\x34\xa2\x4d\x08\x49\xee\x42\xc3\xc3\xc7\x55\xf2\x92\xe8\x6a\xa3\x1d\x42\xcc\x62\xd0\xf9\x50\x01\x0c\x24\xba\xf3\x87\x13\xae\xb7\x70\x6d\x2b\x59\xf8\x0a\xa8\x49\x8c\xd2\x3b\x42\xde\x3e\x76\xc5\xba\x49\x06\x8f\xde\x36\xfc\x26\x11\xeb\x56\x24\x9b\xee\x69\x2c\x05\xd6\x42\x4d\x4b\x1c\x97\xb3\x42\xa1\x4a\x6a\x25\x35\x76\xdc\xb8\x35\x7d\x1d\x7e\xd0\x1b\x61\xff\xb5\xcf\x7b\xa3\xae\xb2\xff\xf0\x77\xed\x63\xdf\x98\x17\x18\x7a\x06\xbc\xe6\xe9\x6f\x04\xf6\x1f\xf9\x28\x78\x3c\x2e\x70\xb2\xa7\x0f\x86\xc7\xe3\xf6\xe7\xc3\x51\xa1\xf6\x1e\x16\x2f\x7f\x4c\x1c\x81\x38\xf6\xcc\x38\xf6\xb4\x38\x02\xf2\xcf\xf6\xe8\x78\x3c\x2e\x2c\x00\x24\x7d\x71\x70\xa5\x1c\xeb\x2e\x7c\x1e\x79\x55\xe0\x46\x34\xca\x2f\xbb\x97\xce\x8c\xef\x2e\x09\x22\xa7\x5c\x79\xb2\xa2\x7d\x73\xb9\x37\x1c\xe9\x2b\x96\x6e\x9f\x71\x1f\x2a\x79\x37\xbd\xc9\x5e\x1d\x93\xba\xe8\x33\xc0\xa6\x5b\xe2\x51\x2f\xf2\x0c\x40\xbc\x29\x16\x1d\x45\x9d\xa1\x88\x7f\x61\x1c\x1a\x8f\x41\x53\xf1\xe7\x6b\xc4\x9e\xaf\x12\x77\xbe\x56\xcc\xf9\x73\xc4\x9b\x09\x8b\x4f\xc7\x99\xdf\xa1\x45\x25\x59\x38\xbf\x26\xbe\x9c\x47\x91\x91\x7a\xfc\x74\x6c\x49\x47\x90\x04\xd8\x3f\x3a\xae\x8c\x0a\xf0\x06\x7f\xd9\x0a\xe7\x54\xea\x83\xad\x2a\xab\x77\x87\x96\x06\x12\x7e\x42\xb2\x63\x9e\x22\xf4\x01\xa6\x82\x4d\xea\x60\x29\xbd\x3c\xa2\xb2\x55\xca\x50\x9e\xb3\x52\x28\xee\xfe\xa2\xbd\xad\x77\x3d\xbc\xc1\xc0\xca\x43\xc2\xb1\x68\x63\x2b\xa1\xd4\xfe\xa0\x0c\x6c\xee\x6d\x7b\xdf\x90\x66\x8c\x12\x9f\x6a\x23\x38\x36\xa9\x0f\xb1\x8b\x80\xfb\x47\xb8\x05\x31\xf4\x0f\x9c\x50\x4e\x7e\x89\x3b\x81\xf8\x08\x83\xf4\x73\xd5\x86\x6f\xb7\xbc\xb3\x0f\x25\xd5\x99\x3a\xb7\xb8\x95\x5c\x9e\x39\xed\xdc\xeb\x4e\x68\xcc\x32\xd2\x95\xb1\x0c\xe3\xe5\xa8\xab\x11\x09\xa5\x40\x99\x17\xb4\x39\x59\xcf\x90\xf2\x8e\x32\x29\xb4\x3f\x4e\x71\xa9\xa5\xfc\x91\x56\xc7\xe2\x1c\xea\xa6\x3a\x6e\x70\x28\xe4\x86\xdf\x0d\x7d\x80\x3a\x2c\x65\xb1\x13\x52\x71\x9b\x06\x17\x34\x73\xe6\xcc\x98\xaf\x1a\x25\x7f\x97\x8e\x7d\x23\xfb\x52\x99\xd2\x3c\x98\xc9\xd9\x2c\xa9\xf2\xd9\xe4\xc0\x33\xf9\x3c\x1c\xfc\x6c\x36\x52\x39\xe8\x1a\x06\xbc\x86\x6b\xd6\x4f\xc4\xa1\xdf\xe7\x11\x3c\xd1\x2a\x37\x0a\x31\x8c\x2f\x69\x9b\x4b\x26\xe7\xa1\x9d\x6e\xaa\x79\xee\x92\x83\x9d\x13\x79\xe9\x2b\xcc\x15\xed\x74\xe3\x0f\x02\x9b\x4b\xfa\x45\xe0\xd2\x82\xde\x58\x83\xdd\xc0\x29\xae\x6a\xb3\x1b\x3d\xc7\x69\xe3\xcb\x35\xcd\x76\xa3\x80\x0f\x8d\x78\x57\xb6\xdc\x8d\x43\x3d\x6e\xc7\xfb\x43\x1a\xef\x0e\x8c\x4b\x37\xe7\x84\x71\x91\xe8\xc7\x5b\xf1\xc2\xf8\x92\x86\xbc\xd1\x53\x8c\x37\xeb\x5d\x71\x8a\x74\xe3\xde\xc0\x09\xbe\xbc\x7d\xef\x0a\xca\xc6\x5b\xf9\x06\xa8\xbb\xa6\xa1\x6f\x5c\x59\xbb\x66\xbf\xab\xdb\xfa\x46\xe1\x1e\xb7\xfc\x5d\xd5\xdc\x37\x4e\xef\x49\xe3\xdf\x97\xb7\xf8\x85\x31\xdd\xe8\x17\xc6\x54\xbb\x5f\x6f\xd5\xa5\xb2\xbc\xa2\xf5\x6f\x94\x35\xad\x77\xfc\x0b\x7b\x9a\xa9\xd7\xb5\x91\xc6\xc0\x76\xc1\x60\x7b\x60\xfb\x31\xd9\x24\xd8\x2e\x18\xac\x37\xf5\xc9\x9f\x7c\x42\x49\xf9\x33\x7e\x3b\xba\xf9\xf9\x24\xed\xba\x6e\xae\xb9\x0d\x32\xea\xea\xab\xe2\x10\x86\xf9\x50\xbe\x3c\x00\xf9\x64\xaa\x4d\x96\x61\xf7\x5a\xa8\xba\x14\xaf\x0f\x73\xf1\x1f\xd6\xc2\x3f\x92\xf5\x3e\xc7\x7c\xad\x58\x82\xb7\x4d\xc0\xe6\xbc\xb1\x62\x8b\x71\xe6\x7f\x01\x00\x00\xff\xff\xba\x9c\x87\x6c\xa8\x37\x00\x00")

func metaAppscodeCom_resourcedescriptorsYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaAppscodeCom_resourcedescriptorsYaml,
		"meta.appscode.com_resourcedescriptors.yaml",
	)
}

func metaAppscodeCom_resourcedescriptorsYaml() (*asset, error) {
	bytes, err := metaAppscodeCom_resourcedescriptorsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.appscode.com_resourcedescriptors.yaml", size: 14248, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta.appscode.com_resourcedescriptors.yaml": metaAppscodeCom_resourcedescriptorsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta.appscode.com_resourcedescriptors.yaml": {metaAppscodeCom_resourcedescriptorsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
