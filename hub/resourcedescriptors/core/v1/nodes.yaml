apiVersion: meta.appscode.com/v1alpha1
kind: ResourceDescriptor
metadata:
  creationTimestamp: null
  labels:
    k8s.io/group: ""
    k8s.io/kind: Node
    k8s.io/resource: nodes
    k8s.io/version: v1
  name: core-v1-nodes
spec:
  icons:
  - src: https://cdn.appscode.com/k8s/icons/core/nodes.svg
    type: image/svg+xml
  - src: https://cdn.appscode.com/k8s/icons/core/nodes.png
    type: image/png
  resource:
    group: ""
    kind: Node
    name: nodes
    scope: Cluster
    version: v1
  ui:
    editor:
      name: core-node-editor
      url: https://bundles.byte.builders/ui/
      version: v0.1.0
  validation:
    openAPIV3Schema:
      description: Node is a worker node in Kubernetes. Each node will have a unique
        identifier in the cache (i.e. in etcd).
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          properties:
            annotations:
              additionalProperties:
                type: string
              description: 'Annotations is an unstructured key value map stored with
                a resource that may be set by external tools to store and retrieve
                arbitrary metadata. They are not queryable and should be preserved
                when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations'
              type: object
            clusterName:
              description: The name of the cluster which the object belongs to. This
                is used to distinguish resources with same name and namespace in different
                clusters. This field is not set anywhere right now and apiserver is
                going to ignore it if set in create or update request.
              type: string
            creationTimestamp:
              description: "CreationTimestamp is a timestamp representing the server
                time when this object was created. It is not guaranteed to be set
                in happens-before order across separate operations. Clients may not
                set this value. It is represented in RFC3339 form and is in UTC. \n
                Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
              format: date-time
              type: string
            deletionGracePeriodSeconds:
              description: Number of seconds allowed for this object to gracefully
                terminate before it will be removed from the system. Only set when
                deletionTimestamp is also set. May only be shortened. Read-only.
              format: int64
              type: integer
            deletionTimestamp:
              description: "DeletionTimestamp is RFC 3339 date and time at which this
                resource will be deleted. This field is set by the server when a graceful
                deletion is requested by the user, and is not directly settable by
                a client. The resource is expected to be deleted (no longer visible
                from resource lists, and not reachable by name) after the time in
                this field, once the finalizers list is empty. As long as the finalizers
                list contains items, deletion is blocked. Once the deletionTimestamp
                is set, this value may not be unset or be set further into the future,
                although it may be shortened or the resource may be deleted prior
                to this time. For example, a user may request that a pod is deleted
                in 30 seconds. The Kubelet will react by sending a graceful termination
                signal to the containers in the pod. After that 30 seconds, the Kubelet
                will send a hard termination signal (SIGKILL) to the container and
                after cleanup, remove the pod from the API. In the presence of network
                partitions, this object may still exist after this timestamp, until
                an administrator or automated process can determine the resource is
                fully terminated. If not set, graceful deletion of the object has
                not been requested. \n Populated by the system when a graceful deletion
                is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
              format: date-time
              type: string
            finalizers:
              description: Must be empty before the object is deleted from the registry.
                Each entry is an identifier for the responsible component that will
                remove the entry from the list. If the deletionTimestamp of the object
                is non-nil, entries in this list can only be removed. Finalizers may
                be processed and removed in any order.  Order is NOT enforced because
                it introduces significant risk of stuck finalizers. finalizers is
                a shared field, any actor with permission can reorder it. If the finalizer
                list is processed in order, then this can lead to a situation in which
                the component responsible for the first finalizer in the list is waiting
                for a signal (field value, external system, or other) produced by
                a component responsible for a finalizer later in the list, resulting
                in a deadlock. Without enforced ordering finalizers are free to order
                amongst themselves and are not vulnerable to ordering changes in the
                list.
              items:
                type: string
              type: array
            generateName:
              description: "GenerateName is an optional prefix, used by the server,
                to generate a unique name ONLY IF the Name field has not been provided.
                If this field is used, the name returned to the client will be different
                than the name passed. This value will also be combined with a unique
                suffix. The provided value has the same validation rules as the Name
                field, and may be truncated by the length of the suffix required to
                make the value unique on the server. \n If this field is specified
                and the generated name exists, the server will NOT return a 409 -
                instead, it will either return 201 Created or 500 with Reason ServerTimeout
                indicating a unique name could not be found in the time allotted,
                and the client should retry (optionally after the time indicated in
                the Retry-After header). \n Applied only if Name is not specified.
                More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"
              type: string
            generation:
              description: A sequence number representing a specific generation of
                the desired state. Populated by the system. Read-only.
              format: int64
              type: integer
            labels:
              additionalProperties:
                type: string
              description: 'Map of string keys and values that can be used to organize
                and categorize (scope and select) objects. May match selectors of
                replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels'
              type: object
            name:
              description: 'Name must be unique within a namespace. Is required when
                creating resources, although some resources may allow a client to
                request the generation of an appropriate name automatically. Name
                is primarily intended for creation idempotence and configuration definition.
                Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
              type: string
            namespace:
              description: "Namespace defines the space within which each name must
                be unique. An empty namespace is equivalent to the \"default\" namespace,
                but \"default\" is the canonical representation. Not all objects are
                required to be scoped to a namespace - the value of this field for
                those objects will be empty. \n Must be a DNS_LABEL. Cannot be updated.
                More info: http://kubernetes.io/docs/user-guide/namespaces"
              type: string
            ownerReferences:
              description: List of objects depended by this object. If ALL objects
                in the list have been deleted, this object will be garbage collected.
                If this object is managed by a controller, then an entry in this list
                will point to this controller, with the controller field set to true.
                There cannot be more than one managing controller.
              items:
                description: OwnerReference contains enough information to let you
                  identify an owning object. An owning object must be in the same
                  namespace as the dependent, or be cluster-scoped, so there is no
                  namespace field.
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  blockOwnerDeletion:
                    description: If true, AND if the owner has the "foregroundDeletion"
                      finalizer, then the owner cannot be deleted from the key-value
                      store until this reference is removed. Defaults to false. To
                      set this field, a user needs "delete" permission of the owner,
                      otherwise 422 (Unprocessable Entity) will be returned.
                    type: boolean
                  controller:
                    description: If true, this reference points to the managing controller.
                    type: boolean
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids'
                    type: string
                required:
                - apiVersion
                - kind
                - name
                - uid
                type: object
              type: array
            resourceVersion:
              description: "An opaque value that represents the internal version of
                this object that can be used by clients to determine when objects
                have changed. May be used for optimistic concurrency, change detection,
                and the watch operation on a resource or set of resources. Clients
                must treat these values as opaque and passed unmodified back to the
                server. They may only be valid for a particular resource or set of
                resources. \n Populated by the system. Read-only. Value must be treated
                as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"
              type: string
            selfLink:
              description: "SelfLink is a URL representing this object. Populated
                by the system. Read-only. \n DEPRECATED Kubernetes will stop propagating
                this field in 1.20 release and the field is planned to be removed
                in 1.21 release."
              type: string
            uid:
              description: "UID is the unique in time and space value for this object.
                It is typically generated by the server on successful creation of
                a resource and is not allowed to change on PUT operations. \n Populated
                by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
              type: string
          type: object
        spec:
          description: Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
          properties:
            configSource:
              description: If specified, the source to get node configuration from
                The DynamicKubeletConfig feature gate must be enabled for the Kubelet
                to use this field
              properties:
                configMap:
                  description: ConfigMap is a reference to a Node's ConfigMap
                  properties:
                    kubeletConfigKey:
                      description: KubeletConfigKey declares which key of the referenced
                        ConfigMap corresponds to the KubeletConfiguration structure
                        This field is required in all cases.
                      type: string
                    name:
                      description: Name is the metadata.name of the referenced ConfigMap.
                        This field is required in all cases.
                      type: string
                    namespace:
                      description: Namespace is the metadata.namespace of the referenced
                        ConfigMap. This field is required in all cases.
                      type: string
                    resourceVersion:
                      description: ResourceVersion is the metadata.ResourceVersion
                        of the referenced ConfigMap. This field is forbidden in Node.Spec,
                        and required in Node.Status.
                      type: string
                    uid:
                      description: UID is the metadata.UID of the referenced ConfigMap.
                        This field is forbidden in Node.Spec, and required in Node.Status.
                      type: string
                  required:
                  - kubeletConfigKey
                  - name
                  - namespace
                  type: object
              type: object
            externalID:
              description: 'Deprecated. Not all kubelets will set this field. Remove
                field after 1.13. see: https://issues.k8s.io/61966'
              type: string
            podCIDR:
              description: PodCIDR represents the pod IP range assigned to the node.
              type: string
            podCIDRs:
              description: podCIDRs represents the IP ranges assigned to the node
                for usage by Pods on that node. If this field is specified, the 0th
                entry must match the podCIDR field. It may contain at most 1 value
                for each of IPv4 and IPv6.
              items:
                type: string
              type: array
            providerID:
              description: 'ID of the node assigned by the cloud provider in the format:
                <ProviderName>://<ProviderSpecificNodeID>'
              type: string
            taints:
              description: If specified, the node's taints.
              items:
                description: The node this Taint is attached to has the "effect" on
                  any pod that does not tolerate the Taint.
                properties:
                  effect:
                    description: Required. The effect of the taint on pods that do
                      not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule
                      and NoExecute.
                    type: string
                  key:
                    description: Required. The taint key to be applied to a node.
                    type: string
                  timeAdded:
                    description: TimeAdded represents the time at which the taint
                      was added. It is only written for NoExecute taints.
                    format: date-time
                    type: string
                  value:
                    description: The taint value corresponding to the taint key.
                    type: string
                required:
                - effect
                - key
                type: object
              type: array
            unschedulable:
              description: 'Unschedulable controls node schedulability of new pods.
                By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration'
              type: boolean
          type: object
        status:
          description: 'Most recently observed status of the node. Populated by the
            system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
          properties:
            addresses:
              description: 'List of addresses reachable to the node. Queried from
                cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
                Note: This field is declared as mergeable, but the merge key is not
                sufficiently unique, which can cause data corruption when it is merged.
                Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391
                for an example.'
              items:
                description: NodeAddress contains information for the node's address.
                properties:
                  address:
                    description: The node address.
                    type: string
                  type:
                    description: Node address type, one of Hostname, ExternalIP or
                      InternalIP.
                    type: string
                required:
                - address
                - type
                type: object
              type: array
            allocatable:
              additionalProperties:
                anyOf:
                - type: integer
                - type: string
                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                x-kubernetes-int-or-string: true
              description: Allocatable represents the resources of a node that are
                available for scheduling. Defaults to Capacity.
              type: object
            capacity:
              additionalProperties:
                anyOf:
                - type: integer
                - type: string
                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                x-kubernetes-int-or-string: true
              description: 'Capacity represents the total resources of a node. More
                info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity'
              type: object
            conditions:
              description: 'Conditions is an array of current observed node conditions.
                More info: https://kubernetes.io/docs/concepts/nodes/node/#condition'
              items:
                description: NodeCondition contains condition information for a node.
                properties:
                  lastHeartbeatTime:
                    description: Last time we got an update on a given condition.
                    format: date-time
                    type: string
                  lastTransitionTime:
                    description: Last time the condition transit from one status to
                      another.
                    format: date-time
                    type: string
                  message:
                    description: Human readable message indicating details about last
                      transition.
                    type: string
                  reason:
                    description: (brief) reason for the condition's last transition.
                    type: string
                  status:
                    description: Status of the condition, one of True, False, Unknown.
                    type: string
                  type:
                    description: Type of node condition.
                    type: string
                required:
                - status
                - type
                type: object
              type: array
            config:
              description: Status of the config assigned to the node via the dynamic
                Kubelet config feature.
              properties:
                active:
                  description: Active reports the checkpointed config the node is
                    actively using. Active will represent either the current version
                    of the Assigned config, or the current LastKnownGood config, depending
                    on whether attempting to use the Assigned config results in an
                    error.
                  properties:
                    configMap:
                      description: ConfigMap is a reference to a Node's ConfigMap
                      properties:
                        kubeletConfigKey:
                          description: KubeletConfigKey declares which key of the
                            referenced ConfigMap corresponds to the KubeletConfiguration
                            structure This field is required in all cases.
                          type: string
                        name:
                          description: Name is the metadata.name of the referenced
                            ConfigMap. This field is required in all cases.
                          type: string
                        namespace:
                          description: Namespace is the metadata.namespace of the
                            referenced ConfigMap. This field is required in all cases.
                          type: string
                        resourceVersion:
                          description: ResourceVersion is the metadata.ResourceVersion
                            of the referenced ConfigMap. This field is forbidden in
                            Node.Spec, and required in Node.Status.
                          type: string
                        uid:
                          description: UID is the metadata.UID of the referenced ConfigMap.
                            This field is forbidden in Node.Spec, and required in
                            Node.Status.
                          type: string
                      required:
                      - kubeletConfigKey
                      - name
                      - namespace
                      type: object
                  type: object
                assigned:
                  description: Assigned reports the checkpointed config the node will
                    try to use. When Node.Spec.ConfigSource is updated, the node checkpoints
                    the associated config payload to local disk, along with a record
                    indicating intended config. The node refers to this record to
                    choose its config checkpoint, and reports this record in Assigned.
                    Assigned only updates in the status after the record has been
                    checkpointed to disk. When the Kubelet is restarted, it tries
                    to make the Assigned config the Active config by loading and validating
                    the checkpointed payload identified by Assigned.
                  properties:
                    configMap:
                      description: ConfigMap is a reference to a Node's ConfigMap
                      properties:
                        kubeletConfigKey:
                          description: KubeletConfigKey declares which key of the
                            referenced ConfigMap corresponds to the KubeletConfiguration
                            structure This field is required in all cases.
                          type: string
                        name:
                          description: Name is the metadata.name of the referenced
                            ConfigMap. This field is required in all cases.
                          type: string
                        namespace:
                          description: Namespace is the metadata.namespace of the
                            referenced ConfigMap. This field is required in all cases.
                          type: string
                        resourceVersion:
                          description: ResourceVersion is the metadata.ResourceVersion
                            of the referenced ConfigMap. This field is forbidden in
                            Node.Spec, and required in Node.Status.
                          type: string
                        uid:
                          description: UID is the metadata.UID of the referenced ConfigMap.
                            This field is forbidden in Node.Spec, and required in
                            Node.Status.
                          type: string
                      required:
                      - kubeletConfigKey
                      - name
                      - namespace
                      type: object
                  type: object
                error:
                  description: Error describes any problems reconciling the Spec.ConfigSource
                    to the Active config. Errors may occur, for example, attempting
                    to checkpoint Spec.ConfigSource to the local Assigned record,
                    attempting to checkpoint the payload associated with Spec.ConfigSource,
                    attempting to load or validate the Assigned config, etc. Errors
                    may occur at different points while syncing config. Earlier errors
                    (e.g. download or checkpointing errors) will not result in a rollback
                    to LastKnownGood, and may resolve across Kubelet retries. Later
                    errors (e.g. loading or validating a checkpointed config) will
                    result in a rollback to LastKnownGood. In the latter case, it
                    is usually possible to resolve the error by fixing the config
                    assigned in Spec.ConfigSource. You can find additional information
                    for debugging by searching the error message in the Kubelet log.
                    Error is a human-readable description of the error state; machines
                    can check whether or not Error is empty, but should not rely on
                    the stability of the Error text across Kubelet versions.
                  type: string
                lastKnownGood:
                  description: LastKnownGood reports the checkpointed config the node
                    will fall back to when it encounters an error attempting to use
                    the Assigned config. The Assigned config becomes the LastKnownGood
                    config when the node determines that the Assigned config is stable
                    and correct. This is currently implemented as a 10-minute soak
                    period starting when the local record of Assigned config is updated.
                    If the Assigned config is Active at the end of this period, it
                    becomes the LastKnownGood. Note that if Spec.ConfigSource is reset
                    to nil (use local defaults), the LastKnownGood is also immediately
                    reset to nil, because the local default config is always assumed
                    good. You should not make assumptions about the node's method
                    of determining config stability and correctness, as this may change
                    or become configurable in the future.
                  properties:
                    configMap:
                      description: ConfigMap is a reference to a Node's ConfigMap
                      properties:
                        kubeletConfigKey:
                          description: KubeletConfigKey declares which key of the
                            referenced ConfigMap corresponds to the KubeletConfiguration
                            structure This field is required in all cases.
                          type: string
                        name:
                          description: Name is the metadata.name of the referenced
                            ConfigMap. This field is required in all cases.
                          type: string
                        namespace:
                          description: Namespace is the metadata.namespace of the
                            referenced ConfigMap. This field is required in all cases.
                          type: string
                        resourceVersion:
                          description: ResourceVersion is the metadata.ResourceVersion
                            of the referenced ConfigMap. This field is forbidden in
                            Node.Spec, and required in Node.Status.
                          type: string
                        uid:
                          description: UID is the metadata.UID of the referenced ConfigMap.
                            This field is forbidden in Node.Spec, and required in
                            Node.Status.
                          type: string
                      required:
                      - kubeletConfigKey
                      - name
                      - namespace
                      type: object
                  type: object
              type: object
            daemonEndpoints:
              description: Endpoints of daemons running on the Node.
              properties:
                kubeletEndpoint:
                  description: Endpoint on which Kubelet is listening.
                  properties:
                    Port:
                      description: Port number of the given endpoint.
                      format: int32
                      type: integer
                  required:
                  - Port
                  type: object
              type: object
            images:
              description: List of container images on this node
              items:
                description: Describe a container image
                properties:
                  names:
                    description: Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7",
                      "dockerhub.io/google_containers/hyperkube:v1.0.7"]
                    items:
                      type: string
                    type: array
                  sizeBytes:
                    description: The size of the image in bytes.
                    format: int64
                    type: integer
                required:
                - names
                type: object
              type: array
            nodeInfo:
              description: 'Set of ids/uuids to uniquely identify the node. More info:
                https://kubernetes.io/docs/concepts/nodes/node/#info'
              properties:
                architecture:
                  description: The Architecture reported by the node
                  type: string
                bootID:
                  description: Boot ID reported by the node.
                  type: string
                containerRuntimeVersion:
                  description: ContainerRuntime Version reported by the node through
                    runtime remote API (e.g. docker://1.5.0).
                  type: string
                kernelVersion:
                  description: Kernel Version reported by the node from 'uname -r'
                    (e.g. 3.16.0-0.bpo.4-amd64).
                  type: string
                kubeProxyVersion:
                  description: KubeProxy Version reported by the node.
                  type: string
                kubeletVersion:
                  description: Kubelet Version reported by the node.
                  type: string
                machineID:
                  description: 'MachineID reported by the node. For unique machine
                    identification in the cluster this field is preferred. Learn more
                    from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html'
                  type: string
                operatingSystem:
                  description: The Operating System reported by the node
                  type: string
                osImage:
                  description: OS Image reported by the node from /etc/os-release
                    (e.g. Debian GNU/Linux 7 (wheezy)).
                  type: string
                systemUUID:
                  description: SystemUUID reported by the node. For unique machine
                    identification MachineID is preferred. This field is specific
                    to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
                  type: string
              required:
              - architecture
              - bootID
              - containerRuntimeVersion
              - kernelVersion
              - kubeProxyVersion
              - kubeletVersion
              - machineID
              - operatingSystem
              - osImage
              - systemUUID
              type: object
            phase:
              description: 'NodePhase is the recently observed lifecycle phase of
                the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase
                The field is never populated, and now is deprecated.'
              type: string
            volumesAttached:
              description: List of volumes that are attached to the node.
              items:
                description: AttachedVolume describes a volume attached to a node
                properties:
                  devicePath:
                    description: DevicePath represents the device path where the volume
                      should be available
                    type: string
                  name:
                    description: Name of the attached volume
                    type: string
                required:
                - devicePath
                - name
                type: object
              type: array
            volumesInUse:
              description: List of attachable volumes in use (mounted) by the node.
              items:
                type: string
              type: array
          type: object
      type: object
