// Package resourceclasses Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// admin.yaml
// config.yaml
// datastore.yaml
// helm2.yaml
// helm3.yaml
// kubernetes.yaml
// monitoring.yaml
// networking.yaml
// security.yaml
// storage.yaml
// workloads.yaml
package resourceclasses

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x6b\xdb\x40\x10\xc5\xef\xfa\x14\x83\xaf\xc5\x52\x7d\x33\x7b\x2b\xee\xa5\x50\x0a\x75\x4b\xef\xd3\xd5\x20\x0d\xde\x7f\x9e\xd9\x55\x9b\x7c\xfa\x20\x45\xeb\x90\x84\x10\x62\xf0\xed\x69\x79\xfb\x7b\xb3\xa3\x87\x89\xff\x90\x28\xc7\x60\xc0\x53\xc6\x16\x53\x52\x1b\x7b\x6a\x6d\xf4\xdd\xb4\x43\x97\x46\xdc\x35\x27\x0e\xbd\x81\x23\x69\x2c\x62\xe9\xe0\x50\xb5\x99\xed\x3d\x66\x34\x0d\x80\x15\xc2\xcc\x31\xfc\x66\x4f\x9a\xd1\x27\x03\xa1\x38\xd7\x00\x04\xf4\x64\xe0\x4b\xef\x39\x34\x9a\xc8\xce\x6e\x0a\x59\x98\x74\x96\xdb\xd5\xf0\x03\x3d\x69\x42\x4b\xda\x00\x00\x08\x9d\x0b\x0b\xf5\x06\xb2\x14\x5a\x8e\xf2\x5d\x22\xb3\x28\x80\x41\x62\x49\x5a\xbf\xb6\xb0\xd9\xac\x52\xd6\x09\xcd\x82\xbd\x00\x6b\xca\x77\xf6\x9c\xe1\x88\x61\x58\x73\x3e\x08\x75\xf3\x7d\xa9\xd7\x2b\xb5\xae\x05\x7e\x96\x98\xf1\x2a\x70\x55\xe7\x4a\xa8\xec\x83\x2b\x9a\x49\xe0\x18\xdd\x75\xab\x91\xbf\x68\x5b\x2c\x79\x8c\xc2\xf7\xcb\x3f\x6a\x4f\x7b\x6d\x39\xbe\x9a\xc1\x3e\x46\xc9\x9a\x74\x79\xdd\xed\x93\x5f\x46\x1e\x7e\x7d\x83\xaf\xc2\x13\xc9\xfb\xcb\xd4\x1c\x05\x07\x7a\xf3\x51\xca\xfd\x85\xc4\x36\x86\xb5\x75\x2a\xd6\xc0\x98\x73\x52\xd3\x75\xb6\x0f\xcf\x7b\x7f\xda\x6b\xb7\x98\xbb\x4a\xb2\x73\xe5\x49\x3b\x9c\x8b\xdc\xea\x34\x3c\x0d\x06\xec\x71\xa0\x4e\xa7\xe1\xd3\x7f\xef\x6e\x44\x4f\x61\x3e\xfb\x47\x3c\x8c\xd9\xc0\xee\x73\xf3\x10\x00\x00\xff\xff\xf6\x60\xd7\x8b\xb9\x03\x00\x00")

func adminYamlBytes() ([]byte, error) {
	return bindataRead(
		_adminYaml,
		"admin.yaml",
	)
}

func adminYaml() (*asset, error) {
	bytes, err := adminYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin.yaml", size: 953, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xbd\x4e\xc3\x40\x10\x84\xfb\x7b\x8a\x55\x5a\x14\x9f\xd2\x20\x74\x6d\x6a\x1a\x40\xf4\xab\xf3\x72\x5e\xc5\xf7\xc3\xee\xda\xc0\xdb\x23\x3b\x36\x28\x7d\xba\xb9\xd3\xe8\x9b\xd9\xc1\xc6\xef\x24\xca\xb5\x04\xc8\x64\xd8\x61\x6b\x1a\x6b\x4f\x5d\xac\xd9\xcf\x27\x1c\xdb\x80\x27\x77\xe1\xd2\x07\x78\x21\xad\x93\x44\x3a\x8f\xa8\xea\x16\x7b\x8f\x86\xc1\x01\x44\x21\x34\xae\xe5\x8d\x33\xa9\x61\x6e\x01\xca\x34\x8e\x0e\xa0\x60\xa6\x00\xe7\x5a\x3e\x38\x39\x6d\x14\x17\x3b\x15\x13\x26\x5d\xe4\xf1\xc6\x01\xcf\xd8\xd4\x01\x00\x08\x7d\x4e\x2c\xd4\x07\x30\x99\x68\xfd\xb2\x9f\x46\x61\x55\x00\x49\xea\xd4\x74\x7f\x1d\xe1\x70\xd8\xa4\x6c\x1d\x03\xc4\x95\x98\xaf\xc0\x3d\xe6\x95\xa2\x90\xdd\x2b\x42\xff\x68\x1c\x6b\xd9\xee\x51\x89\x01\x06\xb3\xa6\xc1\xfb\xd8\x97\xdb\x49\x2f\x4f\xea\x57\xb3\xdf\x31\x71\x59\x93\xd4\x5f\xfb\x76\x3a\xa7\xff\x2a\xc0\x19\x13\x79\x9d\xd3\xc3\x77\x5e\xe6\xfc\x22\x4e\x83\x05\x78\x74\xbf\x01\x00\x00\xff\xff\xd5\x24\x64\x71\xba\x01\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 442, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datastoreYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\xcd\x4e\x03\x31\x0c\x84\xef\x79\x8a\xb9\xa3\x36\xaa\xc4\x01\xe5\x0a\x88\x3b\x42\xdc\xdd\xc4\xda\xb5\xba\xf9\x21\xf6\x16\x78\x7b\x94\xfe\x08\xfa\x00\xdc\x12\x6b\x66\x3e\x7b\xa8\xc9\x3b\x77\x95\x5a\x02\x32\x1b\x6d\xa9\x35\x8d\x35\xf1\x36\xd6\xec\x8f\x3b\x5a\xda\x4c\x3b\x77\x90\x92\x02\x5e\x59\xeb\xda\x23\x3f\x2e\xa4\xea\x86\x3c\x91\x51\x70\x40\xec\x4c\x26\xb5\xbc\x49\x66\x35\xca\x2d\xa0\xac\xcb\xe2\x80\x42\x99\x03\x9e\xc8\x48\xad\x76\x76\xda\x38\x0e\x07\x35\x79\xe9\x75\x6d\x01\x87\x75\xcf\x69\x3f\x78\x0e\xe0\x62\x5d\x58\x87\x62\x73\xf1\x3e\x2f\xa4\x26\x51\x99\x7a\x9c\x1d\x00\x74\xfe\x58\xa5\x73\x0a\xb0\xbe\xf2\x69\x64\xdf\x8d\xc3\xe9\x05\x4c\x23\x57\xaf\xbf\xcd\x2d\xe0\xec\x3f\xdf\x11\xc0\x7f\xb3\x59\x1d\x20\xb1\x96\x0b\x5e\x7b\x0c\x98\xcd\x9a\x06\xef\x63\x2a\xb7\xdd\x1c\x1e\xd4\x9f\xc4\xfe\x1a\x17\x47\x2d\xac\x3e\x5d\x8f\xdd\xea\x71\xfa\xdd\x0e\x92\x69\x62\xaf\xc7\xe9\xee\x2b\x2f\xff\x48\x68\x65\xcc\x3e\x59\xa6\xd9\x02\xee\xdd\x4f\x00\x00\x00\xff\xff\x10\xd3\x7a\x39\xe4\x01\x00\x00")

func datastoreYamlBytes() ([]byte, error) {
	return bindataRead(
		_datastoreYaml,
		"datastore.yaml",
	)
}

func datastoreYaml() (*asset, error) {
	bytes, err := datastoreYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datastore.yaml", size: 484, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _helm2Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8f\x3d\x6b\x03\x31\x0c\x86\x77\xff\x0a\xed\xa5\x67\x92\x2e\x45\x6b\x97\xce\xa1\x74\x17\x3e\x71\x36\xf1\x87\xb0\x94\x6b\xfb\xef\x8b\xef\xda\x40\xa1\x53\x20\x9b\x24\xbf\xbc\x7e\x1e\x92\xf4\xce\x5d\x53\xab\x08\x85\x8d\x26\x12\xd1\xd0\x66\x9e\x42\x2b\x7e\x3d\x50\x96\x48\x07\x77\x4e\x75\x46\x38\xb1\xb6\x4b\x0f\xfc\x92\x49\xd5\x8d\xf8\x4c\x46\xe8\x00\x42\x67\xb2\xd4\xea\x5b\x2a\xac\x46\x45\x10\xea\x25\x67\x07\x50\xa9\x30\xc2\x2b\xe7\x02\x47\xa7\xc2\x61\xc4\xb9\x5a\x4f\xac\x63\x7c\x84\x14\x5a\xdd\xc6\xb1\x68\x0f\x08\xd1\x4c\x14\xbd\x0f\x73\xfd\xcb\x73\x7e\x56\xbf\xc5\x7d\xff\x41\x09\x03\x85\xc7\x9e\x99\x94\x27\x5d\x97\xad\x09\xc0\xbe\x84\x11\x52\xa1\x85\xbd\xae\xcb\xc3\x67\xc9\x77\xfd\x43\xea\x7e\xdd\x85\x4f\x7b\x56\xb7\x93\x90\x45\x04\x1f\x39\x17\xbf\x1e\x7f\x7b\xc6\xdb\xd5\xfd\x76\xaa\xd1\x7a\x45\xfa\x5f\xfa\x0e\xe5\xbb\xed\x07\xa7\x25\x1a\xc2\x93\xfb\x0e\x00\x00\xff\xff\xb0\xfa\xae\x30\x48\x02\x00\x00")

func helm2YamlBytes() ([]byte, error) {
	return bindataRead(
		_helm2Yaml,
		"helm2.yaml",
	)
}

func helm2Yaml() (*asset, error) {
	bytes, err := helm2YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "helm2.yaml", size: 584, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _helm3Yaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8f\x4d\x4b\x04\x31\x0c\x86\xef\xfd\x15\xb9\x8b\x53\x96\xb9\x48\xae\x5e\x3c\x2f\xe2\x3d\x74\xc2\xb4\x6c\x3f\x42\x93\x1d\xf5\xdf\x4b\x67\x74\x41\xf0\x24\xec\x2d\x49\x5f\xde\x3e\x0f\x49\x7a\xe3\xae\xa9\x55\x84\xc2\x46\x13\x89\x68\x68\x0b\x4f\xa1\x15\xbf\x9d\x28\x4b\xa4\x93\xbb\xa4\xba\x20\x9c\x59\xdb\xb5\x07\x7e\xce\xa4\xea\x46\x7c\x21\x23\x74\x00\xa1\x33\x59\x6a\xf5\x35\x15\x56\xa3\x22\x08\xf5\x9a\xb3\x03\xa8\x54\x18\xe1\x85\x73\x81\xd9\xa9\x70\x18\x71\xae\xd6\x13\xeb\x18\x1f\x21\x85\x56\xf7\x71\x2c\xda\x03\x42\x34\x13\x45\xef\xc3\x52\x7f\xf3\x5c\x9e\xd4\xef\x71\xdf\xbf\x51\xc2\x40\xe1\xb1\x67\x26\xe5\x49\xb7\x75\x6f\x02\xb0\x4f\x61\x84\x54\x68\x65\xaf\xdb\xfa\xf0\x51\xf2\x5d\xff\x90\x7a\x5c\x0f\xe1\xf3\x91\xd5\xfd\x24\x64\x11\xc1\x47\xce\xc5\x6f\xf3\x4f\xcf\x78\xbb\xb9\xff\x9f\x6a\xb4\xde\x90\xfe\x96\xbe\x43\xf9\x61\xfb\xce\x69\x8d\x86\x30\xbb\xaf\x00\x00\x00\xff\xff\xb7\xcb\x21\x40\x48\x02\x00\x00")

func helm3YamlBytes() ([]byte, error) {
	return bindataRead(
		_helm3Yaml,
		"helm3.yaml",
	)
}

func helm3Yaml() (*asset, error) {
	bytes, err := helm3YamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "helm3.yaml", size: 584, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\xcd\x4e\xf3\x40\x0c\xbc\xe7\x29\x7c\xff\xd4\xac\x7a\xab\xf6\xf8\x71\x44\x5c\x00\x71\x77\x37\x56\x62\x25\xfb\x83\xed\x2d\xe5\xed\x51\x92\xb6\xa8\xd0\x13\x12\xe2\xe6\x71\x26\x3b\x33\xf2\x60\xe1\x17\x12\xe5\x9c\x3c\x44\x32\x6c\xb1\x14\x0d\xb9\xa3\x36\xe4\xe8\x0e\x5b\x9c\xca\x80\xdb\x66\xe4\xd4\x79\x78\x24\xcd\x55\x02\xdd\x4d\xa8\xda\xcc\xf4\x0e\x0d\x7d\x03\x10\x84\xd0\x38\xa7\x67\x8e\xa4\x86\xb1\x78\x48\x75\x9a\x1a\x80\x84\x91\x3c\xdc\xd7\x3d\x49\x22\x23\x6d\xb4\x50\x98\x7f\xa1\x64\xc2\xa4\xf3\xb8\x01\x0e\x39\x2d\xe3\x0c\x54\x82\x87\xc1\xac\xa8\x77\x2e\x74\xe9\xda\xd3\xb8\x53\xb7\xd0\x9d\x9c\xec\x84\xd9\x0e\xa9\xdb\xa3\x72\x68\xf5\xd0\x2f\xef\x00\xd8\x7b\x21\x0f\x1c\xb1\x27\xa7\x87\xfe\xdf\x31\x4e\xbf\xa8\x50\xd2\xba\x5d\x03\xff\x9f\x99\x0b\x2e\x68\x83\x07\xb7\xcc\x42\xaf\x95\x85\x3a\x0f\x26\x95\x96\xe4\x2b\xfd\x01\xc3\xc0\x89\xf4\x36\xeb\x24\x74\x12\xed\x25\xd7\xa2\x67\xb4\x81\x30\x55\x35\x92\xf6\xb8\x19\x77\xda\x72\xfe\xf6\xe1\x6a\x7d\x8e\xe4\x21\x7e\x6a\x7e\xb1\x01\x4f\x64\x7f\x62\x65\x95\xbd\x94\xe1\xe7\x87\x1a\x2f\x7d\xbb\x5c\xeb\x76\x1b\xde\x88\xfb\xc1\x3c\x6c\x9b\x8f\x00\x00\x00\xff\xff\xfa\xaf\x87\xd3\x0a\x03\x00\x00")

func kubernetesYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesYaml,
		"kubernetes.yaml",
	)
}

func kubernetesYaml() (*asset, error) {
	bytes, err := kubernetesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes.yaml", size: 778, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _monitoringYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\xbf\x4e\x03\x31\x0c\x87\xf7\x3c\x85\x77\xd4\x46\xdd\xaa\xac\x0c\x4c\x48\x08\x21\x76\x2b\x67\xdd\x59\xbd\x24\xc6\x76\x0a\xbc\x3d\x4a\xff\x01\x03\x23\x5b\xe2\xfc\xf2\x7d\xb6\x51\xf8\x95\xd4\xb8\xd5\x04\x85\x1c\xb7\x28\x62\xb9\x4d\xb4\xcd\xad\xc4\xe3\x0e\x57\x59\x70\x17\x0e\x5c\xa7\x04\xcf\x64\xad\x6b\xa6\xfb\x15\xcd\xc2\x88\x4f\xe8\x98\x02\x40\x56\x42\xe7\x56\x5f\xb8\x90\x39\x16\x49\x50\xfb\xba\x06\x80\x8a\x85\x12\x3c\xb6\xca\xde\x94\xeb\x1c\x4c\x28\x8f\x2f\x28\xfc\xa0\xad\x4b\x82\x72\x7b\xdc\xe6\xa6\xd4\x6c\xb8\x03\x00\x55\x57\x26\x1b\xe1\xcd\x85\xf3\xa4\xad\x90\x2f\xd4\x2d\x00\x00\x28\xbd\x75\x56\x9a\x12\xb8\x76\x3a\x95\xfc\x53\x28\x9d\x4e\x00\xf3\xe0\xdb\xf5\xb6\xf9\x53\x74\x46\x9d\x67\x4b\x20\x37\x07\x0d\x0b\xe7\x56\x2f\x3d\x98\xe6\x04\x8b\xbb\x58\x8a\x31\x4f\xf5\xf7\xb2\x0e\x7b\x8b\xa7\x70\xbc\xb2\xf2\xd8\x13\x59\xfc\xe1\xb5\xe3\xfc\xdd\x26\x70\xc1\x99\xa2\x1d\xe7\xbb\x8f\xb2\xfe\xa7\x42\xea\xa8\xbd\x13\xcf\x8b\x27\xd8\x87\xaf\x00\x00\x00\xff\xff\x64\x82\x9e\xc2\xf7\x01\x00\x00")

func monitoringYamlBytes() ([]byte, error) {
	return bindataRead(
		_monitoringYaml,
		"monitoring.yaml",
	)
}

func monitoringYaml() (*asset, error) {
	bytes, err := monitoringYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "monitoring.yaml", size: 503, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _networkingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4d\x4f\xc3\x30\x0c\x86\xef\xf9\x15\xd6\x0e\x5c\xd0\x1a\xed\x80\x34\xe5\x0a\x17\x2e\x08\x01\xda\x3d\x4a\xad\xcc\x6a\xf3\x81\x9d\x76\xdb\xbf\x47\xdd\x5a\xba\x8a\x0b\xe2\xe3\xe6\x38\x6f\xfc\xbc\xb1\x6d\x33\xed\x90\x85\x52\x34\x10\xb0\xd8\xca\xe6\x2c\x2e\xd5\x58\xb9\x14\x74\xbf\xb1\x6d\xde\xdb\x8d\x6a\x28\xd6\x06\x5e\x50\x52\xc7\x0e\xef\x5b\x2b\xa2\x06\x79\x6d\x8b\x35\x0a\xc0\x31\xda\x42\x29\xbe\x51\x40\x29\x36\x64\x03\xb1\x6b\x5b\x05\x10\x6d\x40\x03\xaf\xc8\x3d\x39\x84\x1b\x78\x20\x71\xa9\x47\x3e\x29\xc9\xe8\x86\xb7\x18\x0b\x13\xca\x10\xae\x97\x72\x51\x00\x00\x8c\xef\x1d\x31\xd6\x06\x0a\x77\x78\x4e\x95\x53\x46\x73\x8e\x00\x3c\xa7\x2e\xcb\x74\x5a\xc3\x6a\x35\x86\x3c\xba\x35\x20\x73\xb9\x89\xf0\x18\x3d\xa3\xc8\xcf\x10\x11\xcb\x21\x71\x43\xd1\x57\xcd\x56\x2a\x4a\x9f\x37\x78\x2c\x18\x87\x6e\xca\x17\x13\x74\x45\x9c\x5c\xec\xd2\xc9\x7a\xe4\xdf\xb9\xe9\x2f\x45\x16\x93\xfb\x16\xfd\xe9\xf2\x0d\x78\x4e\x2d\x39\xfa\xdb\x56\xcc\xe4\x51\x91\x67\x08\xb9\x14\xc7\x71\x0b\x3b\x03\xfb\x52\xb2\x18\xad\x5d\x1d\x97\xeb\xd7\x6c\x45\x9f\xc5\x7a\x2a\xe7\x86\xcd\x43\xd1\x57\x58\xe9\xfd\xec\x12\x28\x58\x8f\x5a\x7a\x7f\x7b\x0c\xed\x7f\x22\x72\x1c\x72\x07\x24\xbf\x2f\x06\xee\xd4\x47\x00\x00\x00\xff\xff\x96\x8a\x44\x4a\x49\x03\x00\x00")

func networkingYamlBytes() ([]byte, error) {
	return bindataRead(
		_networkingYaml,
		"networking.yaml",
	)
}

func networkingYaml() (*asset, error) {
	bytes, err := networkingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "networking.yaml", size: 841, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _securityYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\xcf\x4e\x33\x31\x0c\xc4\xef\x79\x0a\xab\xd7\x4f\x6d\xd4\xdb\x47\x6e\xa8\x2f\x80\x00\x71\xb7\xbc\x66\x6b\x75\xf3\x87\xd8\x59\xd8\xb7\x47\xbb\x6d\x29\x55\x4f\x20\x71\x4b\xac\xf1\xfc\x46\x63\x2c\xf2\xc2\x55\x25\xa7\x00\x91\x0d\x37\x58\x8a\x52\xee\x78\x43\x39\xfa\x71\x8b\x43\xd9\xe3\xd6\x1d\x24\x75\x01\x1e\x59\x73\xab\xc4\xbb\x01\x55\xdd\x2c\xef\xd0\x30\x38\x00\xaa\x8c\x26\x39\x3d\x4b\x64\x35\x8c\x25\x40\x6a\xc3\xe0\x00\x12\x46\x0e\xf0\xc4\xd4\xaa\xd8\xe4\xb4\x30\xcd\x0b\x9c\xac\x0a\xeb\xfc\x5c\x9f\x34\x0f\x79\x10\x9a\x1c\x00\x40\xe5\xb7\x26\x95\xbb\x00\x56\x1b\x2f\x23\x9b\x0a\x87\xe5\x05\xd0\xd7\xdc\x8a\x9e\x7f\x6b\x28\x97\xcd\x79\xf7\x18\x32\x40\xc9\x9d\x9e\xb8\x8b\x42\x58\xbf\xe1\x76\x5c\x4d\x5e\x85\xd0\x96\xf1\x8f\xa1\x63\x9e\xb0\xe7\x7a\x55\xd8\x4d\x04\xba\x86\xac\xbf\xea\xa8\xa3\x10\xc3\x3d\x51\x6e\xc9\x7e\xc5\x5f\xad\x6e\x68\x7a\xb4\xc5\x8b\xab\x50\x4e\xa7\x92\xb5\x52\x80\xbd\x59\xd1\xe0\x3d\x75\xe9\xfa\xd2\x87\xff\xea\x17\xb1\x3f\xdb\xd1\x7c\x64\x56\x7f\xae\x70\xa3\x63\x7f\x09\x05\x12\xb1\x67\xaf\x63\xff\xef\x23\x0e\x7f\x07\x28\x69\x9e\xbd\xb3\xf4\x7b\x0b\x70\xe7\x3e\x03\x00\x00\xff\xff\xa9\x07\x6f\x3b\xb0\x02\x00\x00")

func securityYamlBytes() ([]byte, error) {
	return bindataRead(
		_securityYaml,
		"security.yaml",
	)
}

func securityYaml() (*asset, error) {
	bytes, err := securityYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "security.yaml", size: 688, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\xcf\x4e\xc3\x30\x0c\xc6\xef\x79\x0a\x6b\x57\xb4\x46\x3b\x31\xe5\xba\x17\x40\x80\x76\xb7\x52\xab\xb3\x9a\x7f\xc4\x6e\x81\xb7\x47\x2d\xe9\x00\x21\x2e\x48\xbb\xb9\xee\xa7\xdf\xcf\xfa\x82\x85\xcf\x54\x85\x73\x72\x10\x49\xb1\xc3\x52\xc4\xe7\x9e\x3a\x9f\xa3\x9d\x0f\x18\xca\x05\x0f\x66\xe4\xd4\x3b\x78\x24\xc9\x53\xf5\x74\x0a\x28\x62\x96\x78\x8f\x8a\xce\x00\xf8\x4a\xa8\x9c\xd3\x33\x47\x12\xc5\x58\x1c\xa4\x29\x04\x03\x90\x30\x92\x83\x27\xcd\x15\x07\x32\x52\xc8\x2f\x79\x4a\x5a\x99\x64\x19\xf7\x2d\xf2\xb0\x9c\x21\x4a\x49\xe1\x9c\xc3\x14\x09\x4e\x01\x39\x8a\x01\x00\xa8\xf4\x32\x71\xa5\xde\x81\xd6\x89\xd6\x95\xbe\x17\x72\xeb\x04\x30\xd4\x3c\x15\xd9\xbe\xf6\xb0\xdb\xb5\xb1\xb6\x8b\x1d\x94\x2b\x7e\x5e\xe9\x7e\x83\xff\xe1\x0f\x91\x6e\xa5\xfe\x6e\x6d\xc5\xc0\x5a\xe9\xff\x8c\xf2\x89\xe8\xc6\xa3\x74\x9c\x7f\xd9\xdb\x6f\x7f\x15\xb0\xcf\xa9\x35\x2f\xd5\x3b\xb8\xa8\x16\x71\xd6\xfa\x3e\xfd\x7c\xfd\xf1\x28\x76\x0d\xdb\x8d\xd6\x20\x76\x53\xca\x3c\x7c\x9d\x07\x1c\x71\x20\x2b\xf3\x70\xf7\x16\xc3\xcd\xf8\x25\x2d\xbb\x57\xe2\xe1\xa2\x0e\xee\xcd\x47\x00\x00\x00\xff\xff\x15\x00\x4f\xe8\xc2\x02\x00\x00")

func storageYamlBytes() ([]byte, error) {
	return bindataRead(
		_storageYaml,
		"storage.yaml",
	)
}

func storageYaml() (*asset, error) {
	bytes, err := storageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storage.yaml", size: 706, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workloadsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\xc1\xee\xd3\x30\x0c\x87\xef\x7d\x0a\xeb\x7f\x45\x5b\x35\x4e\x28\xd7\xed\xc4\x09\x6d\x08\xce\x5e\x62\xda\xb0\x24\x0e\x76\xba\xb1\xb7\x47\xe9\x5a\x4d\x1b\x70\x60\x2a\xb7\xc4\x72\xbf\xcf\x6e\xf4\xc3\xec\xbf\x90\xa8\xe7\x64\x20\x52\xc1\x35\xe6\xac\x96\x1d\xad\x2d\xc7\xf6\xbc\xc1\x90\x7b\xdc\x34\x27\x9f\x9c\x81\x3d\x29\x0f\x62\x69\x1b\x50\xb5\xa9\xed\x0e\x0b\x9a\x06\xc0\x0a\x61\xf1\x9c\x3e\xfb\x48\x5a\x30\x66\x03\x69\x08\xa1\x01\x48\x18\xc9\xc0\x57\x96\x53\x60\x74\xda\x68\x26\x5b\xbf\xa0\x54\xc4\x93\xd6\xe3\x6a\x6a\xda\x51\x0e\x7c\x8d\x94\x8a\x36\x00\x00\x42\x3f\x06\x2f\xe4\x0c\x14\x19\x68\x2c\x95\x6b\x26\x33\x9e\x00\x3a\xe1\x21\xeb\x7c\x5b\x41\x9d\x7c\xba\xc8\x34\xa8\x01\xf7\xc0\x9c\x4d\x7b\xca\xc1\x5b\x84\x03\x2d\xa8\x92\x1b\x54\xe9\x4f\xaa\xfa\x73\x60\xcb\xa9\x08\x87\x40\xf2\x92\xf5\xed\xed\x6f\xce\x4a\xb7\x0f\xf0\x59\x7f\x28\x58\xe8\xdb\x10\x96\x5d\x55\x27\xea\xd3\xae\x3b\xa4\xc8\x69\x59\x95\x1b\x99\x4f\xa2\x8f\x7c\x7c\xc9\x70\xc4\x62\xfb\xdf\x14\xdf\x6f\xb4\x19\xbe\x15\x4e\x77\xc3\xbf\xe3\xac\x70\x7a\x42\x7e\x62\xb7\xd4\x8b\xe7\x1b\xca\x5b\x4e\x53\x78\x54\xac\x81\xbe\x94\xac\xa6\x6d\xad\x4b\x8f\x11\x3e\x7d\xd0\x76\x6c\x6e\x67\x86\xad\xe9\x25\x6d\x2f\x73\x26\xd7\x7a\xee\xee\xa3\x80\x8f\xd8\x51\xab\xe7\xee\xdd\xcf\x18\xfe\xa3\x21\xa7\x5a\xbb\x90\xef\xfa\x62\xe0\x7d\xf3\x2b\x00\x00\xff\xff\x13\x5e\xc4\x84\x8b\x04\x00\x00")

func workloadsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workloadsYaml,
		"workloads.yaml",
	)
}

func workloadsYaml() (*asset, error) {
	bytes, err := workloadsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workloads.yaml", size: 1163, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin.yaml":      adminYaml,
	"config.yaml":     configYaml,
	"datastore.yaml":  datastoreYaml,
	"helm2.yaml":      helm2Yaml,
	"helm3.yaml":      helm3Yaml,
	"kubernetes.yaml": kubernetesYaml,
	"monitoring.yaml": monitoringYaml,
	"networking.yaml": networkingYaml,
	"security.yaml":   securityYaml,
	"storage.yaml":    storageYaml,
	"workloads.yaml":  workloadsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"admin.yaml":      {adminYaml, map[string]*bintree{}},
	"config.yaml":     {configYaml, map[string]*bintree{}},
	"datastore.yaml":  {datastoreYaml, map[string]*bintree{}},
	"helm2.yaml":      {helm2Yaml, map[string]*bintree{}},
	"helm3.yaml":      {helm3Yaml, map[string]*bintree{}},
	"kubernetes.yaml": {kubernetesYaml, map[string]*bintree{}},
	"monitoring.yaml": {monitoringYaml, map[string]*bintree{}},
	"networking.yaml": {networkingYaml, map[string]*bintree{}},
	"security.yaml":   {securityYaml, map[string]*bintree{}},
	"storage.yaml":    {storageYaml, map[string]*bintree{}},
	"workloads.yaml":  {workloadsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
