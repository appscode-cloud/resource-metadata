// Package resourceclasses Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// admin.yaml
// config.yaml
// extra/admissionregistration.yaml
// extra/apiextension.yaml
// extra/apiregistration.yaml
// extra/authentication.yaml
// extra/authorization.yaml
// extra/autoscaling.yaml
// extra/certificate.yaml
// extra/coordination.yaml
// extra/core.yaml
// extra/event.yaml
// extra/example.yaml
// extra/extension.yaml
// extra/node.yaml
// extra/scheduling.yaml
// networking.yaml
// security.yaml
// storage.yaml
// workloads.yaml
package resourceclasses

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xcb\xca\xdb\x40\x0c\x85\xf7\x7e\x0a\x91\x6d\xa9\x4d\x16\x85\x30\xbb\x92\x6e\x0a\xa5\xd0\x14\xba\x57\x66\x54\x5b\xc4\x73\x89\x34\x76\x2f\x4f\x5f\x26\xb1\xe3\x84\xe2\x36\xa5\xff\x4e\x96\x8e\x75\xbe\x39\x20\x4c\xfc\x85\x44\x39\x06\x03\x9e\x32\xd6\x98\x92\xda\xe8\xa8\xb6\xd1\x37\xe3\x16\xfb\xd4\xe1\xb6\x3a\x71\x70\x06\x0e\xa4\x71\x10\x4b\xfb\x1e\x55\xab\x22\x77\x98\xd1\x54\x00\x01\x3d\x19\x78\xeb\x3c\x87\x4a\x13\xd9\xd2\xa3\x90\x85\x49\x4b\xf9\x7a\x12\x7c\x44\x4f\x9a\xd0\x92\x56\x00\x00\x42\xe7\x81\x85\x9c\x81\x2c\x03\x5d\x5a\x61\x56\x38\x03\x5f\xb1\xd7\x6b\x37\xff\x48\x64\x2e\x15\x40\x2b\x71\x48\x06\x36\x9b\xe9\x5b\x26\x28\xb3\xfc\xab\xd3\x68\x9c\x5f\x36\x6e\xef\x20\x3e\xb0\xe7\x0c\x07\x0c\xed\x24\xbc\xf7\xbc\x81\x3c\x67\xd9\x97\x5d\xb2\xac\x5a\xf3\x9c\x93\x83\x4f\x43\xcc\xf8\xdf\xb6\x73\x75\x5e\xb6\xad\x39\xef\xfb\x41\x33\x09\x1c\x62\xff\x02\xa9\xcb\x11\x6d\x8d\x43\xee\xa2\xf0\x4f\xcc\x1c\x43\x7d\xda\x69\xcd\xf1\x37\x44\x7b\xf5\x95\x9b\xed\x6a\x34\xcf\x82\xfd\x29\xa3\xe7\xb9\xfe\x0e\xb4\xff\xfc\x1e\xde\x09\x97\xe1\x3f\x31\x68\x8e\x82\x2d\xad\x06\xa2\xec\xee\xb6\x3e\xb8\x1f\x29\x63\x41\x60\x1b\xc3\x74\x30\x2a\xd6\x40\x97\x73\x52\xd3\x34\xd6\x85\xc7\xc3\x3c\xed\xb4\xb9\x88\x9b\xd9\xc0\x96\x9b\x24\x6d\xb0\xdc\x60\xad\x63\xbb\x60\x02\x7b\x6c\xa9\xd1\xb1\x7d\xf5\xdd\xf7\x15\xc0\x37\xe2\xb6\xcb\x06\xde\x54\xbf\x02\x00\x00\xff\xff\xb8\x6b\xe0\xfc\xff\x03\x00\x00")

func adminYamlBytes() ([]byte, error) {
	return bindataRead(
		_adminYaml,
		"admin.yaml",
	)
}

func adminYaml() (*asset, error) {
	bytes, err := adminYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin.yaml", size: 1023, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x91\xbf\x4e\xf4\x30\x10\xc4\x7b\x3f\xc5\xe8\xda\x4f\x5f\xac\x74\xc8\xed\x15\x54\x34\x20\xd1\xaf\xec\xc5\xb1\x12\xff\xc1\xeb\xe4\xe0\xed\x51\x72\x44\x24\xf4\x74\xd6\x78\xfc\xdb\xf1\x2c\x95\xf0\xca\x55\x42\x4e\x06\x91\x1b\x75\x54\x8a\xd8\xec\xb8\xb3\x39\xea\xa5\xa7\xa9\x0c\xd4\xab\x31\x24\x67\xf0\xcc\x92\xe7\x6a\xf9\x3a\x91\x88\x5a\xed\x8e\x1a\x19\x05\x24\x8a\x6c\x70\xcd\xe9\x2d\x78\x25\x85\xed\x2a\x52\x09\x8f\x35\xcf\xc5\xe0\x72\x51\x00\xa7\x56\x03\xcb\x7a\xf3\xff\xf4\x00\x4f\x54\x44\x01\x40\xe5\xf7\x39\x54\x76\x06\xad\xce\xbc\x49\xab\x51\x0a\xd9\x93\xd8\x3e\x0b\x9b\xed\x04\xf8\xc3\x88\x3b\xe3\x1e\xd2\xc0\x6e\xf4\xb8\xc3\x81\x65\xff\xe9\xd2\x1f\x42\xbc\xb0\xad\xdc\xfe\x22\x80\x1c\xc8\xbf\xa7\x07\x9b\xd3\x77\x17\x52\xad\xc1\xd0\x5a\x11\xa3\xb5\x75\xe9\xbc\x83\xf1\x41\xf4\x66\xd6\x3b\xd8\xae\xf5\xb3\xe8\x5b\xae\xe3\x94\xc9\x49\x27\x8b\xff\x89\x85\x10\xc9\xb3\x96\xc5\xff\xfb\x88\x93\x02\x6e\x1c\xfc\xd0\x0c\x7a\xf5\x15\x00\x00\xff\xff\x01\x13\xb3\x1f\xee\x01\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 494, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAdmissionregistrationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x31\x4e\xc6\x30\x0c\x46\xf7\x9c\xc2\x17\xa0\xa8\x1b\xca\x86\x18\xd8\x11\x62\x37\x89\xe9\x6f\x35\x89\xad\xd8\x29\xe2\xf6\x28\x50\x36\x06\x90\xfe\x6f\xca\xf0\x9e\x9e\x62\x54\x7e\xa1\x6e\x2c\x2d\x42\x25\xc7\x05\x55\x2d\x49\xa6\x25\x49\xbd\x3d\x56\x2c\x7a\xc1\x35\xec\xdc\x72\x84\x27\x32\x19\x3d\xd1\x43\x41\xb3\x30\xf1\x8c\x8e\x31\x00\xa4\x4e\xe8\x2c\xed\x99\x2b\x99\x63\xd5\x08\x6d\x94\x12\x00\x1a\x56\x8a\x70\x9f\x2b\xdb\xac\x74\xda\xd8\xbc\x7f\xc1\xc1\x94\xd2\xb4\x51\xf9\xb1\xcb\xd0\x08\xf8\x1b\xb7\xec\x77\xb6\xb0\x04\x00\x6a\xde\x99\x6c\x3a\x37\xe0\x1f\x4a\xf3\x35\xb7\xfd\x49\x9f\xeb\xe7\x1f\x22\xd4\xe1\xe8\xdc\xb6\x77\x7a\xbd\x88\xec\x49\xda\x1b\x6f\xe3\xdb\xb1\x93\x3e\x7e\x6e\x73\xac\x57\x69\x1e\x58\x38\xff\xab\xfa\x19\x00\x00\xff\xff\xaf\x71\x68\x0c\xa1\x01\x00\x00")

func extraAdmissionregistrationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAdmissionregistrationYaml,
		"extra/admissionregistration.yaml",
	)
}

func extraAdmissionregistrationYaml() (*asset, error) {
	bytes, err := extraAdmissionregistrationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/admissionregistration.yaml", size: 417, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraApiextensionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4e\x04\x31\x0c\x44\xfb\x7c\x85\x7f\x80\x45\xdb\xa1\x74\x88\x82\x1e\x21\x7a\x2b\x6b\xc0\xba\xc4\xb6\x62\x67\x05\x7f\x8f\x2c\xdd\x51\xde\x54\x63\xf9\x8d\x3c\x46\xe3\x0f\x9a\xce\x2a\x15\x06\x05\x6e\x68\xe6\x4d\x0f\xda\x9a\x8e\xc7\x73\xc7\x6e\xdf\xb8\x97\x0b\xcb\x51\xe1\x8d\x5c\xd7\x6c\xf4\xd2\xd1\xbd\x24\x7e\x60\x60\x2d\x00\x6d\x12\x06\xab\xbc\xf3\x20\x0f\x1c\x56\x41\x56\xef\x05\x40\x70\x50\x85\x67\x63\xfa\x09\x92\x3c\x54\xdc\xa8\x65\x08\x8d\x5f\xa7\x2e\xab\xe9\xfe\xd7\xbe\x5d\x9e\x7c\x63\x2d\x00\x24\x31\x99\x3c\xd9\x07\x88\x5f\xa3\x74\xa9\xaf\xbb\xb1\xd4\xbc\x56\xad\xd0\x96\x87\x8e\xdb\x7c\xd0\x27\x0b\x67\x55\xbf\x92\xe7\xed\xfd\x73\x2f\x7f\x01\x00\x00\xff\xff\x4d\xf8\x37\xb5\x0e\x01\x00\x00")

func extraApiextensionYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraApiextensionYaml,
		"extra/apiextension.yaml",
	)
}

func extraApiextensionYaml() (*asset, error) {
	bytes, err := extraApiextensionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/apiextension.yaml", size: 270, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraApiregistrationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcf\xbd\xaa\xc3\x30\x0c\x05\xe0\xdd\x4f\xa1\x17\xb8\xbe\x64\x2b\xde\x4a\x87\xee\xa5\x74\x17\x8e\x48\x45\xfc\x23\x24\xc7\xd0\xb7\x2f\x0e\x29\x74\xeb\x99\x0e\xf8\x3b\x60\xa1\xf0\x83\xd4\xb8\x96\x00\x99\x1a\x7a\x14\xb1\x58\x67\xf2\xb1\xe6\xff\x3e\x61\x92\x27\x4e\x6e\xe5\x32\x07\xb8\x91\xd5\x4d\x23\x5d\x12\x9a\xb9\xc1\x67\x6c\x18\x1c\x40\x54\xc2\xc6\xb5\xdc\x39\x93\x35\xcc\x12\xa0\x6c\x29\x39\x80\x82\x99\x02\x9c\x85\x95\x16\xb6\xa6\x3b\x73\x26\x14\xc7\x0e\x85\xaf\x5a\x37\x09\xa3\x7d\x0b\xbf\x9e\xcc\x73\x75\x00\x54\x9a\x32\xd9\xd0\x7f\xd0\x5e\x42\xa3\x8d\x2c\x3f\x86\x23\x7a\xfc\x78\x67\x46\xda\x39\x92\x1d\x6f\xfd\x73\x77\x9f\xdc\x3b\x00\x00\xff\xff\x60\xe3\xcb\x32\x07\x01\x00\x00")

func extraApiregistrationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraApiregistrationYaml,
		"extra/apiregistration.yaml",
	)
}

func extraApiregistrationYaml() (*asset, error) {
	bytes, err := extraApiregistrationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/apiregistration.yaml", size: 263, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAuthenticationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\x31\x4a\x06\x41\x0c\x05\xe0\x7e\x4e\x91\x0b\xb8\xb2\x9d\x4c\x27\x16\xf6\x22\xf6\x61\xf6\xe1\x1f\x76\x67\x12\x26\xd9\x11\x6f\x2f\x23\x6b\x61\xf3\xbf\x2a\x90\xef\x41\xc2\x26\x1f\xe8\x2e\xda\x32\x55\x04\x2f\x6c\xe6\x45\x37\x2c\x45\xeb\xe3\x58\xf9\xb0\x1b\xaf\x69\x97\xb6\x65\x7a\x83\xeb\xd9\x0b\x5e\x0e\x76\x4f\x93\x6f\x1c\x9c\x13\x51\xe9\xe0\x10\x6d\xef\x52\xe1\xc1\xd5\x32\xb5\xf3\x38\x12\x51\xe3\x8a\x4c\xcf\x67\xdc\xd0\x42\xca\xaf\x4a\x6e\x28\xb3\xc6\x26\xaf\x5d\x4f\xcb\xc4\xff\xc0\xb2\x3f\xf9\x22\x9a\x88\xd0\xa2\x0b\x7c\xe2\x07\x8a\x6f\xc3\x9c\x66\x3e\xef\xf7\x66\xfa\x75\x6e\xa6\xd0\x1d\xad\x63\x08\xbe\xfc\x5a\x8e\xbf\xaf\xc7\x9a\x7e\x02\x00\x00\xff\xff\x56\x14\x4e\xeb\x05\x01\x00\x00")

func extraAuthenticationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAuthenticationYaml,
		"extra/authentication.yaml",
	)
}

func extraAuthenticationYaml() (*asset, error) {
	bytes, err := extraAuthenticationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/authentication.yaml", size: 261, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAuthorizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x8f\xbd\x4a\x44\x31\x10\x85\xfb\x3c\xc5\xbc\x80\x57\x6e\x27\xe9\xc4\xc2\x5e\xc4\x7e\xcc\x3d\xba\xe3\xe6\x67\x98\x49\xae\xe8\xd3\x4b\x64\x05\x2b\x11\xc4\x3d\x55\x20\xdf\xe1\x9b\xc3\x2a\x0f\x30\x97\x56\x23\x15\x74\x5e\x58\xd5\x53\xdb\xb0\xa4\x56\x2e\xf7\x95\xb3\x1e\x78\x0d\x47\xa9\x5b\xa4\x3b\x78\x1b\x96\x70\x93\xd9\x3d\x4c\x7c\xe3\xce\x31\x10\x25\x03\x77\x69\xf5\x5e\x0a\xbc\x73\xd1\x48\x75\xe4\x1c\x88\x2a\x17\x44\xba\x1e\xfd\xd0\x4c\xde\x3f\xa1\xe0\x8a\x34\x5b\xac\x72\x6b\x6d\x68\x24\xfe\xfe\xbf\x1c\xaf\x7c\x91\x16\x88\x50\xbb\x09\x7c\xb2\x17\xd4\xdf\x14\xf3\x35\xf3\xfc\x63\x6d\xc6\x4e\xb7\x46\xca\x2d\x71\xf6\xf1\xf8\x82\xd4\x39\x25\xb8\x1b\x76\xc1\xab\x9f\xc8\xfd\x6b\xff\xbe\xfe\xc9\xe3\xc8\x4f\xe7\xd5\xd8\xc8\xf8\x2f\xcb\xef\x86\x7c\x04\x00\x00\xff\xff\xbe\x98\x63\x2e\x3f\x02\x00\x00")

func extraAuthorizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAuthorizationYaml,
		"extra/authorization.yaml",
	)
}

func extraAuthorizationYaml() (*asset, error) {
	bytes, err := extraAuthorizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/authorization.yaml", size: 575, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAutoscalingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xb1\x4a\x84\x31\x0c\x07\xf0\xbd\x4f\x91\x17\xf0\xe4\x5b\xbb\x89\x83\xbb\x88\x7b\x68\xc3\x5d\xb0\x4d\x42\x92\x7e\xa0\x4f\x2f\x85\x3b\x70\xf0\x3f\x05\xf2\x0b\xe4\x8f\xc6\x9f\xe4\xc1\x2a\x15\x26\x25\x5e\xd0\x2c\x9a\x76\xba\x34\x9d\xcf\xe7\x81\xc3\x6e\x78\x94\x2f\x96\x5e\xe1\x9d\x42\x97\x37\x7a\x1d\x18\x51\x36\xef\x98\x58\x0b\x40\x73\xc2\x64\x95\x0f\x9e\x14\x89\xd3\x2a\xc8\x1a\xa3\x00\x08\x4e\xaa\xf0\xb2\x52\xa3\xe1\x60\xb9\x96\x30\x6a\xfb\x06\x8d\xdf\x5c\x97\x55\xc0\x3f\x5b\x00\x92\x74\xa6\xd8\xe4\x09\xf2\xdb\x68\x4f\x3b\xd7\xff\xf4\x8e\xdf\xff\xaa\x70\x53\xe7\x1f\x95\xc4\x61\xda\x1f\x90\x3c\xee\xf0\x7c\x54\x3d\x8f\xf2\x1b\x00\x00\xff\xff\xfb\xda\x55\x0a\xfa\x00\x00\x00")

func extraAutoscalingYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAutoscalingYaml,
		"extra/autoscaling.yaml",
	)
}

func extraAutoscalingYaml() (*asset, error) {
	bytes, err := extraAutoscalingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/autoscaling.yaml", size: 250, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraCertificateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\xb1\x4a\x04\x41\x0c\x06\xe0\x7e\x9e\x22\x2f\xe0\xca\x76\x32\xed\x15\xf6\x22\xf6\x71\xf6\x77\x0d\xb7\x33\x13\x93\xcc\x82\x6f\x2f\x03\x27\x62\x73\x7f\x15\xc8\xf7\x43\xc2\x2a\x6f\x30\x97\xde\x32\x55\x04\x2f\xac\xea\xa5\x6f\x58\x4a\xaf\x8f\xe7\xca\x87\x7e\xf2\x9a\xae\xd2\xb6\x4c\x2f\xf0\x3e\xac\xe0\x72\xb0\x7b\x9a\x7c\xe3\xe0\x9c\x88\x8a\x81\x43\x7a\x7b\x95\x0a\x0f\xae\x9a\xa9\x8d\xe3\x48\x44\x8d\x2b\x32\x5d\x60\x21\x1f\x52\x38\x90\x5c\x51\x66\x87\x55\x9e\xad\x0f\xcd\x54\xfe\xb6\xbe\x5c\x9f\x7c\x91\x9e\x88\xd0\xc2\x04\x3e\xe9\x03\xc5\xb7\x62\x4e\x33\xfb\xbd\xd6\x8c\xdd\xee\xfc\x6f\x64\x6f\xd2\x76\xc3\xd7\x80\x87\xdf\xe8\xf9\xfb\xfc\xb9\xbe\x23\x78\x4d\x3f\x01\x00\x00\xff\xff\x1f\xf5\x3f\xce\x11\x01\x00\x00")

func extraCertificateYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraCertificateYaml,
		"extra/certificate.yaml",
	)
}

func extraCertificateYaml() (*asset, error) {
	bytes, err := extraCertificateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/certificate.yaml", size: 273, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraCoordinationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x31\x8a\x03\x31\x0c\x45\x7b\x9f\x42\x17\x58\x2f\xd3\x2d\x6e\xa7\xd8\x7e\x59\xd2\x0b\x5b\x24\x62\x6c\x4b\x48\x9e\x81\xdc\x3e\x38\x4c\x20\x55\x7e\x25\xa4\xf7\x40\x1f\x95\x2f\x64\xce\xd2\x13\x34\x1a\x18\x51\xd5\xb3\x14\x8a\x59\xda\xf7\xb1\x60\xd5\x1b\x2e\x61\xe3\x5e\x12\xfc\x91\xcb\x6e\x99\xd6\x8a\xee\x61\xe2\x05\x07\xa6\x00\x90\x8d\x70\xb0\xf4\x7f\x6e\xe4\x03\x9b\x26\xe8\x7b\xad\x01\xa0\x63\xa3\x04\xab\x88\x15\xee\x4f\x26\xb8\x52\x9e\x12\x2a\xff\x9a\xec\x9a\x20\xbf\x9d\xe3\xf6\xe3\x91\x25\x00\x50\x1f\xc6\xe4\x13\xfd\x82\x71\x57\x9a\xd3\xcc\xf5\x93\x35\x63\xe7\xa3\x09\x2a\xa1\x93\x9f\xeb\xe3\xd5\xf4\x58\xc2\x23\x00\x00\xff\xff\xf3\xe4\xd2\xb3\xf9\x00\x00\x00")

func extraCoordinationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraCoordinationYaml,
		"extra/coordination.yaml",
	)
}

func extraCoordinationYaml() (*asset, error) {
	bytes, err := extraCoordinationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/coordination.yaml", size: 249, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraCoreYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd3\xb1\x6e\x33\x31\x08\x00\xe0\xfd\x9e\x02\x65\xff\xf3\x2b\xab\xd7\x0c\xdd\xab\xaa\x3b\xb1\xc9\x15\xd5\x06\x6a\xb8\x93\xfa\xf6\x95\xdb\x54\xea\x90\x25\x32\x13\xba\xc3\x9f\xc0\xc2\x68\xfc\x4a\xdd\x59\x25\x41\xa3\xc0\x23\x9a\x79\xd6\x42\xc7\xac\xed\xff\x7e\xc2\x6a\x6f\x78\x5a\xde\x59\x4a\x82\x67\x72\xdd\x7a\xa6\x73\x45\xf7\x65\x94\x17\x0c\x4c\x0b\x40\xee\x84\xc1\x2a\x2f\xdc\xc8\x03\x9b\x25\x90\xad\xd6\x05\x40\xb0\x51\x82\xb3\x76\x5a\xdc\x28\x8f\x62\x34\x7e\xea\xba\x59\x82\xc3\x61\x01\xa0\xc2\x81\x97\x4a\x09\xae\x58\x9d\xc6\x17\x89\xce\xe4\xa3\xf6\x1f\xc4\xa7\xd1\xc8\x46\xac\x7f\x8e\x8d\xe8\xb7\x86\x12\x5c\x58\x0a\xcb\xea\xb7\x1f\xfb\xef\x4c\xfb\xe9\x01\x24\x6b\x33\x15\x92\xf0\xc0\xd8\x9c\x66\x35\xb9\xf2\xda\xd0\xe6\x18\x92\x62\xca\x12\x93\xca\x4e\xb3\x44\xe5\xc6\xd1\x51\xd6\xc9\x7b\x19\x1b\xe1\x86\x79\x96\xd1\x72\x57\x78\x80\x30\x2d\x73\x3d\x98\x96\xa0\x66\x15\x63\x72\x98\x4e\x56\x39\x7f\x3f\xa1\xac\x12\x5d\x6b\xa5\x3e\x4b\xfe\x64\x1f\x9b\x06\xce\x51\x4e\xb9\xd3\xe4\xf6\x38\xf5\x9d\x33\x61\xce\xba\xcd\x6e\xe2\xcd\xba\x87\x7c\x05\x00\x00\xff\xff\x91\xf4\xad\xf6\xd0\x04\x00\x00")

func extraCoreYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraCoreYaml,
		"extra/core.yaml",
	)
}

func extraCoreYaml() (*asset, error) {
	bytes, err := extraCoreYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/core.yaml", size: 1232, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraEventYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xcd\xaa\x02\x31\x0c\x05\xe0\x7d\x9f\x22\x2f\x70\x7b\xe9\x4e\xba\x15\x71\x2f\xe2\x3e\x76\x82\x86\xe9\x4f\x68\x32\x05\xdf\x5e\x0a\x33\x3b\xcf\x2a\x9c\x7c\x8b\x04\x85\x1f\xd4\x95\x5b\x8d\x50\xc8\xd0\xa3\x88\xa6\xb6\x90\x4f\xad\xfc\x8f\x80\x59\xde\x18\xdc\xca\x75\x89\x70\x23\x6d\x5b\x4f\x74\xce\xa8\xea\x26\x5f\xd0\x30\x3a\x80\xd4\x09\x8d\x5b\xbd\x73\x21\x35\x2c\x12\xa1\x6e\x39\x3b\x80\x8a\x85\x22\x5c\x06\x55\x73\x2a\x94\xa6\x46\xe1\x6b\x6f\x9b\x44\xa0\xd9\xab\x5f\x4f\xea\xb9\x39\x00\xaa\xd6\x99\x74\xa2\x3f\xb0\x8f\xd0\x9c\x66\x5e\xbf\xfd\x4c\xdf\xaf\x3a\xb6\x7b\x3d\x8e\xb7\x46\x78\x92\x61\x70\xdf\x00\x00\x00\xff\xff\x9f\x45\x58\xab\xeb\x00\x00\x00")

func extraEventYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraEventYaml,
		"extra/event.yaml",
	)
}

func extraEventYaml() (*asset, error) {
	bytes, err := extraEventYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/event.yaml", size: 235, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraExampleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xcd\x8a\x02\x31\x10\x04\xe0\x7b\x9e\xa2\x5f\x60\x67\x99\x6b\xae\xcb\xe2\x5d\xc4\x7b\x99\x29\x34\x98\x9f\x26\x9d\x19\xf4\xed\x25\x38\xde\xac\x53\x43\x7d\xd0\xdd\xd0\x78\x66\xb3\x58\x8b\x97\xcc\x8e\x09\xaa\x16\xea\xc2\x29\xd4\xfc\xbb\xcd\x48\x7a\xc3\xec\xee\xb1\x2c\x5e\x8e\xb4\xba\xb6\xc0\xbf\x04\x33\x37\xf8\x82\x0e\xef\x44\x42\x23\x7a\xac\xe5\x14\x33\xad\x23\xab\x97\xb2\xa6\xe4\x44\x0a\x32\xbd\xfc\x3f\x90\x35\xd1\x99\x32\x0c\x0f\x8d\x87\x56\x57\xf5\xc2\x77\x33\xd6\x39\x11\x96\xde\x22\x6d\x90\x1f\xe9\x4f\xe5\x98\x46\xae\xdf\xf4\x48\xdb\x6f\xf2\x12\x5a\x2d\x1d\x17\xdb\x8b\xed\xf3\xd6\x36\xbb\x57\x00\x00\x00\xff\xff\x69\xfc\x5c\x32\xe6\x00\x00\x00")

func extraExampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraExampleYaml,
		"extra/example.yaml",
	)
}

func extraExampleYaml() (*asset, error) {
	bytes, err := extraExampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/example.yaml", size: 230, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraExtensionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x4e\x05\x41\x08\x85\xfb\x79\x0a\x5e\xc0\x6b\xb6\x9d\xd6\x18\x7b\x63\xec\xb9\x33\xc7\x95\x38\x3f\x64\x60\x37\xfa\xf6\x86\xc4\xed\x3c\x15\xe1\xe3\x0b\xc0\x2a\xef\x58\x26\x73\x64\xea\x70\xbe\xb1\xaa\x95\x59\x71\x2b\xb3\x3f\x9e\x1b\x37\xfd\xe4\x2d\x7d\xc9\xa8\x99\x5e\x61\xf3\x58\x05\x4f\x8d\xcd\x52\x8c\x57\x76\xce\x89\xa8\x2c\xb0\xcb\x1c\x6f\xd2\x61\xce\x5d\x33\x8d\xa3\xb5\x44\x34\xb8\x23\xd3\xf3\xb7\x63\xc4\x96\x64\x8a\x12\x06\xab\xbc\xac\x79\x68\x26\x5c\xcc\x12\x11\xaa\x38\xdf\x1b\x32\x7d\x70\x33\x44\x67\xf8\x12\x58\x38\x0f\xe4\x3f\x8a\xa8\x22\xfb\x3f\x7a\x64\xfd\x5d\x99\x49\xc6\xbe\x60\x86\x8b\x9c\xd7\xa7\xe7\x76\x87\xf3\x96\x7e\x03\x00\x00\xff\xff\x9a\x3c\x12\xba\xfe\x00\x00\x00")

func extraExtensionYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraExtensionYaml,
		"extra/extension.yaml",
	)
}

func extraExtensionYaml() (*asset, error) {
	bytes, err := extraExtensionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/extension.yaml", size: 254, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraNodeYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbf\x4a\x06\x41\x0c\xc4\xfb\x7d\x8a\xbc\x80\x27\xd7\xc9\xb6\x16\x76\x16\x22\xf6\xf9\x76\x47\x0d\xdf\xfe\x09\x9b\xdc\x81\x6f\x2f\x81\xb3\x73\xaa\x90\xfc\x86\xcc\xb0\xca\x07\x96\xc9\x1c\x99\x3a\x9c\x37\x56\xb5\x32\x2b\xb6\x32\xfb\xe3\xb9\x73\xd3\x6f\xde\xd3\x5d\x46\xcd\xf4\x06\x9b\xc7\x2a\x78\x6e\x6c\x96\x02\xaf\xec\x9c\x13\x51\x59\x60\x97\x39\xde\xa5\xc3\x9c\xbb\x66\x1a\x47\x6b\x89\x68\x70\x47\xa6\xd7\x59\x91\x4c\x51\x02\x66\x95\x97\x35\x8f\x60\xe2\xd1\xfd\xc9\x36\x99\x89\x08\x55\x9c\x6f\x0d\x99\x3e\xb9\x19\x62\x33\x7c\x09\x2c\x4c\x0f\xe4\x3f\x8a\x98\x42\x5f\xff\xf9\x43\xeb\x8a\x98\x69\x1d\xc3\xa5\xa3\x44\x56\xd8\x75\x3e\xff\xba\x9e\xfb\x0d\xce\x7b\xfa\x0d\x00\x00\xff\xff\xbf\xb5\x0b\x0e\x00\x01\x00\x00")

func extraNodeYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraNodeYaml,
		"extra/node.yaml",
	)
}

func extraNodeYaml() (*asset, error) {
	bytes, err := extraNodeYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/node.yaml", size: 256, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraSchedulingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xbd\x4e\x04\x31\x0c\x84\xfb\x3c\x85\x5f\x80\x45\xdb\xa1\xb4\x14\xf4\x80\xe8\x4d\x32\xdc\x59\x97\x1f\x2b\x4e\x56\xba\xb7\x47\x96\x16\xba\x9b\xca\xf2\x78\xac\x6f\x58\xe5\x0b\xc3\xa4\xb7\x48\x15\x93\x37\x56\xb5\xd4\x33\xb6\xd4\xeb\xf3\xb1\x73\xd1\x2b\xef\xe1\x26\x2d\x47\x7a\x87\xf5\x35\x12\x5e\x0b\x9b\x05\x3f\xcf\x3c\x39\x06\xa2\x34\xc0\x53\x7a\xfb\x94\x0a\x9b\x5c\x35\x52\x5b\xa5\x04\xa2\xc6\x15\x91\x3e\xd2\x15\x79\x15\x69\x97\x60\x8a\xe4\x11\x56\x79\x1b\x7d\x69\x24\xfb\x37\xb7\xdb\x8b\x6d\xd2\x03\x11\xb2\x4c\xfe\x2e\x88\xf4\xc3\xc5\xe0\x9b\x36\x87\xc0\x3c\xfa\x44\xf3\xae\xf0\xc9\x75\x79\xfc\xc5\x35\x4e\xe8\x48\x3a\xa4\x0f\x99\xf7\xe4\xf8\xb0\xd3\x3f\xfe\xea\x1f\x7b\xf8\x0d\x00\x00\xff\xff\x9a\x18\x3c\xd0\x0e\x01\x00\x00")

func extraSchedulingYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraSchedulingYaml,
		"extra/scheduling.yaml",
	)
}

func extraSchedulingYaml() (*asset, error) {
	bytes, err := extraSchedulingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/scheduling.yaml", size: 270, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _networkingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\x43\x0f\xde\xac\xf4\x26\xb9\x2a\x88\x17\x11\x85\xbd\x8f\xe9\x50\x87\xb6\x49\x9c\x49\x23\xfd\xf7\xd2\x6d\x84\x06\xbc\xad\xec\x2d\x19\x1e\xef\x7d\x33\x0f\x23\x9f\x48\x94\x83\xb7\x30\x53\xc2\x16\x63\x54\x17\x7a\x6a\x5d\x98\xef\x72\x87\x53\xfc\xc4\xce\x8c\xec\x7b\x0b\x6f\xa4\x61\x11\x47\x0f\x13\xaa\x9a\x4d\xde\x63\x42\x6b\x00\x3c\xce\x64\xa1\x79\x27\xc9\xec\x08\x6e\xe0\x91\xd5\x85\x4c\xb2\x36\x46\x23\xb9\x4d\x83\x91\x9f\x24\x2c\xd1\x82\xa7\xf4\x1d\x64\x64\x3f\xb4\xe3\xbd\xb6\x1c\x0c\x00\xf9\x24\x4c\xba\x09\x6f\x8b\x5d\x71\x53\x03\x00\x20\xf4\xb5\xb0\x50\x6f\x21\xc9\x42\xe7\xd1\xa6\xd2\x88\xae\x1a\xa6\x35\x92\x3d\xbf\x00\x86\x3d\xae\x69\xca\x5f\x0a\xbf\x05\x3d\x5a\x03\xe4\xdf\x13\xe4\xee\x90\xff\xec\x07\x21\xd5\xcb\x01\xfe\xda\xb7\xe6\xe1\x2a\xaa\x02\xfa\xa0\x84\x47\xaa\x53\x58\x71\x20\xf9\x3f\xba\xbc\x1b\x56\xcd\x5f\x02\xf8\xb2\x6f\x0b\xaf\x61\x62\xc7\xd7\xb8\x5e\x51\xc4\x63\x60\x5d\xea\x4f\x00\x00\x00\xff\xff\x14\x0b\x16\xc5\xe7\x02\x00\x00")

func networkingYamlBytes() ([]byte, error) {
	return bindataRead(
		_networkingYaml,
		"networking.yaml",
	)
}

func networkingYaml() (*asset, error) {
	bytes, err := networkingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "networking.yaml", size: 743, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _securityYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xb1\x6e\xe3\x30\x0c\x86\x77\x3d\x05\x91\xf5\x70\x31\xbc\x1d\xb4\x1d\xf2\x02\x45\x03\x74\x67\x29\xc6\x21\x62\x4b\xaa\x28\x2b\xf5\xdb\x17\x72\x1c\x24\x6e\xd0\x76\xe8\x46\xfc\xf8\xc0\xff\xb3\x45\x8c\xf2\xc2\x49\x25\x78\x0b\x03\x67\xdc\x62\x8c\x4a\xc1\xf1\x96\xc2\xd0\x94\x16\xfb\x78\xc4\xd6\x9c\xc4\x3b\x0b\xcf\xac\x61\x4c\xc4\xbb\x1e\x55\x4d\xc5\x1d\x66\xb4\x06\xc0\xe3\xc0\x16\xf6\x4c\x63\x92\x3c\x19\x8d\x4c\x35\x66\x9f\x93\xb0\xd6\xf1\xef\xc2\x3c\x85\x5e\x68\x32\x00\x00\x89\xdf\x46\x49\xec\x2c\x1c\xb0\x57\x9e\xb3\x0a\x69\x44\x5a\xa7\x79\x8a\x6c\xe7\x09\xa0\x4b\x61\x8c\x16\xe2\x6d\x4f\xdd\x74\x11\xab\xb1\xd3\xc5\x62\x26\x84\x75\x61\xca\xf5\x33\x4b\xfb\xca\x19\xdb\x3b\xa7\x1d\xa7\x2c\x07\x21\xcc\x0b\xfd\x93\x59\x4e\xe3\x97\x62\x25\x4c\xd8\x71\x5a\xfd\xc8\x07\x4d\xfa\xdc\xf8\xad\xdf\x9e\x53\x11\x62\xf8\x4f\x14\x46\x9f\x7f\xef\xb8\xd9\x3c\x18\xe9\xa5\x03\xef\x2b\x56\x52\x06\x40\x28\xf8\xe5\x31\x35\x91\x85\x63\xce\x51\x6d\xd3\x90\xf3\xeb\xbb\x39\xfd\xd3\x66\x86\x9b\x6b\x01\xd5\x93\x61\x6d\xce\x21\x9d\xfa\x80\x4e\xb7\x5a\xba\x9b\x1e\xc8\x80\x1d\x37\x5a\xba\x3f\xef\x43\x6f\x00\xce\x2c\xdd\x31\x5b\x68\xcd\x47\x00\x00\x00\xff\xff\xd3\xaf\xd3\xfd\xa2\x02\x00\x00")

func securityYamlBytes() ([]byte, error) {
	return bindataRead(
		_securityYaml,
		"security.yaml",
	)
}

func securityYaml() (*asset, error) {
	bytes, err := securityYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "security.yaml", size: 674, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x51\xaf\x88\x58\x3d\x20\x55\xbe\xf6\x05\x10\x48\xbd\xaf\x9c\x25\xb5\xea\x3f\xbc\x4e\x80\xb7\x47\x09\x0e\xa5\x20\x10\x12\xdc\xd6\xeb\xf1\xcc\xe7\xb5\x29\xbb\x03\x17\x71\x29\x1a\x04\xae\xd4\x51\xce\x62\x53\xcf\x9d\x4d\x41\x4f\x5b\xf2\xf9\x48\x5b\x75\x72\xb1\x37\xb8\x63\x49\x63\xb1\xbc\xf7\x24\xa2\x66\x79\x4f\x95\x8c\x02\x22\x05\x36\xb8\xaf\xa9\xd0\xc0\x4a\x32\xdb\xb9\xcb\xb1\x16\xc7\x32\x97\xd7\x4d\x72\x3b\x87\x49\xe5\x58\x71\x48\x7e\x0c\x8c\xbd\x27\x17\x44\x01\x40\xe1\xc7\xd1\x15\xee\x0d\x6a\x19\x79\x69\xcd\xa7\x24\x93\xbd\x68\xd6\x97\xcc\x66\xa9\x80\xa1\xa4\x31\x1b\x6c\x36\x6d\x5d\x1a\xa3\x41\x7e\x8f\x9a\x96\x24\x7b\x0e\x02\xa6\xf5\xd2\xd3\xf6\x7b\x3a\x1f\xf8\x57\x60\x0f\xe4\xe5\x2f\x64\x3f\x43\xb5\xa9\x62\x99\xfa\x3f\x00\xc9\x9b\x5f\x77\xda\x49\xe7\xd2\x17\xb8\xb6\x6d\x3f\xa4\x7d\x26\x73\x36\xc5\xf6\xaa\x52\xac\xc1\xb1\xd6\x2c\x46\x6b\xdb\xc7\xcb\xff\x73\xda\x89\x5e\xc4\x7a\xf5\x6f\xb6\x7a\x85\x90\x69\x38\x73\xc2\x05\x1a\x58\xcb\x34\x5c\x3d\x07\xaf\x80\x27\x76\xc3\xb1\x1a\xdc\xa8\xd7\x00\x00\x00\xff\xff\xf9\xa2\x82\x6a\xa8\x02\x00\x00")

func storageYamlBytes() ([]byte, error) {
	return bindataRead(
		_storageYaml,
		"storage.yaml",
	)
}

func storageYaml() (*asset, error) {
	bytes, err := storageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storage.yaml", size: 680, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workloadsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x31\x6f\xc2\x30\x10\x85\xf7\xfc\x8a\x13\x6b\x55\xa2\x6c\x95\x57\x98\x3a\x55\x20\xb5\xf3\x61\x1f\x89\x8b\xe3\x73\x7d\x4e\x28\xff\xbe\x4a\x9a\xa8\x40\x41\x54\xa2\xd9\xac\xa7\xa7\xf7\xbe\x9c\xa2\x87\xc1\xbe\x52\x14\xcb\x5e\x41\x4d\x09\xe7\x18\x82\x68\x36\x34\xd7\x5c\xe7\x6d\x81\x2e\x54\x58\x64\x3b\xeb\x8d\x82\x15\x09\x37\x51\xd3\xc2\xa1\x48\xd6\xd9\x0d\x26\x54\x19\x80\xc7\x9a\x14\xbc\x71\xdc\x39\x46\x23\x99\x04\xd2\x9d\x4e\x3e\x45\x4b\xd2\x3d\x1f\x07\xd3\x92\x82\xe3\x43\x4d\x3e\x49\x06\x00\x10\xe9\xa3\xb1\x91\x8c\x82\x14\x1b\xea\xa5\xce\x28\x01\xf5\x89\x98\x0e\x81\x54\xff\x02\x28\x23\x37\x41\x41\xc7\x3a\x28\x71\x40\x53\x60\xce\xf2\x01\xda\xf1\x03\xdb\xe2\x88\x63\x45\xc1\x59\x8d\xb0\xa6\x89\x40\xe2\x77\x81\xd0\xdf\x40\x92\x65\x0f\x0b\xf6\x29\xb2\x73\x14\xef\x66\x9a\xcd\xae\x11\x75\x4d\xfa\xac\xe8\x1a\xdc\x3a\x61\xa2\x6d\xe3\xa6\x3b\x93\x0c\x0d\x37\xef\xb4\x44\xaa\xd9\x4f\x07\x62\xfa\xfc\x9b\x18\xcf\xbc\xb9\xbb\x7f\x83\x49\x57\xbf\x00\xde\xc7\xe4\x6b\xd5\x8b\xc8\xfe\x52\xff\x16\x9d\xfc\x07\x80\x8e\xec\x2f\x43\x6c\x28\xe1\x31\xc9\x0b\x9b\x29\x7e\xd0\x30\xc6\x9e\x5f\xc0\x6a\xf6\xc3\x8a\x48\xd4\x0a\xaa\x94\x82\xa8\x3c\xd7\xc6\x9f\x2e\xd6\xee\x49\xf2\xde\x9c\x8f\xa9\xba\x1b\x2b\x92\x7c\x3f\x8e\xd3\x5c\xda\xf2\x87\x09\x6c\x8d\x25\xe5\xd2\x96\x0f\x9f\xb5\xcb\x00\xf6\x64\xcb\x2a\x29\x28\xb2\xaf\x00\x00\x00\xff\xff\xb0\x0b\x15\x95\x1c\x05\x00\x00")

func workloadsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workloadsYaml,
		"workloads.yaml",
	)
}

func workloadsYaml() (*asset, error) {
	bytes, err := workloadsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workloads.yaml", size: 1308, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin.yaml":                       adminYaml,
	"config.yaml":                      configYaml,
	"extra/admissionregistration.yaml": extraAdmissionregistrationYaml,
	"extra/apiextension.yaml":          extraApiextensionYaml,
	"extra/apiregistration.yaml":       extraApiregistrationYaml,
	"extra/authentication.yaml":        extraAuthenticationYaml,
	"extra/authorization.yaml":         extraAuthorizationYaml,
	"extra/autoscaling.yaml":           extraAutoscalingYaml,
	"extra/certificate.yaml":           extraCertificateYaml,
	"extra/coordination.yaml":          extraCoordinationYaml,
	"extra/core.yaml":                  extraCoreYaml,
	"extra/event.yaml":                 extraEventYaml,
	"extra/example.yaml":               extraExampleYaml,
	"extra/extension.yaml":             extraExtensionYaml,
	"extra/node.yaml":                  extraNodeYaml,
	"extra/scheduling.yaml":            extraSchedulingYaml,
	"networking.yaml":                  networkingYaml,
	"security.yaml":                    securityYaml,
	"storage.yaml":                     storageYaml,
	"workloads.yaml":                   workloadsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"admin.yaml":  &bintree{adminYaml, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
	"extra": &bintree{nil, map[string]*bintree{
		"admissionregistration.yaml": &bintree{extraAdmissionregistrationYaml, map[string]*bintree{}},
		"apiextension.yaml":          &bintree{extraApiextensionYaml, map[string]*bintree{}},
		"apiregistration.yaml":       &bintree{extraApiregistrationYaml, map[string]*bintree{}},
		"authentication.yaml":        &bintree{extraAuthenticationYaml, map[string]*bintree{}},
		"authorization.yaml":         &bintree{extraAuthorizationYaml, map[string]*bintree{}},
		"autoscaling.yaml":           &bintree{extraAutoscalingYaml, map[string]*bintree{}},
		"certificate.yaml":           &bintree{extraCertificateYaml, map[string]*bintree{}},
		"coordination.yaml":          &bintree{extraCoordinationYaml, map[string]*bintree{}},
		"core.yaml":                  &bintree{extraCoreYaml, map[string]*bintree{}},
		"event.yaml":                 &bintree{extraEventYaml, map[string]*bintree{}},
		"example.yaml":               &bintree{extraExampleYaml, map[string]*bintree{}},
		"extension.yaml":             &bintree{extraExtensionYaml, map[string]*bintree{}},
		"node.yaml":                  &bintree{extraNodeYaml, map[string]*bintree{}},
		"scheduling.yaml":            &bintree{extraSchedulingYaml, map[string]*bintree{}},
	}},
	"networking.yaml": &bintree{networkingYaml, map[string]*bintree{}},
	"security.yaml":   &bintree{securityYaml, map[string]*bintree{}},
	"storage.yaml":    &bintree{storageYaml, map[string]*bintree{}},
	"workloads.yaml":  &bintree{workloadsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
