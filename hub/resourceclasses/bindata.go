// Package resourceclasses Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// admin.yaml
// config.yaml
// networking.yaml
// security.yaml
// storage.yaml
// workloads.yaml
package resourceclasses

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x4d\x6b\xe3\x40\x0c\x86\xef\xfe\x15\x22\xd7\x65\x6d\x72\x58\x08\x73\x5b\xd2\x4b\xa1\x14\x9a\x42\xef\xca\x58\xd8\x22\x9e\x8f\x48\x63\xf7\xe3\xd7\x97\x71\xed\x26\xa1\x98\x36\x87\xde\x64\xf9\xd5\xfb\x48\x62\x84\x91\x9f\x48\x94\x83\x37\xe0\x28\x61\x89\x31\xaa\x0d\x35\x95\x36\xb8\x6a\x58\x63\x17\x5b\x5c\x17\x07\xf6\xb5\x81\x1d\x69\xe8\xc5\xd2\xb6\x43\xd5\x22\xcb\x6b\x4c\x68\x0a\x00\x8f\x8e\x0c\xfc\xaf\x1d\xfb\x42\x23\xd9\x9c\x23\x9f\x84\x49\x73\xf8\x77\x12\xdc\xa3\x23\x8d\x68\x49\x0b\x00\x00\xa1\x63\xcf\x42\xb5\x81\x24\x3d\x8d\xa9\xf4\x1a\xc9\x8c\x11\x40\x23\xa1\x8f\x06\x56\xab\xe9\x5b\x26\xbc\x19\xdd\xce\x7c\x00\x86\x79\x86\x61\x7d\x86\xbb\x63\xc7\x09\x76\xe8\x9b\x49\xf8\x33\xf7\x2e\x97\xc9\xa9\x6a\xc9\x7e\x5e\x07\x3c\xf4\x21\xe1\x35\x84\x39\x3a\x9e\x0a\x97\x20\xdb\xae\xd7\x44\x02\xbb\xd0\x5d\xb5\x35\xd9\xa3\x2d\xb1\x4f\x6d\x10\x7e\xc3\xc4\xc1\x97\x87\x8d\x96\x1c\xbe\x34\x63\x3f\x08\xf2\x09\x58\x9c\xf7\xd7\x5a\xf8\x9e\xbd\x7d\xbc\x85\x1b\xe1\xfc\x73\x09\xa7\x29\x08\x36\xb4\x38\xa6\x72\x7d\x66\x70\x01\xda\x53\xc2\x4c\x63\x1b\xfc\xf4\x60\x55\xac\x81\x36\xa5\xa8\xa6\xaa\x6c\xed\x2f\x0f\xe3\xb0\xd1\x6a\x14\x57\x33\xc0\xe6\x9b\x20\xad\x30\xdf\x40\xa9\x43\x73\x6a\x13\xd8\x61\x43\x95\x0e\xcd\x9f\x17\xd7\x15\x00\xcf\xc4\x4d\x9b\x0c\xfc\x2b\xde\x03\x00\x00\xff\xff\x49\x65\xbf\x8e\x7f\x03\x00\x00")

func adminYamlBytes() ([]byte, error) {
	return bindataRead(
		_adminYaml,
		"admin.yaml",
	)
}

func adminYaml() (*asset, error) {
	bytes, err := adminYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin.yaml", size: 895, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xc4\x30\x10\x84\x7b\x3f\xc5\xe8\x5a\x44\xac\x74\xc8\xed\x15\x54\x34\x20\xd1\xaf\xec\xc5\xb1\x12\xff\xe0\x75\x72\xf0\xf6\x28\x39\x22\x72\xb4\xd7\x59\xeb\xd9\x6f\x76\x86\x4a\x78\xe7\x2a\x21\x27\x83\xc8\x8d\x3a\x2a\x45\x6c\x76\xdc\xd9\x1c\xf5\xd2\xd3\x54\x06\xea\xd5\x18\x92\x33\x78\x65\xc9\x73\xb5\x7c\x9e\x48\x44\xad\x72\x47\x8d\x8c\x02\x12\x45\x36\x38\xe7\xf4\x11\xbc\x92\xc2\x76\x1d\x52\x09\xcf\x35\xcf\xc5\xe0\x74\x52\x00\xa7\x56\x03\xcb\xfa\xf3\x78\xb3\x80\x17\x2a\xa2\x00\xa0\xf2\xe7\x1c\x2a\x3b\x83\x56\x67\xde\x46\xed\xbb\xb0\xd9\x5e\x80\x3f\xd0\xae\xf2\xeb\x3d\x06\x76\x03\xc5\x9d\x03\x2c\x7b\xa8\xa5\x3f\xf8\xbd\xb1\xad\xdc\xee\xf4\x92\x03\xe4\xbf\x51\xb0\x39\xfd\x26\x94\x6a\x0d\x86\xd6\x8a\x18\xad\xad\x4b\xb7\xcd\x8e\x4f\xa2\x37\xb1\xde\xc1\x76\x2d\x95\x45\x5f\x72\x1d\xa7\x4c\x4e\x3a\x59\xfc\xdf\x59\x08\x91\x3c\x6b\x59\xfc\xc3\x57\x9c\x14\x70\xe1\xe0\x87\x66\xd0\xab\x9f\x00\x00\x00\xff\xff\x40\xb5\x33\x03\xc4\x01\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 452, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _networkingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x41\x4b\xc5\x30\x10\x84\xef\xf9\x15\x4b\x0f\xde\xac\xf4\x26\xb9\x2a\x88\x17\x11\x85\x77\x5f\xd3\xa5\x2e\x6d\xb3\x71\x37\x8d\xf4\xdf\x4b\x5f\x2b\xb4\xe0\x45\x7d\xb7\x24\x4c\xbe\x99\xd9\xc5\xc4\x27\x52\x63\x89\x1e\x46\xca\x58\x63\x4a\x16\xa4\xa5\x3a\xc8\x78\x53\x1a\x1c\xd2\x3b\x36\xae\xe7\xd8\x7a\x78\x21\x93\x49\x03\xdd\x0d\x68\xe6\x16\x79\x8b\x19\xbd\x03\x88\x38\x92\x87\xea\x95\xb4\x70\x20\xb8\x82\x7b\xb6\x20\x85\x74\xae\x9c\x25\x0a\x8b\x06\x13\x3f\xa8\x4c\xc9\x43\xa4\xfc\x29\xda\x73\xec\xea\xfe\xd6\x6a\x16\x07\x40\x31\x2b\x93\x2d\xc2\xeb\x0d\xb7\xd1\xcc\x01\x00\x28\x7d\x4c\xac\xd4\x7a\xc8\x3a\xd1\xf9\x29\xcf\x89\xfc\xf9\x04\xd0\xad\xe4\xaa\xda\xee\xba\x45\xf5\x60\x7b\x0a\x40\xf9\x6e\x5b\x9a\x9d\xd5\x63\xec\x94\xcc\x7e\xe5\xf5\x53\x8b\xa3\x35\x1f\xa8\x07\xef\x37\xca\xb8\x0f\x70\x92\x19\x3b\xd2\x3f\x05\x29\xeb\xdf\xc3\xea\xfe\x93\xe5\x69\x2d\x06\xcf\x32\x70\xe0\x0b\xcf\x64\x53\xa4\x3d\xfb\xb8\x95\xaf\x00\x00\x00\xff\xff\xfc\xc4\x30\x88\x93\x02\x00\x00")

func networkingYamlBytes() ([]byte, error) {
	return bindataRead(
		_networkingYaml,
		"networking.yaml",
	)
}

func networkingYaml() (*asset, error) {
	bytes, err := networkingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "networking.yaml", size: 659, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _securityYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x6a\xf3\x30\x0c\xc7\xef\x7e\x0a\xd1\xeb\xc7\x57\x93\xdb\xf0\x6d\xf4\x05\xc6\x0a\xbb\x6b\xb2\x9a\x8a\x26\xb6\x67\x39\xee\xf2\xf6\x23\x69\x4a\x9b\x15\xc6\x76\x13\xe2\x27\xfd\x7f\xb6\x30\xc9\x1b\x67\x95\x18\x1c\xf4\x5c\x70\x8b\x29\x29\x45\xcf\x5b\x8a\xbd\xad\x0d\x76\xe9\x88\x8d\x39\x49\xf0\x0e\x5e\x59\xe3\x90\x89\x77\x1d\xaa\x9a\x09\xf7\x58\xd0\x19\x80\x80\x3d\x3b\xd8\x33\x0d\x59\xca\x68\x34\x31\x4d\x6d\x0e\x25\x0b\xeb\x54\xfe\x5f\x98\x97\xd8\x09\x8d\x06\x00\x20\xf3\xc7\x20\x99\xbd\x83\x03\x76\xca\x73\xaf\x8c\x89\xdd\x5c\x01\xb4\x39\x0e\xc9\x41\xba\x4d\x4c\x33\x17\x85\xa9\xed\x75\xc9\x9b\x09\x61\x5d\x98\x7a\x7d\x50\x6d\xde\xb9\x60\x73\x97\xbe\xe3\x5c\xe4\x20\x84\x65\xa1\x7f\xe9\x50\xe3\x88\x2d\xe7\xd5\xef\x3c\x18\xd1\xf7\xe5\x3f\xaa\xec\x39\x57\x21\x86\x67\xa2\x38\x84\xf2\x27\x9d\xcd\xe6\x21\x5c\x2f\xeb\xf0\x7e\xdb\x2a\xdf\x00\x08\xc5\xb0\x1c\x43\x33\x39\x38\x96\x92\xd4\x59\x4b\x3e\xac\xef\x7e\x7a\x52\x3b\xc3\xf6\x1a\x40\xd3\xc9\x59\xed\x39\xe6\x53\x17\xd1\xeb\x56\x6b\x7b\xd3\x03\xe9\xb1\x65\xab\xb5\xfd\xf7\xd9\x77\x06\xe0\xcc\xd2\x1e\x8b\x83\xc6\x7c\x05\x00\x00\xff\xff\xe2\xb1\x85\xab\x62\x02\x00\x00")

func securityYamlBytes() ([]byte, error) {
	return bindataRead(
		_securityYaml,
		"security.yaml",
	)
}

func securityYaml() (*asset, error) {
	bytes, err := securityYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "security.yaml", size: 610, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xcb\x6a\x2b\x31\x0c\x86\xf7\x7e\x8a\x9f\x6c\x0f\x67\x4c\x16\x85\xe0\x6d\x5e\xa0\xb4\x90\xbd\xf0\x88\x89\x89\x6f\xb5\x3c\x6e\xfb\xf6\x65\xa6\x9e\xa6\x17\x5a\x28\x74\x27\xcb\xf2\xa7\xcf\x12\x65\x77\xe2\x22\x2e\x45\x83\xc0\x95\x06\xca\x59\x6c\x1a\x79\xb0\x29\xe8\xb6\x27\x9f\xcf\xb4\x57\x17\x17\x47\x83\x3b\x96\x34\x17\xcb\x47\x4f\x22\x6a\x29\x1f\xa9\x92\x51\x40\xa4\xc0\x06\xf7\x35\x15\x9a\x58\x49\x66\xbb\x64\x39\xd6\xe2\x58\x96\xf0\x7f\x2f\xb9\x5d\x9a\x49\xe5\x58\x71\x4a\x7e\x0e\x8c\xa3\x27\x17\x44\x01\x40\xe1\x87\xd9\x15\x1e\x0d\x6a\x99\x79\x4d\xd5\xe7\xcc\x66\x8d\x80\xa9\xa4\x39\x1b\xec\x76\xfd\x5c\xba\x8e\x41\x7e\xa3\xb6\x15\x6a\xaf\x4c\xa0\x6d\xff\x6b\xfb\xef\x45\x7c\xe0\x3f\x76\xf8\xb9\x7d\x1f\x15\xd6\x51\xfe\xaa\xb5\xbc\xbe\x1c\x2e\x07\x19\x5c\xfa\xa2\xd1\xaf\xed\x3b\xee\x67\x07\x67\x53\xec\x4b\x91\x62\x0d\xce\xb5\x66\x31\x5a\xdb\x31\x7e\x5c\xff\xe5\x20\x7a\x2d\xd6\x1b\xbf\x63\xf5\x26\x21\x6d\xba\x7a\xc2\x05\x9a\x58\x4b\x9b\xfe\x3d\x05\xaf\x80\x47\x76\xd3\xb9\x1a\xdc\xa8\x97\x00\x00\x00\xff\xff\x08\x11\x00\x06\x67\x02\x00\x00")

func storageYamlBytes() ([]byte, error) {
	return bindataRead(
		_storageYaml,
		"storage.yaml",
	)
}

func storageYaml() (*asset, error) {
	bytes, err := storageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storage.yaml", size: 615, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workloadsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x8e\xda\x30\x10\x86\xef\x79\x8a\x11\xd7\xaa\x44\xb9\x55\xbe\xc2\xa9\xa7\x0a\xa4\xf6\x3c\xd8\x43\xe2\xe2\x78\x5c\xcf\x24\x94\xb7\xaf\x92\x26\x5a\x96\x05\xb1\x08\x6e\xd6\x68\xf4\x7d\xff\x2f\xd9\xc6\xe4\x7f\x52\x16\xcf\xd1\x40\x4b\x8a\x4b\x4c\x49\x2c\x3b\x5a\x5a\x6e\xcb\xbe\xc2\x90\x1a\xac\x8a\x83\x8f\xce\xc0\x86\x84\xbb\x6c\x69\x15\x50\xa4\x18\xd6\x1d\x2a\x9a\x02\x20\x62\x4b\x06\x7e\x71\x3e\x04\x46\x27\x85\x24\xb2\xc3\x9c\xa2\x66\x4f\x32\x1c\xbf\x4e\x4b\x6b\x4a\x81\x4f\x2d\x45\x95\x02\x00\x20\xd3\x9f\xce\x67\x72\x06\x34\x77\x34\x8e\xf4\x94\xc8\x8c\x27\x80\x3a\x73\x97\x0c\x0c\xb1\xa6\x49\x9e\x52\x18\x70\x17\x28\x80\x7e\xee\xd2\x57\x67\xca\x0d\xa5\xe0\x2d\xc2\x96\x9e\x77\xe6\xff\x2c\xa1\xcf\x39\xd5\x73\x84\x15\x47\xcd\x1c\x02\xe5\x47\xf4\x8b\xc5\x2d\xf9\x00\xb5\x17\xcc\x5b\x39\xb6\x8a\x4a\xfb\x2e\xbc\xa4\xbc\x4c\xb0\xbb\xed\xd7\x48\x2d\xc7\x97\x38\xdd\x88\xba\x6b\xfc\xce\xbb\x47\x54\x3b\x54\xdb\x7c\x70\xfd\x9e\x21\xb7\x2c\xab\xcc\xf1\x9a\x6a\x8f\x41\x1e\x74\xd9\xcc\xf1\xba\x6f\x47\x8a\xe7\xd2\x1f\xec\x9e\xbc\x37\x69\x26\x5c\xf6\xf2\x96\xe3\xf4\x3a\x25\x5b\x03\x8d\x6a\x12\x53\x96\xd6\xc5\xf7\x3f\xc1\xe1\x9b\x94\xe3\x72\x39\x53\xed\xf0\x09\x90\x94\xc7\xf9\xd1\x2f\xa5\xaf\xdf\x32\x81\x6f\xb1\xa6\x52\xfa\xfa\xcb\xdf\x36\x14\x00\x47\xf2\x75\xa3\x06\xaa\xe2\x5f\x00\x00\x00\xff\xff\x3d\x9a\x08\x40\x74\x04\x00\x00")

func workloadsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workloadsYaml,
		"workloads.yaml",
	)
}

func workloadsYaml() (*asset, error) {
	bytes, err := workloadsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workloads.yaml", size: 1140, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin.yaml":      adminYaml,
	"config.yaml":     configYaml,
	"networking.yaml": networkingYaml,
	"security.yaml":   securityYaml,
	"storage.yaml":    storageYaml,
	"workloads.yaml":  workloadsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"admin.yaml":      {adminYaml, map[string]*bintree{}},
	"config.yaml":     {configYaml, map[string]*bintree{}},
	"networking.yaml": {networkingYaml, map[string]*bintree{}},
	"security.yaml":   {securityYaml, map[string]*bintree{}},
	"storage.yaml":    {storageYaml, map[string]*bintree{}},
	"workloads.yaml":  {workloadsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
