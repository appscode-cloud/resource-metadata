// Package resourceclasses Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// admin.yaml
// config.yaml
// extra/admissionregistration.yaml
// extra/apiextension.yaml
// extra/apiregistration.yaml
// extra/authentication.yaml
// extra/authorization.yaml
// extra/autoscaling.yaml
// extra/certificate.yaml
// extra/coordination.yaml
// extra/core.yaml
// extra/event.yaml
// extra/example.yaml
// extra/extension.yaml
// extra/node.yaml
// extra/scheduling.yaml
// networking.yaml
// security.yaml
// storage.yaml
// workloads.yaml
package resourceclasses

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x4f\x8b\xdb\x40\x0c\xc5\xef\xfe\x14\x22\xd7\x12\x9b\x1c\x0a\x61\x6e\x25\xbd\x14\x4a\xa1\x29\xf4\xae\x8c\x55\x5b\x64\xfe\x75\x24\x7b\xff\x7c\xfa\x65\xbc\xf1\x26\x21\x98\x25\x2c\x7b\x93\x65\xf9\xfd\x9e\x1e\x16\x26\xfe\x4b\x59\x38\x06\x03\x9e\x14\x6b\x4c\x49\x6c\x6c\xa9\xb6\xd1\x37\xe3\x06\x5d\xea\x71\x53\x1d\x39\xb4\x06\xf6\x24\x71\xc8\x96\x76\x0e\x45\xaa\x32\xde\xa2\xa2\xa9\x00\x02\x7a\x32\xf0\xad\xf5\x1c\x2a\x49\x64\x4b\x8f\x82\x66\x26\x29\xe5\xfa\x34\xf0\x0b\x3d\x49\x42\x4b\x52\x01\x00\xc4\xa4\x1c\x03\x3a\x03\xff\xd0\x09\x4d\x3d\x7d\x4a\x64\xa6\x6a\x0d\x5d\x8e\x43\x32\xb0\x5a\x4d\xcf\x00\xf9\xc4\x37\x93\xdc\x85\x10\xc0\x38\x2f\x31\x6e\x2e\x78\x3f\xd9\xb3\xc2\x1e\x43\x77\x43\xd4\x3c\xdc\x03\x74\x45\x29\x9f\x85\x96\x88\x73\x44\xf0\x7b\x88\x8a\x1f\x84\xce\xd5\xff\xb3\xd6\x12\x77\xe7\x06\x51\xca\xb0\x8f\xee\xbe\x70\xf3\x01\x6d\x8d\x83\xf6\x31\xf3\x33\x96\x4f\xea\xe3\x56\x6a\x8e\x37\x6e\xec\x2b\x22\xbf\x11\x16\x33\xf8\x3c\x0f\xef\xc3\x77\x7f\x7e\xc0\xf7\xcc\xe5\xe5\x1d\xe1\x8b\xc6\x8c\x1d\x2d\xae\x2e\xdc\x5e\x68\x5e\xb1\x0f\xa4\x58\x0c\xb0\x8d\xe1\xf4\xb3\x4b\xb6\x06\x7a\xd5\x24\xa6\x69\x6c\x1b\xae\x8f\xea\xb8\x95\x66\x1a\x6e\x66\x80\x2d\xf7\x44\xd2\x60\xb9\x9f\x5a\xc6\xee\x6c\x13\xd8\x63\x47\x8d\x8c\xdd\x97\x47\xef\x2a\x80\x07\xe2\xae\x57\x03\x5f\xab\x97\x00\x00\x00\xff\xff\xc5\x6a\xa3\xf9\xbb\x03\x00\x00")

func adminYamlBytes() ([]byte, error) {
	return bindataRead(
		_adminYaml,
		"admin.yaml",
	)
}

func adminYaml() (*asset, error) {
	bytes, err := adminYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin.yaml", size: 955, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3d\x4f\x03\x31\x0c\x86\xf7\xfc\x8a\x57\x5d\x51\x1b\xdd\x86\xb2\x76\x60\x62\x01\x89\xdd\xca\xb9\x69\xd4\x7c\x58\x71\x7a\x85\x7f\x8f\xee\xd4\x13\x57\xc1\x40\xa6\xc8\x71\x9e\xc7\x7e\x49\xe2\x07\x37\x8d\xb5\x38\x64\xee\x74\x20\x11\xf5\x75\xe4\x83\xaf\xd9\x4e\x03\x25\x39\xd3\x60\x2e\xb1\x8c\x0e\x6f\xac\xf5\xda\x3c\x1f\x13\xa9\x9a\xb9\x7d\xa4\x4e\xce\x00\x85\x32\x3b\x1c\x6b\x39\xc5\x60\x54\xd8\xcf\x45\x92\xf8\xd2\xea\x55\x1c\x76\x3b\x03\x70\xe9\x2d\xb2\xce\x2f\xfb\x87\x0f\x78\x25\x51\x03\x00\x55\x7a\xac\x85\x92\xc3\x89\x92\xf2\x52\xeb\x5f\xc2\x6e\xb9\xed\x11\x36\xb8\xf9\xb4\xfb\x40\x0e\x7e\x21\xe5\x15\x04\x4c\xeb\x56\xd3\xb0\x11\xbe\xb3\x6f\xdc\xff\x23\xfb\x4b\xb7\x15\xea\x86\xf4\xdb\x17\x7d\x2d\xf7\x4d\xb5\x79\x87\x73\xef\xa2\xce\x5a\x3f\x96\xc7\x84\x2f\xcf\x6a\x97\x66\xbb\xa2\xfd\x1c\x2e\xab\xbd\xd5\x76\x49\x95\x46\x3d\xe8\x14\x7e\x86\x43\xcc\x14\xd8\xea\x14\x9e\x3e\x73\x32\xc0\x8d\x63\x38\x77\x87\xc1\x7c\x07\x00\x00\xff\xff\x45\xae\x7b\x55\xcc\x01\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 460, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAdmissionregistrationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x31\x4e\x04\x31\x0c\x45\xfb\x9c\xc2\x17\xd8\x41\xd3\xa1\x74\x88\x82\x1e\x21\x7a\x93\x98\x59\x6b\x92\xd8\x8a\x9d\x41\xdc\x1e\x65\x59\x3a\x0a\x28\x36\x55\x24\xbf\x67\x7f\x1b\x95\x5f\xa9\x1b\x4b\x8b\x50\xc9\x71\x41\x55\x4b\x92\x69\x49\x52\xef\x8e\x15\x8b\x9e\x71\x0d\x3b\xb7\x1c\xe1\x99\x4c\x46\x4f\xf4\x58\xd0\x2c\x4c\x3c\xa3\x63\x0c\x00\xa9\x13\x3a\x4b\x7b\xe1\x4a\xe6\x58\x35\x42\x1b\xa5\x04\x80\x86\x95\x22\x3c\xe4\xca\x36\xa7\x74\xda\xd8\xbc\x5f\xe0\x60\x4a\x69\xda\xa8\xfc\xd4\x65\x68\x04\xfc\x8d\x5b\xf6\x7b\x5b\x58\x02\x00\x35\xef\x4c\x36\x9d\x13\x88\xce\x22\x96\x08\xde\x07\x05\x00\x00\xff\x54\x8a\x97\xdf\x09\xb6\x3f\x75\x9c\xaf\x5f\xd7\x8a\x50\x87\xa3\x73\xdb\x3e\xe8\xed\x2c\xb2\x27\x69\xef\xbc\x8d\x6f\xc7\xae\xf4\xf1\x73\xae\x63\xbd\x55\x8c\x03\x0b\xe7\x7f\x05\xf9\x0a\x00\x00\xff\xff\x7d\x13\xb0\xfc\xc7\x01\x00\x00")

func extraAdmissionregistrationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAdmissionregistrationYaml,
		"extra/admissionregistration.yaml",
	)
}

func extraAdmissionregistrationYaml() (*asset, error) {
	bytes, err := extraAdmissionregistrationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/admissionregistration.yaml", size: 455, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraApiextensionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\x34\x31\x0c\x84\xfb\x3c\xc5\xbc\xc0\xed\xaf\xed\x7e\xa5\x43\x14\xf4\x08\xd1\x5b\x59\x03\xd6\x25\xb1\x15\x3b\x2b\x78\x7b\x14\x74\x47\x89\xab\xb1\xfc\x79\xc6\x32\x99\xbc\xf2\x70\xd1\x9e\xd1\x38\x68\x23\x33\x2f\x7a\xf0\x56\xb4\xfd\x3b\x77\xaa\xf6\x41\x7b\xba\x4a\x3f\x32\x9e\xd9\x75\x8e\xc2\x8f\x95\xdc\xd3\xc2\x0f\x0a\xca\x09\x28\x83\x29\x44\xfb\x8b\x34\xf6\xa0\x66\x19\x7d\xd6\x9a\x80\x4e\x8d\x33\x1e\x4c\xf8\x33\xb8\xaf\xa0\xe4\xc6\x65\x2d\x91\xc9\xd3\xd0\x69\x79\xa9\xdf\xb1\x6f\xd7\xff\xbe\x89\x26\x80\x7b\x0c\x61\x5f\xec\x05\x6a\x2b\x80\x6a\x46\x8c\xc9\x09\x00\xe2\xcb\x38\xff\xa8\x0b\xde\xff\x74\x5a\x35\x6e\xd7\x67\x94\xe9\xa1\xed\xde\x1f\xfc\x26\x5d\x96\xb9\xdf\xc8\xf3\xfe\x91\x73\x4f\xdf\x01\x00\x00\xff\xff\x1d\x1d\xf3\x21\x21\x01\x00\x00")

func extraApiextensionYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraApiextensionYaml,
		"extra/apiextension.yaml",
	)
}

func extraApiextensionYaml() (*asset, error) {
	bytes, err := extraApiextensionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/apiextension.yaml", size: 289, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraApiregistrationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd0\xbd\x4a\x05\x41\x0c\x05\xe0\x7e\x9e\xe2\xbc\xc0\x5d\xd9\x4e\xa6\x13\x0b\x7b\x11\xfb\x30\x1b\xae\xe1\xce\x4f\x48\xb2\x0b\xbe\xbd\xcc\xb2\x82\x9d\x53\x1d\x38\xdf\x04\x12\x52\xf9\x64\x73\x19\x3d\xa3\x71\xd0\x42\xaa\x5e\xc6\xc6\x4b\x19\xed\xe9\x58\xa9\xea\x17\xad\xe9\x21\x7d\xcb\x78\x67\x1f\xbb\x15\x7e\xad\xe4\x9e\x26\xdf\x28\x28\x27\xa0\x18\x53\xc8\xe8\x1f\xd2\xd8\x83\x9a\x66\xf4\xbd\xd6\x04\x74\x6a\x9c\xf1\xa2\x62\x7c\x17\x0f\x3b\x59\x72\xe5\x32\xff\x91\xca\x9b\x8d\x5d\xf3\x4c\x7f\xc5\xf2\x78\xf6\x45\x46\x02\xb8\x87\x09\xfb\xd4\x37\x0c\x9d\x25\xd5\x8c\xb0\x9d\x13\x00\xc4\xb7\x72\x3e\xd3\x0d\xf7\x7f\x66\xcd\x67\xd7\x12\x27\x73\xb6\x43\x0a\xfb\xd5\x1d\xbf\xa7\x38\xd6\xf4\x13\x00\x00\xff\xff\x6f\x1e\x20\x6e\x1a\x01\x00\x00")

func extraApiregistrationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraApiregistrationYaml,
		"extra/apiregistration.yaml",
	)
}

func extraApiregistrationYaml() (*asset, error) {
	bytes, err := extraApiregistrationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/apiregistration.yaml", size: 282, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAuthenticationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xb1\x4a\x04\x41\x0c\x06\xe0\x7e\x9e\xe2\x7f\x81\x5b\xd9\x4e\xa6\x13\x0b\x7b\x11\xfb\x30\x1b\xbc\xb0\x3b\x93\x30\xc9\xac\xf8\xf6\x32\xc7\x59\xd8\x5c\xaa\xc0\xff\x25\x90\x90\xc9\x27\x77\x17\x6d\x19\x95\x83\x16\x32\xf3\xa2\x1b\x2f\x45\xeb\xd3\xb9\xd2\x61\x57\x5a\xd3\x2e\x6d\xcb\x78\x67\xd7\xd1\x0b\xbf\x1e\xe4\x9e\x26\xdf\x28\x28\x27\xa0\x74\xa6\x10\x6d\x1f\x52\xd9\x83\xaa\x65\xb4\x71\x1c\x09\x68\x54\x39\xe3\x65\xc4\x95\x5b\x48\xb9\xa9\xe4\xc6\x65\x8e\x91\xc9\x5b\xd7\x61\x19\xf4\x0f\x2c\xfb\xb3\x2f\xa2\x09\xe0\x16\x5d\xd8\x27\xbe\x40\x6d\x86\x74\x64\x44\x1f\x9c\x00\x20\x7e\x8c\xf3\xad\xbb\xe0\xeb\xf1\xaa\x59\xfd\x7e\x41\x46\xe8\xce\xad\xf3\x29\xfc\xed\xf7\xf0\xfc\x7b\xc4\xb9\xa6\xdf\x00\x00\x00\xff\xff\xd9\xa2\xd3\xee\x18\x01\x00\x00")

func extraAuthenticationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAuthenticationYaml,
		"extra/authentication.yaml",
	)
}

func extraAuthenticationYaml() (*asset, error) {
	bytes, err := extraAuthenticationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/authentication.yaml", size: 280, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAuthorizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x90\xb1\x4e\x2c\x31\x0c\x45\xfb\x7c\x85\x7f\x60\xe7\x69\xba\xa7\x74\x88\x82\x1e\x21\x7a\x93\xb9\xb0\x66\x33\xb1\x65\x27\x83\xe0\xeb\xd1\xac\x16\x89\x0a\x51\x20\x48\x15\xe9\x1e\xfb\xd8\x66\x93\x7b\x78\x88\xb6\x4c\x2b\x3a\x4f\x6c\x16\x45\x17\x4c\x45\xd7\x7f\xdb\xcc\xd5\x8e\x3c\xa7\x93\xb4\x25\xd3\x2d\x42\x87\x17\x5c\x57\x8e\x48\x3b\xbe\x70\xe7\x9c\x88\x8a\x83\xbb\x68\xbb\x93\x15\xd1\x79\xb5\x4c\x6d\xd4\x9a\x88\x1a\xaf\xc8\x74\x35\xfa\x51\x5d\xde\xce\x50\x0a\x43\xd9\xab\xd8\xe4\xc6\x75\x58\x26\xfe\x9c\x4f\xa7\xff\x31\x89\x26\x22\xb4\xee\x82\xd8\xd9\x03\xa9\xed\x21\xd7\x4c\xdd\x07\x12\x11\x51\x7f\x35\xe4\xf3\xef\x40\x4f\x5f\x76\xda\x9f\x5f\xc6\xcf\x54\xb5\x70\x8d\xf1\xf0\x8c\xd2\xb9\x14\x44\x38\x36\xc1\x4b\x5c\xc8\xed\xe3\x24\xdb\xfc\xd3\xea\x40\x7d\xfc\x73\xb3\x8f\x8a\x5f\x14\x7f\x6f\xdd\xf7\x00\x00\x00\xff\xff\x14\x4f\xe6\x24\x8b\x02\x00\x00")

func extraAuthorizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAuthorizationYaml,
		"extra/authorization.yaml",
	)
}

func extraAuthorizationYaml() (*asset, error) {
	bytes, err := extraAuthorizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/authorization.yaml", size: 651, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAutoscalingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\xc1\x4a\x04\x31\x0c\x06\xe0\x7b\x9f\xe2\x7f\x81\x5d\x99\x6b\x6f\xe2\xc1\xbb\x88\xf7\xd0\x09\xbb\xc5\xb6\x09\x49\x3a\xa0\x4f\x2f\x95\x1d\xf0\x60\x4e\x81\x7c\xf9\x49\x48\xeb\x07\x9b\x57\x19\x19\x9d\x83\xae\xa4\xea\x45\x76\xbe\x16\xe9\x4f\xc7\x46\x4d\xef\xb4\xa5\xcf\x3a\xf6\x8c\x37\x76\x99\x56\xf8\xa5\x91\x7b\x5a\x7c\xa7\xa0\x9c\x80\x62\x4c\x51\x65\xbc\xd7\xce\x1e\xd4\x35\x63\xcc\xd6\x12\x30\xa8\x73\xc6\xf3\x0c\xf1\x42\xad\x8e\x5b\x72\xe5\xb2\x76\x48\xeb\xab\xc9\xd4\x0c\xfa\x33\x05\x78\x84\x55\xf6\x45\x2e\x10\x5d\xb1\xd4\x32\xc2\x26\x27\x00\x88\x2f\xe5\xfc\xdb\x5d\x70\xfb\x2f\x60\x95\x3d\x4e\xcd\xb8\x8b\xd5\x6f\x19\x41\x4d\x65\x3f\x21\x9b\x3f\xe0\x71\x7e\x7f\x6c\xe9\x27\x00\x00\xff\xff\x7f\xca\x77\xfa\x0d\x01\x00\x00")

func extraAutoscalingYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAutoscalingYaml,
		"extra/autoscaling.yaml",
	)
}

func extraAutoscalingYaml() (*asset, error) {
	bytes, err := extraAutoscalingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/autoscaling.yaml", size: 269, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraCertificateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xbf\x4a\x04\x41\x0c\x06\xf0\x7e\x9e\x22\x2f\x70\x2b\xdb\xc9\xb4\x57\xd8\x8b\xd8\xc7\xd9\xcf\x35\xdc\xfc\x89\x93\xcc\x82\x6f\x2f\x23\x2b\x62\x73\xa9\x02\xf9\xe5\x23\x84\x55\x5e\xd1\x4d\x5a\x8d\x54\xe0\xbc\xb0\xaa\xa5\xb6\x61\x49\xad\x3c\x1c\x2b\x67\xfd\xe0\x35\xdc\xa4\x6e\x91\x9e\x61\x6d\xf4\x84\x6b\x66\xb3\x30\xf9\xc6\xce\x31\x10\xa5\x0e\x76\x69\xf5\x45\x0a\xcc\xb9\x68\xa4\x3a\x72\x0e\x44\x95\x0b\x22\x5d\xd1\x5d\xde\x25\xb1\x23\x98\x22\xcd\x1d\x56\x79\xea\x6d\x68\xa4\xf4\x37\xb5\xe5\xf6\x68\x8b\xb4\x40\x84\xea\x5d\x60\x93\x5e\xa8\xe9\x8c\xe7\x1c\xc9\xfb\x40\x20\x22\xf2\x2f\x45\xfc\xe9\x2e\xb4\xdf\x0b\x9a\xd5\xcf\xd3\xff\x1b\xd9\xab\xd4\xbd\xe3\x73\xc0\xdc\x4e\x7a\xfc\xfe\xe3\x58\xdf\xe0\xbc\x86\xef\x00\x00\x00\xff\xff\x1a\xd6\xd4\x50\x24\x01\x00\x00")

func extraCertificateYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraCertificateYaml,
		"extra/certificate.yaml",
	)
}

func extraCertificateYaml() (*asset, error) {
	bytes, err := extraCertificateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/certificate.yaml", size: 292, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraCoordinationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x31\x6a\x04\x31\x0c\x45\x7b\x9f\xe2\x5f\x60\x27\x4c\x17\xd4\x6e\x91\x3e\x84\xf4\xc2\x23\x12\xb1\xb6\x25\x2c\x7b\x20\xb7\x0f\x5e\x36\x90\x6a\x55\x09\xbd\x27\xa1\xcf\xae\x9f\xd2\x43\xad\x11\xaa\x0c\xde\xd8\x3d\xb2\x1d\xb2\x65\xab\x2f\xe7\xce\xc5\xbf\x79\x4f\x37\x6d\x07\xe1\x5d\xc2\x66\xcf\x72\x2d\x1c\x91\x96\x7e\xf0\x60\x4a\x40\xee\xc2\x43\xad\x7d\x68\x95\x18\x5c\x9d\xd0\x66\x29\x09\x68\x5c\x85\x70\x35\xeb\x87\xb6\xbb\x93\xc2\x25\xaf\x25\x76\x7d\xeb\x36\x9d\x90\xff\xe1\xed\xf6\x1a\x9b\x5a\x02\xa4\x8d\xae\x12\x4b\xbd\xc0\x7c\x41\x2e\x84\xd1\xa7\x24\x00\x18\x3f\x2e\x74\xef\x2e\xf8\x7a\x76\x68\x55\x7f\xfc\x4e\x28\xc2\x21\xf1\x18\x9f\x7f\xe1\xcf\x3d\xfd\x06\x00\x00\xff\xff\x59\x40\x51\x16\x0c\x01\x00\x00")

func extraCoordinationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraCoordinationYaml,
		"extra/coordination.yaml",
	)
}

func extraCoordinationYaml() (*asset, error) {
	bytes, err := extraCoordinationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/coordination.yaml", size: 268, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraCoreYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd4\xb1\x6e\xe3\x30\x0c\x00\xd0\xdd\x5f\x41\x64\x4f\x0e\x59\xb5\x66\xb8\xfd\x70\xb8\x9d\x91\x18\x1f\x51\x89\x64\x45\xda\x40\xff\xbe\x50\x9a\x02\x1d\xb2\xc5\xf6\x24\x98\xc4\x23\x4d\xd0\x42\xe3\x7f\xd4\x9d\x55\x12\x34\x0a\x3c\xa1\x99\x67\x2d\x74\xca\xda\x7e\xad\x67\xac\xf6\x1f\xcf\xd3\x1b\x4b\x49\xf0\x87\x5c\x97\x9e\xe9\x52\xd1\x7d\x1a\xe9\x05\x03\xd3\x04\x90\x3b\x61\xb0\xca\x5f\x6e\xe4\x81\xcd\x12\xc8\x52\xeb\x04\x20\xd8\x28\xc1\x45\x3b\x4d\x6e\x94\x47\x32\x1a\xff\xee\xba\x58\x82\xc3\x61\x02\xa0\xc2\x81\xd7\x4a\x09\x6e\x58\x9d\xc6\x1b\x89\xce\xe4\x23\xf7\x08\x6a\x03\xc6\x9a\x20\xfa\x32\xa2\x00\xf1\x61\x94\xee\xa7\x23\xcc\x3f\xa4\xf1\xf4\x47\x8f\x09\xae\x2c\x85\x65\xf6\x47\x60\xfd\xfe\xcc\xf5\xfc\x9a\x9b\xb5\x99\x0a\x49\x78\x60\x2c\x4e\x3b\x14\x90\x1b\xcf\x0d\x6d\x73\x99\xa4\x98\xb2\xc4\xf6\xf0\x4a\x3b\xa8\x95\x1b\x47\x47\x99\xb7\x9f\xf1\x58\x4b\x37\xcc\x3b\xc8\x5a\x9e\xa2\xaf\xa9\xa6\x65\xf3\x4e\x4d\x4b\x50\xb3\x8a\xb1\xfd\x14\x3a\x59\xe5\x7c\xbf\x13\xb2\x4a\x74\xad\x95\xfa\x0e\x55\xbe\x4e\xef\x8b\x06\x6e\xae\x3b\xe5\x4e\xdb\x6f\xb5\x53\x5f\x39\x13\xe6\xac\xcb\x0e\x3f\xcd\x83\x7f\xe6\x7e\x06\x00\x00\xff\xff\x9d\xe7\xa9\xab\xed\x05\x00\x00")

func extraCoreYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraCoreYaml,
		"extra/core.yaml",
	)
}

func extraCoreYaml() (*asset, error) {
	bytes, err := extraCoreYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/core.yaml", size: 1517, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraEventYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x6a\x04\x31\x0c\x84\x7b\x3f\xc5\xbc\xc0\x6d\xd8\x2e\xb8\x0d\x21\x7d\x08\xe9\x15\xef\x90\x98\xf3\x8f\xb0\xb4\x86\xbc\x7d\x70\xb8\xeb\x4e\x95\x18\x7d\x7c\x68\x44\xf3\x27\x87\xe5\xde\x22\x2a\x5d\x36\x51\xb5\xd4\x0f\x6e\xa9\xd7\xa7\xb9\x4b\xd1\x1f\xd9\xc3\x35\xb7\x23\xe2\x9d\xd6\xcf\x91\xf8\x52\xc4\x2c\x2c\xfc\x10\x97\x18\x80\x34\x28\x9e\x7b\xfb\xc8\x95\xe6\x52\x35\xa2\x9d\xa5\x04\xa0\x49\x65\xc4\xeb\x64\xf3\x60\xca\xb4\x68\xd1\xfc\x36\xfa\xa9\x11\x5c\xb9\x6d\xd7\x67\xdb\x72\x0f\x00\x9b\x8f\x4c\x5b\xd0\x05\x5d\x97\x52\x4a\x84\x8f\x93\x01\x00\xfc\x57\x19\xff\xb7\x0b\xbe\x1f\x2b\xd6\x8c\xdb\xa3\xf7\xeb\x2d\x9e\xf7\xa6\x73\xff\xa2\xcb\x1e\xfe\x02\x00\x00\xff\xff\x74\x46\xb5\x64\xfe\x00\x00\x00")

func extraEventYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraEventYaml,
		"extra/event.yaml",
	)
}

func extraEventYaml() (*asset, error) {
	bytes, err := extraEventYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/event.yaml", size: 254, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraExampleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4a\x05\x41\x0c\x45\xfb\xf9\x8a\xfb\x03\xef\xc9\xb6\x69\x45\xec\x45\xec\xe3\x6c\xd0\xc1\x99\x49\x48\xb2\x8b\xfe\xbd\x8c\x3e\x3b\x53\x05\xee\xe1\x24\x97\xad\xbd\x88\x47\xd3\x49\x18\x92\x7c\x65\xb3\xa8\xba\xcb\xb5\xea\xb8\x3b\x37\xee\xf6\xce\x5b\xf9\x68\x73\x27\x3c\x49\xe8\xe1\x55\xee\x3b\x47\x94\x85\xef\x9c\x4c\x05\xa8\x2e\x9c\x4d\xe7\x73\x1b\x12\xc9\xc3\x08\xf3\xe8\xbd\x00\x93\x87\x10\x1e\x3e\x79\x58\x97\x12\x26\x75\xf1\x6c\xed\xd1\xf5\x30\x82\xfc\x26\xeb\x5c\x01\x64\xa6\x37\x89\x85\x5c\xa0\xb6\x94\xdc\x09\xe9\x87\x14\x00\xc8\x2f\x13\xfa\xd9\x2e\x78\xfb\x4f\xb0\xc6\x6f\x6f\x12\xaa\xeb\x4c\x7e\x8d\x5b\x70\xfe\x35\x3d\xb7\xf2\x1d\x00\x00\xff\xff\x8c\xca\xe7\x1c\xf9\x00\x00\x00")

func extraExampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraExampleYaml,
		"extra/example.yaml",
	)
}

func extraExampleYaml() (*asset, error) {
	bytes, err := extraExampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/example.yaml", size: 249, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraExtensionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x4e\xc4\x40\x0c\x84\xfb\x7d\x8a\x79\x81\x3b\x94\xd6\x2d\x42\xf4\x08\xd1\xfb\x92\xe1\x58\xb1\x3f\xd6\xda\x89\xe0\xed\xd1\x22\xd2\xe1\xca\xf2\xe7\xf1\x78\xd4\xf2\x1b\x87\xe7\xde\x04\x95\xa1\x57\x35\xf3\xb5\x6f\xbc\xae\xbd\x3e\x1c\x8b\x16\xfb\xd0\x25\x7d\xe6\xb6\x09\x5e\xe8\x7d\x1f\x2b\x1f\x8b\xba\xa7\xb9\xbe\x69\xa8\x24\x60\x1d\xd4\xc8\xbd\xbd\xe6\x4a\x0f\xad\x26\x68\x7b\x29\x09\x68\x5a\x29\x78\xfa\x0a\xb6\xe9\x92\xdc\xb8\x4e\x85\x5a\x7e\x1e\x7d\x37\x01\x4f\xe6\x09\xe0\x96\x43\x6f\x85\x82\x77\x2d\xce\x39\x69\x31\x32\x7d\x6a\x2e\xe8\x36\x5d\xb4\x08\x62\xec\x93\x02\xf1\x6d\x94\xdf\xee\x82\xfb\x3f\x17\x67\x8d\xbf\xc7\x05\xb9\xdd\x07\xdd\x79\x92\xe3\x0c\x7f\x2c\x37\x86\x2e\xe9\x27\x00\x00\xff\xff\x4c\x32\xbd\x0b\x11\x01\x00\x00")

func extraExtensionYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraExtensionYaml,
		"extra/extension.yaml",
	)
}

func extraExtensionYaml() (*asset, error) {
	bytes, err := extraExtensionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/extension.yaml", size: 273, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraNodeYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x4e\x04\x31\x0c\x84\xfb\x3c\x85\x5f\xe0\x16\x6d\x87\xd2\x52\xd0\x51\x20\x44\xef\xcb\x0e\x60\x5d\x7e\xac\xd8\x59\x89\xb7\x47\x46\x47\x87\x2b\xcb\xf3\xd9\x33\x66\x95\x77\x4c\x93\xd1\x33\x35\x38\x6f\xac\x6a\x65\x1c\xd8\xca\x68\x0f\xe7\xce\x55\xbf\x78\x4f\x37\xe9\x47\xa6\x57\xd8\x58\xb3\xe0\xa9\xb2\x59\x0a\xfc\x60\xe7\x9c\x88\xca\x04\xbb\x8c\xfe\x26\x0d\xe6\xdc\x34\x53\x5f\xb5\x26\xa2\xce\x0d\x99\x5e\xc6\x81\x64\x8a\x12\x30\xab\x3c\xcf\xb1\x82\x09\xa3\xdb\xa3\x6d\x32\x12\x11\x0e\x71\xbe\x56\x64\xfa\xe0\x6a\x88\x49\xf7\x29\xb0\x58\xba\xd0\xd0\x70\xe0\x9a\xc9\xe7\x0a\x95\xc8\xbf\x15\xf9\xb7\xbb\xd0\xe7\x7f\x27\xa3\xe6\x3d\x75\xa6\xb9\xba\x4b\x43\x89\xf8\xb0\xbb\x7c\xfe\xbd\x7f\xee\x57\x38\xef\xe9\x27\x00\x00\xff\xff\x79\xef\xf7\x35\x13\x01\x00\x00")

func extraNodeYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraNodeYaml,
		"extra/node.yaml",
	)
}

func extraNodeYaml() (*asset, error) {
	bytes, err := extraNodeYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/node.yaml", size: 275, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraSchedulingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xbd\x4e\x43\x31\x0c\x85\xf7\x3c\xc5\x79\x81\x5e\x74\x37\xe4\x95\x81\x1d\x10\xbb\x49\x4c\x6b\x35\x3f\x56\x9c\x5c\xa9\x6f\x8f\x82\x0a\x5b\x3d\x59\xfe\x7c\x6c\x9d\xc3\xa6\x9f\xd2\x5d\x5b\x25\x14\x19\xbc\xb1\x99\xc7\x96\x64\x8b\xad\x3c\x1d\x3b\x67\xbb\xf0\x1e\xae\x5a\x13\xe1\x4d\xbc\xcd\x1e\xe5\x25\xb3\x7b\x58\xeb\x89\x07\x53\x00\x62\x17\x1e\xda\xea\x87\x16\xf1\xc1\xc5\x08\x75\xe6\x1c\x80\xca\x45\x08\xef\xf1\x22\x69\x66\xad\xe7\xe0\x26\x71\x49\xd8\xf4\xb5\xb7\x69\x04\xff\x87\xdb\xf5\xd9\x37\x6d\x01\x90\xa4\x83\xbf\xb2\x10\xbe\x39\xbb\xac\x49\x1d\x5d\xc5\x97\xf4\x84\x66\xeb\x1b\x67\xc2\xe8\x73\x51\x60\xdc\x4c\xe8\xb7\x3b\xe1\xfc\xf8\xf0\xaa\x7e\xf7\x41\xb0\xae\xad\xeb\xb8\xc5\xe5\x48\xfc\xce\x8f\xbf\x44\x8e\x3d\xfc\x04\x00\x00\xff\xff\x57\xcb\xa3\x1a\x21\x01\x00\x00")

func extraSchedulingYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraSchedulingYaml,
		"extra/scheduling.yaml",
	)
}

func extraSchedulingYaml() (*asset, error) {
	bytes, err := extraSchedulingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/scheduling.yaml", size: 289, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _networkingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xcd\x4a\x04\x31\x10\x84\xef\x79\x8a\x62\x0e\xde\x76\x64\x6f\x92\xab\x82\x78\x11\x51\xd8\x7b\x9b\x6d\xc7\x66\x67\xd3\x21\x9d\x8d\xcc\xdb\xcb\xfc\x08\x33\xe0\xc5\x9f\x5b\x12\x2a\x5f\x55\x75\x53\x92\x03\x67\x13\x8d\x1e\x67\x2e\xd4\x52\x4a\x16\xf4\xc8\x6d\xd0\xf3\x75\xdd\x53\x9f\xde\x69\xef\x4e\x12\x8f\x1e\xcf\x6c\x7a\xc9\x81\x6f\x7b\x32\x73\xa3\xfc\x48\x85\xbc\x03\x22\x9d\xd9\xa3\x79\xe1\x5c\x25\x30\xae\x70\x27\x16\xb4\x72\x1e\x1a\x67\x89\xc3\xa8\xa1\x24\xf7\x59\x2f\xc9\x23\x72\xf9\xd0\x7c\x92\xd8\xb5\xa7\x1b\x6b\x45\x1d\xc0\xb1\x64\x61\x1b\x85\xbb\x05\xb7\xd0\xcc\x01\x80\xa6\x22\x1a\xa9\xf7\x78\xa3\xde\x78\x7a\x2b\x43\x62\x3f\x9d\x76\xe8\x66\x74\xd3\x4c\x77\x20\x2f\x59\x3d\x6c\x8d\x01\xea\x57\xdd\xba\x5f\x79\x3d\xc4\x2e\xb3\xd9\xcf\xcc\xbe\xeb\xb1\xf5\x96\x0d\x76\x63\xfe\xca\x85\xd6\x09\x0e\x3a\x50\xc7\xf9\x77\x49\xea\xfc\x79\xb3\xbd\xbf\x84\x79\x9c\x9b\xe1\x49\x7b\x09\xf2\xdf\x53\x59\x14\x69\x0d\xdf\x2e\xe6\x33\x00\x00\xff\xff\x12\xec\xe8\x06\x97\x02\x00\x00")

func networkingYamlBytes() ([]byte, error) {
	return bindataRead(
		_networkingYaml,
		"networking.yaml",
	)
}

func networkingYaml() (*asset, error) {
	bytes, err := networkingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "networking.yaml", size: 663, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _securityYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x6b\xf3\x30\x0c\x86\xef\xfe\x15\xa2\xd7\x8f\xd6\xe4\xf6\xe1\xdb\xe8\x1f\x18\x2b\xec\xae\x29\x5a\x2a\x9a\xd8\xc6\x52\xdc\xe5\xdf\x8f\x64\x29\x6d\x57\x18\xdb\x4d\x88\x27\x7a\x9f\xf8\xc5\x2c\xaf\x5c\x54\x52\x0c\x30\xb0\xe1\x0e\x73\x56\x4a\x2d\xef\x28\x0d\xbe\x36\xd8\xe7\x23\x36\xee\x24\xb1\x0d\xf0\xc2\x9a\xc6\x42\xbc\xef\x51\xd5\xcd\x78\x8b\x86\xc1\x01\x44\x1c\x38\xc0\x81\x69\x2c\x62\x93\xd3\xcc\x34\xaf\x39\x5a\x11\xd6\x79\xdc\xae\xcc\x73\xea\x85\x26\x07\x00\x90\xb2\x49\x8a\xd8\x07\xb0\x32\xf2\xb2\xb2\x29\x73\x58\xa6\x2d\x74\x25\x8d\x39\x40\xbe\x7e\x00\x50\x56\x83\x79\xdd\xea\x1a\xb7\x10\xc2\xba\x32\xf5\xf2\x3f\xb5\x79\x63\xc3\xe6\x26\x7c\xcf\xc5\xe4\x5d\x08\x6d\xa5\x7f\xa7\x50\xd3\x84\x1d\x97\xbb\xb7\x79\x10\xa2\xef\xb7\x7f\x34\x39\x70\xa9\x42\x0c\x4f\x44\x69\x8c\xf6\x17\x9b\xcd\xe6\x21\x5b\xbf\xae\xe1\xed\xb1\xbb\x78\x07\x20\x94\xe2\xda\x84\x16\x0a\x70\x34\xcb\x1a\xbc\xa7\x36\xde\x97\x7e\xfa\xaf\x7e\x81\xfd\x25\x80\xe6\xbe\x59\xfd\x39\x95\x53\x9f\xb0\xd5\x9d\xd6\xee\xaa\x07\x32\x60\xc7\x5e\x6b\xf7\xef\x63\xe8\x1d\xc0\x99\xa5\x3b\x5a\x80\xc6\x7d\x06\x00\x00\xff\xff\x22\x0b\xf7\xdf\x5f\x02\x00\x00")

func securityYamlBytes() ([]byte, error) {
	return bindataRead(
		_securityYaml,
		"security.yaml",
	)
}

func securityYaml() (*asset, error) {
	bytes, err := securityYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "security.yaml", size: 607, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x4a\x03\x31\x10\xc7\xef\x79\x8a\x3f\xbd\x4a\x37\xf4\x20\x94\x5c\xfb\x02\xa2\xd0\xfb\x90\x1d\xb7\xa1\xf9\x22\x93\xae\xfa\xf6\xb2\x31\x6b\xfd\x40\x41\xf0\x36\x99\x4c\x7e\xf3\xcb\x24\x94\xdd\x91\x8b\xb8\x14\x0d\x02\x57\x1a\x28\x67\xb1\x69\xe4\xc1\xa6\xa0\xe7\x1d\xf9\x7c\xa2\x9d\x3a\xbb\x38\x1a\xdc\xb3\xa4\x4b\xb1\x7c\xf0\x24\xa2\x96\xf2\x91\x2a\x19\x05\x44\x0a\x6c\xf0\x50\x53\xa1\x89\x95\x64\xb6\x4b\x96\x63\x2d\x8e\x65\x09\xb7\xbd\xe4\x6e\x69\x26\x95\x63\xc5\x31\xf9\x4b\x60\x1c\x3c\xb9\x20\x0a\x00\x52\xae\x2e\x45\xf2\x06\x8f\xe4\x85\x5b\xae\xbe\x64\x36\x2d\xda\x62\x2a\xe9\x92\x0d\x36\x9b\xb6\x06\x4a\xf7\x31\xc8\xef\xd8\xb9\x51\xed\x15\x0a\xcc\xeb\x05\xe7\xdd\xcf\x26\x3e\xf0\x7f\x4b\xfc\xde\xbf\x0f\x0b\x6d\x98\x7f\xeb\x2d\x6f\x47\x87\xf3\x5e\x06\x97\xbe\x79\xf4\x6d\xfb\x01\xfc\x55\xc2\xd9\x14\xfb\xbb\x48\xb1\x06\xa7\x5a\xb3\x18\xad\xed\x18\x3f\xff\x80\xf3\x5e\x74\x2b\xd6\x2b\xbf\x63\xf5\x2a\x21\xf3\x74\xf5\x84\x0b\x34\xb1\x96\x79\xba\x79\x0e\x5e\x01\x4f\xec\xa6\x53\x35\xb8\x55\xaf\x01\x00\x00\xff\xff\xc8\x1c\x8d\x90\x6a\x02\x00\x00")

func storageYamlBytes() ([]byte, error) {
	return bindataRead(
		_storageYaml,
		"storage.yaml",
	)
}

func storageYaml() (*asset, error) {
	bytes, err := storageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storage.yaml", size: 618, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workloadsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x8e\xda\x30\x10\x86\xef\x79\x8a\x11\xd7\x0a\xa2\xdc\x2a\x5f\xe1\xd4\x53\x05\x52\x7b\x1e\xec\x21\x71\x71\x3c\x96\x67\x12\xca\xdb\x57\x49\x13\x2d\xcb\x82\x58\xb4\xdc\xac\xd1\xe4\xfb\xfe\x5f\x8a\x8d\xc9\xff\xa2\x2c\x9e\xa3\x81\x96\x14\x57\x98\x92\x58\x76\xb4\xb2\xdc\x96\x7d\x85\x21\x35\x58\x15\x47\x1f\x9d\x81\x2d\x09\x77\xd9\xd2\x3a\xa0\x48\x31\xac\x3b\x54\x34\x05\x40\xc4\x96\x0c\xfc\xe6\x7c\x0c\x8c\x4e\x0a\x49\x64\x87\x39\x45\xcd\x9e\x64\x38\x2e\xa7\xa5\x0d\xa5\xc0\xe7\x96\xa2\x4a\x01\x00\xc0\x49\x3d\x47\x0c\x06\x0e\x18\x84\xc6\x99\x9e\x13\x99\xf1\xb4\x84\x3a\x73\x97\x0c\x0c\xb9\xc6\x09\x40\x9e\x62\x18\x70\x57\x2c\x80\x7e\x2e\xd3\x57\x17\xce\x2d\xa5\xe0\x2d\xc2\x8e\x5e\x20\xcd\xff\x61\x42\x9f\x93\x0e\x22\x58\x73\xd4\xcc\x21\x50\x7e\xca\xbf\x58\xdc\xb3\x0f\x9f\xdb\x2b\xe8\xbd\x20\x3b\x45\xa5\x43\x17\x5e\x53\x5f\x26\xda\xc3\xfe\x1b\xa4\x96\xe3\x6b\xa4\x6e\x64\x3d\x54\xfe\xe0\xfd\x53\xae\x3d\xaa\x6d\x3e\xc8\xfe\xcc\x94\x7b\x9a\x75\xe6\x78\xcb\xa5\xb9\x7b\x52\x65\x33\xc7\xdb\xba\x3d\x29\x5e\x3a\x7f\xb2\xfb\xea\xaf\x93\x66\xc4\x75\x2f\x6f\x39\x4e\x77\x54\xb2\x35\xd0\xa8\x26\x31\x65\x69\x5d\x7c\xff\x1e\x1c\xbf\x4b\x39\x2e\x97\x33\xd5\x0e\x4f\x01\x49\x79\x9a\xaf\xfe\x4a\xfa\xfa\x2d\x13\xf8\x16\x6b\x2a\xa5\xaf\xbf\xfd\x6d\x43\x01\x70\x22\x5f\x37\x6a\xa0\x2a\xfe\x05\x00\x00\xff\xff\x59\x63\xce\x81\x7a\x04\x00\x00")

func workloadsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workloadsYaml,
		"workloads.yaml",
	)
}

func workloadsYaml() (*asset, error) {
	bytes, err := workloadsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workloads.yaml", size: 1146, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin.yaml":                       adminYaml,
	"config.yaml":                      configYaml,
	"extra/admissionregistration.yaml": extraAdmissionregistrationYaml,
	"extra/apiextension.yaml":          extraApiextensionYaml,
	"extra/apiregistration.yaml":       extraApiregistrationYaml,
	"extra/authentication.yaml":        extraAuthenticationYaml,
	"extra/authorization.yaml":         extraAuthorizationYaml,
	"extra/autoscaling.yaml":           extraAutoscalingYaml,
	"extra/certificate.yaml":           extraCertificateYaml,
	"extra/coordination.yaml":          extraCoordinationYaml,
	"extra/core.yaml":                  extraCoreYaml,
	"extra/event.yaml":                 extraEventYaml,
	"extra/example.yaml":               extraExampleYaml,
	"extra/extension.yaml":             extraExtensionYaml,
	"extra/node.yaml":                  extraNodeYaml,
	"extra/scheduling.yaml":            extraSchedulingYaml,
	"networking.yaml":                  networkingYaml,
	"security.yaml":                    securityYaml,
	"storage.yaml":                     storageYaml,
	"workloads.yaml":                   workloadsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"admin.yaml":  &bintree{adminYaml, map[string]*bintree{}},
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
	"extra": &bintree{nil, map[string]*bintree{
		"admissionregistration.yaml": &bintree{extraAdmissionregistrationYaml, map[string]*bintree{}},
		"apiextension.yaml":          &bintree{extraApiextensionYaml, map[string]*bintree{}},
		"apiregistration.yaml":       &bintree{extraApiregistrationYaml, map[string]*bintree{}},
		"authentication.yaml":        &bintree{extraAuthenticationYaml, map[string]*bintree{}},
		"authorization.yaml":         &bintree{extraAuthorizationYaml, map[string]*bintree{}},
		"autoscaling.yaml":           &bintree{extraAutoscalingYaml, map[string]*bintree{}},
		"certificate.yaml":           &bintree{extraCertificateYaml, map[string]*bintree{}},
		"coordination.yaml":          &bintree{extraCoordinationYaml, map[string]*bintree{}},
		"core.yaml":                  &bintree{extraCoreYaml, map[string]*bintree{}},
		"event.yaml":                 &bintree{extraEventYaml, map[string]*bintree{}},
		"example.yaml":               &bintree{extraExampleYaml, map[string]*bintree{}},
		"extension.yaml":             &bintree{extraExtensionYaml, map[string]*bintree{}},
		"node.yaml":                  &bintree{extraNodeYaml, map[string]*bintree{}},
		"scheduling.yaml":            &bintree{extraSchedulingYaml, map[string]*bintree{}},
	}},
	"networking.yaml": &bintree{networkingYaml, map[string]*bintree{}},
	"security.yaml":   &bintree{securityYaml, map[string]*bintree{}},
	"storage.yaml":    &bintree{storageYaml, map[string]*bintree{}},
	"workloads.yaml":  &bintree{workloadsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
