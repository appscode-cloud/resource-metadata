// Package resourceclasses Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// admin.yaml
// config.yaml
// extra/admissionregistration.yaml
// extra/apiextension.yaml
// extra/apiregistration.yaml
// extra/authentication.yaml
// extra/authorization.yaml
// extra/autoscaling.yaml
// extra/certificate.yaml
// extra/coordination.yaml
// extra/core.yaml
// extra/event.yaml
// extra/example.yaml
// extra/extension.yaml
// extra/node.yaml
// extra/scheduling.yaml
// networking.yaml
// security.yaml
// storage.yaml
// workloads.yaml
package resourceclasses

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xcb\x6a\x2b\x31\x0c\x86\xf7\x7e\x0a\x91\xed\xe1\x8c\x99\x03\x07\x82\x77\xa5\x6f\xd0\x45\xf7\x8a\xad\x7a\x44\x7c\xab\xa5\x99\x5e\x9e\xbe\xcc\x90\xd0\x36\xd0\xb4\xdd\xd9\x96\xbe\xcf\x3f\xfc\xd8\xf8\x9e\xba\x70\x2d\x0e\x32\x29\x0e\xd8\x9a\xf8\x1a\x68\xf0\x35\xdb\x65\xc4\xd4\x26\x1c\xcd\x91\x4b\x70\x70\x47\x52\xe7\xee\xe9\x36\xa1\x88\x59\xd7\x03\x2a\x3a\x33\xfe\x03\x28\x98\xc9\xc1\x4d\xc8\x5c\x8c\x34\xf2\xce\x00\xf4\xd3\xbe\xac\x97\xbf\x10\x7b\x9d\x9b\x83\xdd\xce\x00\xbc\x0f\xdd\x86\x4a\x43\x4f\xb2\x0d\x96\x73\x9e\x65\xbc\x8a\x25\xce\xac\x1d\x4b\xfc\x25\x77\x3e\x3d\xce\x55\xf1\x2a\xda\x0f\xe8\x07\x9c\x75\xaa\x9d\x5f\x51\xb9\x96\xe1\xb8\x97\x81\xeb\x85\xd1\xa7\x59\x94\x7a\xaf\xe9\x7a\x94\x9f\xfa\xbe\x15\x89\xd6\x8e\x91\xbe\x48\x23\x1c\x3a\xaf\xe4\xa5\xe2\x40\x8a\xab\x87\x7d\x2d\xa7\x4e\xa4\x7b\x07\x93\x6a\x13\x67\xad\x0f\xe5\x73\xff\xc7\xbd\xd8\x6d\xd9\x9e\xf5\x7e\xad\x9e\xc4\xe2\x5a\xf4\x20\x4b\xdc\xfe\xd0\x97\x46\x0e\x38\x63\x24\x2b\x4b\xfc\xf3\x9c\x93\x01\x78\x22\x8e\x93\x3a\xf8\x6f\x00\x16\x16\x3e\x24\x72\xf0\x80\x49\xc8\x00\x50\x60\xc5\x0f\x2f\x6f\x01\x00\x00\xff\xff\x56\xa8\x53\x10\x89\x02\x00\x00")

func adminYamlBytes() ([]byte, error) {
	return bindataRead(
		_adminYaml,
		"admin.yaml",
	)
}

func adminYaml() (*asset, error) {
	bytes, err := adminYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "admin.yaml", size: 649, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x3d\x4f\x03\x31\x0c\x86\xf7\xfc\x0a\xab\x2b\xa2\xd1\x6d\xc8\x6b\x07\x76\x06\x76\x93\xb8\x39\xeb\xf2\xa5\x38\x4d\xe1\xdf\xa3\x9c\x5a\x51\x24\xc4\xea\xe7\xfd\xf0\x4b\x55\xde\xb9\xa9\x94\x8c\x90\xb8\xd3\x91\x6a\x55\x57\x3c\x1f\x5d\x49\x76\x2c\x14\xeb\x4a\x8b\xd9\x24\x7b\x84\x37\xd6\x72\x69\x8e\x4f\x91\x54\xcd\x94\x7b\xea\x84\x06\x20\x53\x62\x84\x53\xc9\x67\x09\x46\x2b\xbb\x79\xa4\x2a\xaf\xad\x5c\x2a\xc2\xe1\x60\x00\xda\xcd\xad\x93\x3d\x43\x78\x40\x3f\x10\xc1\xed\x21\x89\xaa\xee\x60\xdc\xbf\x1b\xcb\xbf\x36\x65\xd7\xb8\xff\xe5\x11\x57\xf2\xad\x53\x9b\x43\x58\x7b\xaf\x8a\xd6\x3a\x9f\x7f\xaf\xdd\x5e\xd4\xee\x62\x7b\x8f\x75\x73\x28\xab\xbd\x96\xb6\xc5\x42\x5e\x8f\x3a\xc2\x5e\xd1\xbf\x2a\x23\x48\xa2\xc0\x56\x47\x78\xfa\x4c\xd1\x00\x5c\x59\xc2\xda\x11\x66\xed\x10\x95\x8f\xc8\x08\x67\x8a\xca\x06\x80\xbd\x74\x7a\xb8\x7c\x07\x00\x00\xff\xff\x53\xff\xed\x7f\x7b\x01\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 379, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAdmissionregistrationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xb1\x4e\x05\x21\x10\x45\x7b\xbe\x62\x7e\xc0\x35\xdb\x19\x3a\x63\x61\x6f\x8c\xfd\x7d\x30\x6f\xdf\x64\x81\x21\x0c\xe0\xef\x9b\x7d\x6a\xb4\xb0\x50\xfb\x73\xee\x81\x41\x95\x17\x6e\x26\x5a\x3c\x65\xee\x58\x50\xab\x05\x8d\xbc\x04\xcd\xb7\x73\x45\xaa\x17\xac\x6e\x97\x12\x3d\x3d\xb1\xe9\x68\x81\x1f\x12\xcc\xdc\x81\x47\x74\x78\x47\x14\x1a\xa3\x8b\x96\x67\xc9\x6c\x1d\xb9\x7a\x2a\x23\x25\x47\x54\x90\xd9\xd3\x7d\xcc\x62\x47\xa5\xf1\x26\xd6\xdb\x15\x76\x56\x39\x1c\x36\xaa\x3c\x36\x1d\xd5\x13\x7e\xe2\x96\xfd\xce\x16\x51\x47\xc4\x51\x3a\x4e\x89\x3d\x9d\x91\x8c\x1d\x51\xfb\x78\x92\x1d\x3b\x37\xb4\xfd\x6a\xe6\x4b\xf3\x94\x47\x47\x97\xb2\xbd\xf2\xe9\xa2\xba\x07\x2d\x67\xd9\xc6\xbb\x61\x57\x76\x7e\xde\x67\xae\xff\x6c\x4c\x24\x89\x7f\xaa\x4c\x31\xf9\xf6\xcf\xb7\x00\x00\x00\xff\xff\xd7\x1c\xf8\x9b\xa6\x01\x00\x00")

func extraAdmissionregistrationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAdmissionregistrationYaml,
		"extra/admissionregistration.yaml",
	)
}

func extraAdmissionregistrationYaml() (*asset, error) {
	bytes, err := extraAdmissionregistrationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/admissionregistration.yaml", size: 422, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraApiextensionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x31\x4e\x05\x31\x0c\x44\xfb\x9c\x62\x2e\xc0\xa2\xed\x50\x3a\x44\x41\x8f\x10\xbd\x49\xfc\xc1\xfa\x49\x6c\xc5\xd9\x88\xe3\xa3\x20\x16\xa8\xe8\x6c\xf9\x3d\xcd\xc8\x64\xf2\xc2\xdd\x45\x5b\x44\xe5\x41\x1b\x99\x79\xd2\xcc\x5b\xd2\x7a\x3b\x77\x2a\xf6\x4e\x7b\xb8\x4a\xcb\x11\x4f\xec\x7a\xf4\xc4\x0f\x85\xdc\xc3\xc2\x33\x0d\x8a\x01\x48\x9d\x69\x88\xb6\x67\xa9\xec\x83\xaa\x45\xb4\xa3\x94\x00\x34\xaa\x1c\x71\x6f\xc2\x1f\x83\xdb\x0a\x0a\x6e\x9c\x96\x44\x26\x8f\x5d\x0f\x8b\x6b\xfa\x39\xfb\x76\xbd\xf3\x4d\x34\x00\x9c\x65\xd0\x6b\xe1\x88\x0b\x15\xe7\x00\xf4\xef\x06\xbe\xfc\x1b\xbc\xfd\xab\xff\xe2\x11\xe9\xf0\xa1\xf5\xdc\x33\x5f\xa4\xc9\x2a\xec\x5f\xdc\x3c\x5f\x30\xf7\x00\x4c\x71\xf9\x93\xfa\x19\x00\x00\xff\xff\x10\x84\x0f\x17\x23\x01\x00\x00")

func extraApiextensionYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraApiextensionYaml,
		"extra/apiextension.yaml",
	)
}

func extraApiextensionYaml() (*asset, error) {
	bytes, err := extraApiextensionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/apiextension.yaml", size: 291, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraApiregistrationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x3d\x4e\xc4\x40\x0c\x85\x7b\x9f\xe2\x5d\x80\xa0\x74\x68\x3a\x44\x41\x8f\x10\xbd\x99\x98\xc5\xda\xf9\xb1\xec\xc9\x9c\x1f\x25\x02\xb1\xdd\x76\x96\xfc\xbd\xcf\x7e\x6c\xfa\x21\x1e\xda\x5b\x42\x95\xc1\x0b\x9b\x45\xee\x9b\x2c\xb9\xd7\xc7\xb9\x72\xb1\x6f\x5e\xe9\xaa\x6d\x4b\x78\x93\xe8\xbb\x67\x79\x29\x1c\x41\x07\xbe\xf1\xe0\x44\x40\x76\xe1\xa1\xbd\xbd\x6b\x95\x18\x5c\x2d\xa1\xed\xa5\x10\xd0\xb8\x4a\xc2\xb3\xa9\xcb\x45\x63\xf8\x89\x51\x98\xe4\x23\xc7\xa6\xaf\xde\x77\x4b\xc7\x74\x4b\x2c\xd7\xa7\x58\xb4\x13\x20\x9b\x0e\xfe\x2c\x92\xf0\xc5\x25\x84\x00\xff\x7d\x23\x0e\xc3\x03\x2e\x77\x04\xff\x81\x13\x0a\xf1\xa9\x59\xe2\xdc\xcc\xbf\xee\x73\x25\x60\x6a\xe8\xcd\xa5\x9f\x00\x00\x00\xff\xff\xba\x7d\xbb\x90\x1c\x01\x00\x00")

func extraApiregistrationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraApiregistrationYaml,
		"extra/apiregistration.yaml",
	)
}

func extraApiregistrationYaml() (*asset, error) {
	bytes, err := extraApiregistrationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/apiregistration.yaml", size: 284, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAuthenticationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcf\x3d\x4e\xc5\x40\x0c\x04\xe0\x7e\x4f\x31\x17\x20\x28\x1d\xda\x0e\x51\xd0\x23\x44\x6f\x36\x03\xcf\xca\xfe\x69\xed\x2c\xd7\x47\x79\x02\x01\x0d\xb5\xbf\xb1\x3d\xd2\xf5\x85\xc3\xb4\xd5\x88\x42\x97\x45\x7a\xb7\xd4\x36\x2e\xa9\x95\xdb\xb9\x4a\xee\x17\x59\xc3\xae\x75\x8b\x78\xa2\xb5\x63\x24\x3e\x64\x31\x0b\x27\xdf\xc4\x25\x06\x20\x0d\x8a\x6b\xab\xcf\x5a\x68\x2e\xa5\x47\xd4\x23\xe7\x00\x54\x29\x8c\xb8\x3f\xfc\xc2\xea\x9a\xae\x2a\x58\x67\x3a\x63\xd2\xf5\x71\xb4\xa3\x47\xc8\x1f\xb0\xec\x77\xb6\x68\x0b\x00\x37\x75\x79\xcd\x8c\x78\x93\x6c\x0c\xc0\xf8\x7a\xc2\xce\x05\x37\x78\xff\x3f\xff\xe3\x23\xbc\xed\xac\x83\x53\xf9\x61\xd7\xd1\xfc\x6e\x3e\xd7\x00\x4c\x35\xfd\x75\xe9\x33\x00\x00\xff\xff\xde\x05\x7e\xf4\x1a\x01\x00\x00")

func extraAuthenticationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAuthenticationYaml,
		"extra/authentication.yaml",
	)
}

func extraAuthenticationYaml() (*asset, error) {
	bytes, err := extraAuthenticationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/authentication.yaml", size: 282, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAuthorizationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\xb1\x4a\x44\x31\x10\x45\xfb\x7c\xc5\xfc\x80\x4f\xb6\x93\x74\x62\x61\x2f\x62\x3f\x9b\x77\xd7\x1d\x77\x92\x09\x99\x24\x82\x5f\x2f\x6f\x51\xdc\x4a\x14\xb4\x9e\x73\x0e\xc3\xe5\x2a\x4f\x68\x2e\x56\x22\x65\x74\x5e\xb8\x56\x4f\xb6\x62\x49\x96\xaf\xe7\x8e\xb5\x1e\x79\x17\x4e\x52\xd6\x48\x0f\x70\x1b\x2d\xe1\x4e\xd9\x3d\x6c\xf8\xca\x9d\x63\x20\x4a\x0d\xdc\xc5\xca\xa3\x64\x78\xe7\x5c\x23\x95\xa1\x1a\x88\x0a\x67\x44\xba\x1d\xfd\x68\x4d\xde\xce\x50\xf0\x8a\xb4\x59\x5c\xe5\xbe\xd9\xa8\x91\xf8\xf2\xbe\x9c\x6e\x7c\x11\x0b\x44\x58\xa5\xf3\x5e\x11\xe9\xc0\xea\x08\x44\xed\xe3\x05\xdf\xfc\x2b\x7a\xfe\x56\xff\xc2\x23\xa9\x25\x56\x1f\xfb\x17\xa4\xce\x29\xc1\xbd\x61\x0a\x5e\xfd\xcc\xcd\xcf\x0d\xe6\xee\x97\x5d\x87\x1e\xfe\x37\xdb\x86\xe2\xaf\xaa\x3f\x7b\x74\x8a\xcb\xc5\xea\xef\x01\x00\x00\xff\xff\x81\x6b\xbd\x62\x24\x02\x00\x00")

func extraAuthorizationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAuthorizationYaml,
		"extra/authorization.yaml",
	)
}

func extraAuthorizationYaml() (*asset, error) {
	bytes, err := extraAuthorizationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/authorization.yaml", size: 548, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraAutoscalingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcf\x31\x4e\x04\x31\x0c\x85\xe1\x3e\xa7\x78\x17\x60\xd1\xb4\xe9\x10\x05\x3d\x42\xf4\x8f\x8c\xd9\xb5\x48\x62\x2b\xce\x4c\xc1\xe9\xd1\x20\x56\x6c\xb1\xb5\xbf\x5f\x4f\xa6\xeb\xbb\x8c\x50\xeb\x19\x4d\x26\x4f\x74\x8f\x62\xab\x9c\x8a\xb5\xc7\x7d\x61\xf5\x0b\x97\xf4\xa5\x7d\xcd\x78\x95\xb0\x6d\x14\x79\xae\x8c\x48\x07\x5f\x39\x99\x13\x50\x86\x70\xaa\xf5\x37\x6d\x12\x93\xcd\x33\xfa\x56\x6b\x02\x3a\x9b\x64\x3c\x6d\xd3\xa2\xb0\x6a\x3f\xa7\x70\x29\x47\x43\xd7\x97\x61\x9b\x67\xf0\xe6\x0a\xc8\xaa\x93\x1f\x55\x32\x3e\x59\x43\x12\x30\xfe\x76\xe3\xc8\x1e\x70\xbe\x57\xfd\xab\x8c\x8b\x0d\xfd\xb6\x3e\x59\xdd\xd6\x2b\x93\x11\xbf\x6c\xbf\xbe\xbb\x2f\x09\xd8\x35\xf4\x66\xeb\x27\x00\x00\xff\xff\x70\x5f\x9f\x6f\x0f\x01\x00\x00")

func extraAutoscalingYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraAutoscalingYaml,
		"extra/autoscaling.yaml",
	)
}

func extraAutoscalingYaml() (*asset, error) {
	bytes, err := extraAutoscalingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/autoscaling.yaml", size: 271, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraCertificateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\x3d\x4e\xc4\x40\x0c\xc5\xf1\x7e\x4e\xf1\x2e\x40\x50\x3a\x34\xed\x16\xf4\x08\xd1\x7b\x27\x6f\x83\xb5\xf3\xc5\xd8\xc9\xf9\x51\x10\x28\xd0\x50\xfb\xf7\xd7\x93\x2c\x5d\xdf\x38\x4c\x5b\x8d\x28\x74\x99\xa4\x77\x4b\x6d\xe1\x94\x5a\x79\xdc\x67\xc9\xfd\x5d\xe6\x70\xd7\xba\x44\xbc\xd0\xda\x36\x12\x2f\x59\xcc\xc2\xc1\x17\x71\x89\x01\x48\x83\xe2\xda\xea\xab\x16\x9a\x4b\xe9\x11\x75\xcb\x39\x00\x55\x0a\x23\x2e\x1c\xae\x37\x4d\xe2\x0c\xd6\x99\x8e\x46\xba\x3e\x8f\xb6\xf5\x88\x74\x5e\x6d\xba\x3f\xd9\xa4\x2d\x00\x5c\xd4\xe5\x9a\x19\x71\x93\x6c\x0c\xc0\xf8\xde\xb7\x23\x7f\xc0\xfa\x5f\x7d\xea\xbf\x42\xd7\xaa\x75\x1d\xfc\xd8\x68\x6e\x5f\x70\xff\x79\xc0\x3e\x5f\xe9\x32\x07\x60\x57\xd3\x5f\xd3\x9f\x01\x00\x00\xff\xff\x6d\x0f\x5d\xc2\x26\x01\x00\x00")

func extraCertificateYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraCertificateYaml,
		"extra/certificate.yaml",
	)
}

func extraCertificateYaml() (*asset, error) {
	bytes, err := extraCertificateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/certificate.yaml", size: 294, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraCoordinationYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xb1\x4e\x04\x31\x0c\x44\xfb\x7c\xc5\xfc\x00\x8b\xb6\x43\x6e\xaf\xa0\x47\x88\xde\x24\x06\xac\x4b\x62\x2b\xce\xe6\xfb\xd1\x9e\x40\x5c\x45\x6b\xbf\xa7\x99\x61\xd7\x37\x19\xa1\xd6\x09\x4d\x26\x6f\xec\x1e\xd9\x8a\x6c\xd9\xda\xe3\xda\xb9\xfa\x17\xef\xe9\xaa\xbd\x10\x5e\x24\xec\x18\x59\x2e\x95\x23\xd2\x89\x17\x9e\x4c\x09\xc8\x43\x78\xaa\xf5\x57\x6d\x12\x93\x9b\x13\xfa\x51\x6b\x02\x3a\x37\x21\x5c\xcc\x46\xd1\x7e\x63\x52\xb8\xe4\x53\x62\xd7\xe7\x61\x87\x13\xf2\xdd\x7b\xbb\x3e\xc5\xa6\x96\x00\x29\x3a\xf9\xbd\x0a\xe1\x83\x6b\x48\x02\xc6\x4f\x81\x38\xf5\x07\x7c\xfe\x67\xff\xd1\x84\x2a\x1c\x12\xb7\xe3\xfa\x5d\xbb\xf6\x04\x2c\x0d\xbd\x4b\xf8\x0e\x00\x00\xff\xff\x37\x02\x09\x93\x0e\x01\x00\x00")

func extraCoordinationYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraCoordinationYaml,
		"extra/coordination.yaml",
	)
}

func extraCoordinationYaml() (*asset, error) {
	bytes, err := extraCoordinationYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/coordination.yaml", size: 270, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraCoreYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd3\xb1\x8e\x23\x21\x0c\x06\xe0\x9e\xa7\xb0\xd2\x5f\x4e\x69\x69\x53\x5c\x7f\x3a\x5d\xef\x80\x33\x6b\x2d\xd8\x5e\xec\x99\xe7\x5f\x4d\x36\xab\x4d\x11\x45\xa2\x1b\x0d\xff\x87\xb1\x0c\x68\xfc\x9f\x86\xb3\x4a\x86\x4e\x81\x47\x34\xf3\xa2\x95\x8e\x45\xfb\xef\xed\x84\xcd\xde\xf0\x94\xde\x59\x6a\x86\xbf\xe4\xba\x8e\x42\xe7\x86\xee\x69\x8f\x57\x0c\xcc\x09\xa0\x0c\xc2\x60\x95\x7f\xdc\xc9\x03\xbb\x65\x90\xb5\xb5\x04\x20\xd8\x29\xc3\x59\x07\x25\x37\x2a\x7b\x18\x8d\xff\x0c\x5d\x2d\xc3\xe1\x90\x00\xa8\x72\xe0\xa5\x51\x86\x2b\x36\xa7\x04\x30\xee\x75\x7c\x4f\xff\x82\xe5\x21\xfc\xb3\x98\xe1\xc2\x52\x59\x16\xbf\xfd\xde\xbe\xbb\xd8\x4e\x2f\x51\xd1\x6e\x2a\x24\xe1\x81\xb1\x3a\xcd\x6a\xb9\xf2\xd2\xd1\xe6\x18\x49\x35\x65\x89\x49\xb5\xd1\x2c\x69\xdc\x39\x06\xca\x32\xd9\xd7\x3e\x25\x37\x2c\xb3\x4c\xeb\x13\xf1\x92\x98\xd6\xb9\x1a\xa6\x35\xa8\x5b\xc3\x98\x3c\xdc\x20\x6b\x5c\x6e\xd7\xb2\xa8\xc4\xd0\xd6\x68\xcc\x6e\xf1\xf5\xf5\xb1\x6a\xe0\x1c\x75\x2a\x83\x26\xa7\xe7\x34\x36\x2e\x84\xa5\xe8\x3a\x3b\xf9\xbb\x7d\x86\x36\x76\x7e\x78\x5f\x9f\x01\x00\x00\xff\xff\xda\x4e\x47\x3e\xf3\x03\x00\x00")

func extraCoreYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraCoreYaml,
		"extra/core.yaml",
	)
}

func extraCoreYaml() (*asset, error) {
	bytes, err := extraCoreYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/core.yaml", size: 1011, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraEventYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x4d\x4a\x45\x31\x0c\x46\xe7\x59\xc5\xb7\x01\xaf\x74\x26\x9d\x8a\x38\x17\x71\x9e\xd7\x46\x0d\xaf\x3f\xa1\xe9\xed\xfa\xa5\xe2\x43\x07\x4e\xbf\x9c\xc3\x21\x6c\xfa\x26\xc3\xb5\xb7\x88\x2a\x93\x0f\x36\xf3\xd4\xb3\x1c\xa9\xd7\xfb\x15\xb8\xd8\x27\x07\xba\x6a\xcb\x11\x2f\xe2\xfd\x1c\x49\x1e\x0b\xbb\xd3\xc6\x33\x4f\x8e\x04\xa4\x21\x3c\xb5\xb7\x57\xad\xe2\x93\xab\x45\xb4\xb3\x14\x02\x1a\x57\x89\x78\x5a\xd2\x26\xb9\x49\xda\x34\x9b\x3e\x8f\x7e\x5a\x84\xec\xdd\x8f\xeb\x83\x1f\xda\x09\x90\xac\x93\x2f\x45\x22\xde\xb9\xb8\x10\x30\x7e\x9a\xbe\xc5\x3b\x7c\xfc\xef\xfd\x72\xb7\xdb\xf7\xb8\x6e\xaf\xad\x70\x91\xc9\x81\x80\xa5\xae\x7f\x02\x5f\x01\x00\x00\xff\xff\xa5\xc9\xa4\x4e\x00\x01\x00\x00")

func extraEventYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraEventYaml,
		"extra/event.yaml",
	)
}

func extraEventYaml() (*asset, error) {
	bytes, err := extraEventYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/event.yaml", size: 256, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraExampleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x3b\x4e\xc5\x40\x0c\x45\xfb\x59\xc5\xdd\x00\x0f\xa5\x75\x8b\x10\x3d\x42\xf4\x37\x13\x03\x16\xf3\xb1\xc6\x93\x88\xe5\xa3\xf0\x11\x14\xaf\xb5\xcf\xf1\x91\xe9\xf6\xac\x23\xac\x37\x41\xd5\xc9\x0b\xdd\x23\xf7\x4d\x2f\xb9\xd7\xdb\x63\x61\xf1\x37\x2e\xe9\xdd\xda\x26\x78\xd4\xe8\xfb\xc8\x7a\x57\x18\x91\x4e\x7c\xe3\xa4\x24\x20\x0f\xe5\xb4\xde\x9e\xac\x6a\x4c\x56\x17\xb4\xbd\x94\x04\x34\x56\x15\xdc\x7f\xb0\x7a\xd1\x14\xae\xf9\xe4\xe9\xf6\x30\xfa\xee\x02\xfd\xde\x9c\xb9\x04\xe8\x66\x93\x6b\x51\xc1\x0b\x4b\x68\x02\xc6\x4f\x33\x4e\xed\x06\xaf\xd7\xac\x3f\x4a\x90\x47\x6f\x93\x6b\x7c\x8d\x8f\xdf\xd7\x8e\x25\x01\x87\x85\xfd\xbb\xfd\x19\x00\x00\xff\xff\x08\x42\x6d\x0e\xfb\x00\x00\x00")

func extraExampleYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraExampleYaml,
		"extra/example.yaml",
	)
}

func extraExampleYaml() (*asset, error) {
	bytes, err := extraExampleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/example.yaml", size: 251, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraExtensionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xbd\x4a\x05\x41\x0c\x85\xfb\x79\x8a\xf3\x02\x5e\xd9\x36\xad\x88\xbd\x88\x7d\xee\xec\xf1\x1a\x9c\x9f\x30\x99\x5d\x7c\x7c\x59\x74\xd1\xc2\x36\xf9\x3e\x3e\x8e\xba\xbd\x72\x84\xf5\x26\xa8\x9c\x7a\x51\xf7\xc8\x7d\xe5\x25\xf7\x7a\xbf\x2f\x5a\xfc\x5d\x97\xf4\x61\x6d\x15\x3c\x33\xfa\x36\x32\x1f\x8a\x46\xa4\x03\x5f\x75\xaa\x24\x20\x0f\xea\xb4\xde\x5e\xac\x32\xa6\x56\x17\xb4\xad\x94\x04\x34\xad\x14\x3c\x7e\x4e\xb6\xa3\x92\xc2\x99\x0f\x43\xdd\x9e\x46\xdf\x5c\xc0\xf3\x17\x09\xe0\x6a\x53\xaf\x85\x82\x37\x2d\xc1\x04\x8c\x9f\x68\x1c\xd6\x1d\x6e\xff\x48\xbf\x90\xc0\xda\x6d\x30\x82\xdf\xf7\xfd\xdc\xb6\x2f\x57\x4e\x5d\x12\xb0\x5b\xd8\x9f\xc0\x57\x00\x00\x00\xff\xff\xbc\x29\x8f\xd2\x01\x01\x00\x00")

func extraExtensionYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraExtensionYaml,
		"extra/extension.yaml",
	)
}

func extraExtensionYaml() (*asset, error) {
	bytes, err := extraExtensionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/extension.yaml", size: 257, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraNodeYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x4e\x04\x31\x0c\x45\xfb\x9c\xe2\x5f\x80\x41\xd3\xa1\xb4\x14\x74\x14\x08\xd1\x7b\x93\x0f\x58\x9b\xc4\x51\x9c\x99\xf3\xa3\x20\x10\x14\x5b\xfb\x3d\x3d\x7f\xe9\xfa\xc6\xe1\x6a\x2d\xa2\x72\xca\x26\xbd\x7b\xb2\xcc\x2d\x59\xbd\x3f\x77\x29\xfd\x53\xf6\x70\xd5\x96\x23\x5e\xe8\x76\x8c\xc4\xc7\x22\xee\x61\xe1\x59\xa6\xc4\x00\xa4\x41\x99\x6a\xed\x55\x2b\x7d\x4a\xed\x11\xed\x28\x25\x00\x4d\x2a\x23\x9e\x2d\x33\x78\x67\x5a\xb0\x74\x7d\x1a\x76\x2c\x66\x85\xae\x0f\xbe\xa9\x05\x80\x59\xa7\x5c\x0a\x23\xde\xa5\x38\x03\x30\x7e\x82\xbe\xb4\x3b\x7c\xdc\xb2\xfe\xa8\x88\x71\xb4\xa9\x95\x69\xfd\x47\xff\x3e\x9e\xbf\xeb\xce\xfd\xc2\x29\x7b\x00\x4e\x75\xfd\x97\xf9\x0a\x00\x00\xff\xff\xfa\x54\x93\x51\x03\x01\x00\x00")

func extraNodeYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraNodeYaml,
		"extra/node.yaml",
	)
}

func extraNodeYaml() (*asset, error) {
	bytes, err := extraNodeYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/node.yaml", size: 259, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _extraSchedulingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xbd\x4e\xc5\x30\x0c\x46\xf7\x3c\xc5\xf7\x02\x14\x75\x43\x5e\x19\xd8\x01\xb1\x9b\xc4\xdc\x6b\x35\x89\xad\x38\xad\xc4\xdb\xa3\x22\xfe\x16\xe6\xef\x1c\x1d\x9b\x5d\x5f\x64\x84\x5a\x27\x34\x99\xbc\xb0\x7b\x64\x2b\xb2\x64\x6b\xb7\xc7\xca\xd5\xaf\xbc\xa6\x4d\x7b\x21\x3c\x4a\xd8\x3e\xb2\xdc\x57\x8e\x48\x27\x5e\x78\x32\x25\x20\x0f\xe1\xa9\xd6\x9f\xb5\x49\x4c\x6e\x4e\xe8\x7b\xad\x09\xe8\xdc\x84\xf0\x94\xaf\x52\xf6\xaa\xfd\x92\xc2\x25\x9f\x0a\xbb\x3e\x0c\xdb\x9d\x10\x3f\xe3\xb2\xdd\xc5\xa2\x96\x00\x29\x3a\xf9\xb5\x0a\xe1\x8d\x6b\x48\x02\xc6\x57\x3c\x4e\xf9\x06\x97\xff\xdd\x5f\x96\xe0\x43\x6d\xe8\x7c\xcf\xe7\xc9\x12\x9f\xeb\xf1\xfd\xf0\xb1\x26\xe0\xd0\xd0\x3f\xa1\x8f\x00\x00\x00\xff\xff\x32\xaa\xaf\xc3\x11\x01\x00\x00")

func extraSchedulingYamlBytes() ([]byte, error) {
	return bindataRead(
		_extraSchedulingYaml,
		"extra/scheduling.yaml",
	)
}

func extraSchedulingYaml() (*asset, error) {
	bytes, err := extraSchedulingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "extra/scheduling.yaml", size: 273, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _networkingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\x43\x0f\xde\xac\xf4\x26\xb9\x2a\x78\x57\xf0\x3e\x9b\x3e\xeb\xd0\x34\x13\x32\xd9\xc8\xfe\x7b\xa9\xbb\x62\x17\x0b\x82\xd7\xcc\x7b\xdf\xcb\x7b\x9c\xe5\x15\xc5\x44\x93\xa7\x05\x95\x7b\xce\xd9\x82\x8e\xe8\x83\x2e\x77\x6d\xe0\x98\xdf\x79\x70\xb3\xa4\xd1\xd3\x33\x4c\x8f\x25\xe0\x21\xb2\x99\x5b\xe5\x23\x57\xf6\x8e\x28\xf1\x02\x4f\xdd\x0b\x4a\x93\x00\xba\xa1\x47\xb1\xa0\x0d\xe5\xd4\x39\xcb\x08\xab\x86\xb3\x3c\x15\x3d\x66\x4f\x09\xf5\x43\xcb\x2c\x69\xea\xe7\x7b\xeb\x45\x1d\x11\x46\xa9\x7c\x88\xf0\xf4\xc6\xd1\xe0\x88\xca\x25\xcd\x56\xf3\x2d\x4d\x67\x6f\xd7\x39\xa2\x9f\xa3\x27\x3b\x67\xda\xd7\x73\xfb\xee\xd2\x86\xad\x69\x2f\x70\xcb\x90\x34\x15\x98\xfd\x86\x1c\x50\xf9\x8a\xd4\xf4\xc4\x13\xca\xd5\x4c\xff\x86\xfd\xf5\xad\xcb\x3d\x6b\x94\x20\xbb\x0d\x9b\x98\x6c\x46\xfb\x0c\x00\x00\xff\xff\x5e\x68\x76\x1d\xce\x01\x00\x00")

func networkingYamlBytes() ([]byte, error) {
	return bindataRead(
		_networkingYaml,
		"networking.yaml",
	)
}

func networkingYaml() (*asset, error) {
	bytes, err := networkingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "networking.yaml", size: 462, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _securityYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xb1\x6e\xc3\x30\x0c\x44\x77\x7d\x05\x91\xb5\x68\x04\x6f\x85\xd6\xfe\x41\x0b\x74\x67\x28\xc6\x21\x22\x5b\x82\x48\x2b\xf5\xdf\x17\x32\x12\x34\x49\x97\x8e\x3a\xdd\x3d\x92\x87\x45\xbe\xb8\xaa\xe4\x39\xc0\xc4\x86\x7b\x2c\x45\x29\x47\xde\x53\x9e\x7c\x1b\x30\x95\x13\x0e\xee\x2c\x73\x0c\xf0\xc1\x9a\x97\x4a\xfc\x9e\x50\xd5\x75\x7b\x44\xc3\xe0\x00\x66\x9c\x38\xc0\x27\xd3\x52\xc5\x56\xa7\x85\xa9\xcb\xf5\x1a\xd0\xfe\x78\x85\xb1\xe6\xa5\x04\x28\x39\x09\xad\x0e\xe0\xd7\xd0\xc5\xa8\xd7\xf8\xf6\x2f\xac\x9b\xa3\xdd\xb6\x6b\xc3\x81\x0d\x87\x7b\x50\xcb\x2b\x8e\x5c\x1f\x76\x7e\xc2\x12\x57\x93\xa3\x10\xda\x3f\x78\xbb\xdd\x53\x5a\xb9\x36\x21\x46\xa2\xbc\xcc\xf6\x07\xe0\x00\x84\xf2\x7c\xbd\x4e\x2b\x05\x38\x99\x15\x0d\xde\x53\x9c\x1f\xab\x3c\xbf\xa9\xdf\xcc\xfe\x86\xa7\xde\x22\xab\xbf\xe4\x7a\x4e\x19\xa3\xee\xb5\x8d\xdb\x08\x5b\x0b\x07\x90\x09\x47\xf6\xda\xc6\x97\xef\x29\x39\x80\x0b\xcb\x78\xb2\x00\x7d\x6c\x13\x95\x43\xe2\x00\x47\x4c\xca\x0e\x80\xa3\x18\xde\x29\x3f\x01\x00\x00\xff\xff\x0f\x13\x69\x3e\xd8\x01\x00\x00")

func securityYamlBytes() ([]byte, error) {
	return bindataRead(
		_securityYaml,
		"security.yaml",
	)
}

func securityYaml() (*asset, error) {
	bytes, err := securityYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "security.yaml", size: 472, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storageYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xcb\x4a\xf6\x30\x10\x86\xf7\xb9\x8a\xe1\xdb\xfe\xfc\x0d\x5d\x08\x1f\xb3\xf5\x0e\x14\xdc\x8f\xe9\x98\x0e\xcd\x89\x4c\x1a\xf5\xee\xa5\xb5\xc5\x03\x22\xb8\xcc\xcc\x9b\x27\xcf\x1b\x2a\xf2\xc0\x55\x25\x27\x84\xc8\x8d\x06\x2a\x45\x5d\x9e\x78\x70\x39\xda\x3e\x52\x28\x33\x8d\x66\x91\x34\x21\xdc\xb1\xe6\xb5\x3a\xbe\x0d\xa4\x6a\xb6\xf8\x44\x8d\xd0\x00\x24\x8a\x8c\x70\xdf\x72\x25\xcf\x46\x0b\xbb\x6d\x5a\x8f\xbc\x6e\x87\xff\xe0\x6b\x5e\x0b\xc2\xe5\x62\x00\x3e\x96\x08\x65\x13\xd0\xc6\xa9\xf5\x1c\xd6\xc8\x2e\x90\x44\xdd\x43\xfd\x74\xeb\xe3\x9f\x10\xbf\xde\xd6\x77\xcd\x61\xb9\xea\x20\xf9\x1b\xe9\x58\xba\xad\xe2\x8f\x18\x71\x39\x1d\x85\xb4\x3a\x84\xb9\xb5\xa2\x68\xad\x9b\xd2\xd7\xcf\x5b\xae\x6a\xf7\xb0\x3d\xe9\x07\xd4\x9e\x02\xda\xfd\xfe\x40\x7b\x2d\x8c\x20\x91\x3c\x5b\xed\xfe\xdf\x4b\x0c\x06\xe0\x99\xc5\xcf\x0d\xe1\xc6\x00\x74\x51\x79\x0c\x8c\xf0\x44\x41\xd9\x00\xf0\x24\x8d\x3e\x4d\xde\x02\x00\x00\xff\xff\x8c\xea\xde\x0b\xc8\x01\x00\x00")

func storageYamlBytes() ([]byte, error) {
	return bindataRead(
		_storageYaml,
		"storage.yaml",
	)
}

func storageYaml() (*asset, error) {
	bytes, err := storageYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "storage.yaml", size: 456, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workloadsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcb\x6e\x2b\x21\x0c\x86\xf7\x3c\x85\x95\xed\xd1\x09\xca\xae\x62\xdb\x37\xe8\xa2\x5d\x7b\xc0\x99\xa1\x01\x8c\xb0\x33\x69\xde\xbe\x22\x4d\xd4\x8b\x46\x19\x65\x89\xed\x8f\x8f\xcb\x8f\x35\xbe\x52\x93\xc8\xc5\x41\x26\xc5\x2d\xd6\x2a\x9e\x03\x6d\x3d\x67\x3b\xef\x30\xd5\x09\x77\xe6\x10\x4b\x70\xf0\x42\xc2\xc7\xe6\xe9\x39\xa1\x88\xe9\xe3\x01\x15\x9d\x01\x28\x98\xc9\xc1\x1b\xb7\x43\x62\x0c\x62\xa4\x92\xef\xf5\x76\x25\xa4\x2f\xfe\xc3\xd8\xf8\x58\x1d\x74\x87\x01\xf8\x6e\x3b\x08\x54\x13\x9f\x33\x15\xfd\xea\xcc\xb7\x43\xcd\xbb\x15\xb2\x51\x4d\xd1\xa3\xd0\x7d\x72\xb3\x59\xe6\x34\x72\xf1\x5c\xb4\x71\x4a\xd4\x1e\x95\x8b\xa2\xd2\xfe\x98\xd6\xec\x4b\x37\x46\xca\x5c\xd6\xc0\x01\xd5\x4f\x7f\xc8\x77\x1e\x1e\x66\x7c\xe3\xb2\xc4\x0d\xa4\x78\xff\x9d\x2a\x87\x25\x5b\xf4\x5c\xae\xbf\x2a\xcd\x3b\x98\x54\xab\x38\x6b\x7d\x28\xbf\x33\x74\x78\x12\x7b\x19\xb6\xb7\x3d\x7d\x8f\x0f\x89\x3d\xdd\xe2\xb2\x95\x79\xbc\x28\xf4\x5c\xc9\x41\xcc\x38\x92\x95\x79\xfc\xf7\x91\x93\x01\x38\x51\x1c\x27\x75\xd0\xb5\x73\x94\x38\x24\x72\xb0\xc7\x24\x64\x00\x28\x44\xc5\x1f\x95\xcf\x00\x00\x00\xff\xff\x22\xbd\xcb\x98\xd1\x02\x00\x00")

func workloadsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workloadsYaml,
		"workloads.yaml",
	)
}

func workloadsYaml() (*asset, error) {
	bytes, err := workloadsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workloads.yaml", size: 721, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"admin.yaml":                       adminYaml,
	"config.yaml":                      configYaml,
	"extra/admissionregistration.yaml": extraAdmissionregistrationYaml,
	"extra/apiextension.yaml":          extraApiextensionYaml,
	"extra/apiregistration.yaml":       extraApiregistrationYaml,
	"extra/authentication.yaml":        extraAuthenticationYaml,
	"extra/authorization.yaml":         extraAuthorizationYaml,
	"extra/autoscaling.yaml":           extraAutoscalingYaml,
	"extra/certificate.yaml":           extraCertificateYaml,
	"extra/coordination.yaml":          extraCoordinationYaml,
	"extra/core.yaml":                  extraCoreYaml,
	"extra/event.yaml":                 extraEventYaml,
	"extra/example.yaml":               extraExampleYaml,
	"extra/extension.yaml":             extraExtensionYaml,
	"extra/node.yaml":                  extraNodeYaml,
	"extra/scheduling.yaml":            extraSchedulingYaml,
	"networking.yaml":                  networkingYaml,
	"security.yaml":                    securityYaml,
	"storage.yaml":                     storageYaml,
	"workloads.yaml":                   workloadsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"admin.yaml":  {adminYaml, map[string]*bintree{}},
	"config.yaml": {configYaml, map[string]*bintree{}},
	"extra": {nil, map[string]*bintree{
		"admissionregistration.yaml": {extraAdmissionregistrationYaml, map[string]*bintree{}},
		"apiextension.yaml":          {extraApiextensionYaml, map[string]*bintree{}},
		"apiregistration.yaml":       {extraApiregistrationYaml, map[string]*bintree{}},
		"authentication.yaml":        {extraAuthenticationYaml, map[string]*bintree{}},
		"authorization.yaml":         {extraAuthorizationYaml, map[string]*bintree{}},
		"autoscaling.yaml":           {extraAutoscalingYaml, map[string]*bintree{}},
		"certificate.yaml":           {extraCertificateYaml, map[string]*bintree{}},
		"coordination.yaml":          {extraCoordinationYaml, map[string]*bintree{}},
		"core.yaml":                  {extraCoreYaml, map[string]*bintree{}},
		"event.yaml":                 {extraEventYaml, map[string]*bintree{}},
		"example.yaml":               {extraExampleYaml, map[string]*bintree{}},
		"extension.yaml":             {extraExtensionYaml, map[string]*bintree{}},
		"node.yaml":                  {extraNodeYaml, map[string]*bintree{}},
		"scheduling.yaml":            {extraSchedulingYaml, map[string]*bintree{}},
	}},
	"networking.yaml": {networkingYaml, map[string]*bintree{}},
	"security.yaml":   {securityYaml, map[string]*bintree{}},
	"storage.yaml":    {storageYaml, map[string]*bintree{}},
	"workloads.yaml":  {workloadsYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
